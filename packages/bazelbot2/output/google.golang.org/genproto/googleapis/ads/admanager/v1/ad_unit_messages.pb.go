// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/ads/admanager/v1/ad_unit_messages.proto

package admanager

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The AdUnit resource.
type AdUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the AdUnit.
	// Format: `networks/{network_code}/adUnits/{ad_unit_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. AdUnit ID.
	AdUnitId int64 `protobuf:"varint,15,opt,name=ad_unit_id,json=adUnitId,proto3" json:"ad_unit_id,omitempty"`
	// Required. Immutable. The AdUnit's parent. Every ad unit has a parent except
	// for the root ad unit, which is created by Google. Format:
	// "networks/{network_code}/adUnits/{ad_unit_id}"
	ParentAdUnit string `protobuf:"bytes,10,opt,name=parent_ad_unit,json=parentAdUnit,proto3" json:"parent_ad_unit,omitempty"`
	// Output only. The path to this AdUnit in the ad unit hierarchy represented
	// as a list from the root to this ad unit's parent. For root ad units, this
	// list is empty.
	ParentPath []*AdUnitParent `protobuf:"bytes,11,rep,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	// Required. The display name of the ad unit. Its maximum length is 255
	// characters.
	DisplayName string `protobuf:"bytes,9,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Immutable. A string used to uniquely identify the ad unit for the purposes
	// of serving the ad. This attribute is optional and can be set during ad unit
	// creation. If it is not provided, it will be assigned by Google based on the
	// ad unit ID.
	AdUnitCode string `protobuf:"bytes,2,opt,name=ad_unit_code,json=adUnitCode,proto3" json:"ad_unit_code,omitempty"`
	// Output only. The status of this ad unit.  It defaults to ACTIVE.
	Status AdUnitStatusEnum_AdUnitStatus `protobuf:"varint,13,opt,name=status,proto3,enum=google.ads.admanager.v1.AdUnitStatusEnum_AdUnitStatus" json:"status,omitempty"`
	// Optional. The target window directly applied to this AdUnit.
	// If this field is not set, this AdUnit uses the target window specified in
	// effectiveTargetWindow.
	AppliedTargetWindow TargetWindowEnum_TargetWindow `protobuf:"varint,44,opt,name=applied_target_window,json=appliedTargetWindow,proto3,enum=google.ads.admanager.v1.TargetWindowEnum_TargetWindow" json:"applied_target_window,omitempty"`
	// Output only. Non-empty default. The target window of this AdUnit. This
	// value is inherited from ancestor AdUnits and defaults to TOP if no AdUnit
	// in the hierarchy specifies it.
	EffectiveTargetWindow TargetWindowEnum_TargetWindow `protobuf:"varint,45,opt,name=effective_target_window,json=effectiveTargetWindow,proto3,enum=google.ads.admanager.v1.TargetWindowEnum_TargetWindow" json:"effective_target_window,omitempty"`
	// Optional. The resource names of Teams directly applied to this AdUnit.
	// Format: "networks/{network_code}/teams/{team_id}"
	AppliedTeams []string `protobuf:"bytes,3,rep,name=applied_teams,json=appliedTeams,proto3" json:"applied_teams,omitempty"`
	// Output only. The resource names of all Teams that this AdUnit is on as well
	// as those inherited from parent AdUnits. Format:
	// "networks/{network_code}/teams/{team_id}"
	Teams []string `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	// Optional. A description of the ad unit. The maximum length is 65,535
	// characters.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional. If this field is set to true, then the AdUnit will not be
	// implicitly targeted when its parent is. Traffickers must explicitly
	// target such an AdUnit or else no line items will serve to it. This
	// feature is only available for Ad Manager 360 accounts.
	ExplicitlyTargeted bool `protobuf:"varint,6,opt,name=explicitly_targeted,json=explicitlyTargeted,proto3" json:"explicitly_targeted,omitempty"`
	// Output only. This field is set to true if the ad unit has any children.
	HasChildren bool `protobuf:"varint,7,opt,name=has_children,json=hasChildren,proto3" json:"has_children,omitempty"`
	// Output only. The time this AdUnit was last modified.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. The sizes that can be served inside this ad unit.
	AdUnitSizes []*AdUnitSize `protobuf:"bytes,14,rep,name=ad_unit_sizes,json=adUnitSizes,proto3" json:"ad_unit_sizes,omitempty"`
	// Optional. Determines what set top box video on demand channel this ad unit
	// corresponds to in an external set top box ad campaign system.
	ExternalSetTopBoxChannelId string `protobuf:"bytes,17,opt,name=external_set_top_box_channel_id,json=externalSetTopBoxChannelId,proto3" json:"external_set_top_box_channel_id,omitempty"`
	// Optional. The duration after which an Ad Unit will automatically refresh.
	// This is only valid for ad units in mobile apps. If not set, the ad unit
	// will not refresh.
	RefreshDelay *durationpb.Duration `protobuf:"bytes,19,opt,name=refresh_delay,json=refreshDelay,proto3" json:"refresh_delay,omitempty"`
	// Optional. The set of labels applied directly to this ad unit.
	AppliedLabels []*AppliedLabel `protobuf:"bytes,21,rep,name=applied_labels,json=appliedLabels,proto3" json:"applied_labels,omitempty"`
	// Output only. Contains the set of labels applied directly to the ad unit as
	// well as those inherited from the parent ad units. If a label has been
	// negated, only the negated label is returned. This field is readonly and is
	// assigned by Google.
	EffectiveAppliedLabels []*AppliedLabel `protobuf:"bytes,22,rep,name=effective_applied_labels,json=effectiveAppliedLabels,proto3" json:"effective_applied_labels,omitempty"`
	// Optional. The set of label frequency caps applied directly to this ad unit.
	// There is a limit of 10 label frequency caps per ad unit.
	AppliedLabelFrequencyCaps []*LabelFrequencyCap `protobuf:"bytes,23,rep,name=applied_label_frequency_caps,json=appliedLabelFrequencyCaps,proto3" json:"applied_label_frequency_caps,omitempty"`
	// Output only. The label frequency caps applied directly to the ad unit as
	// well as those inherited from parent ad units.
	EffectiveLabelFrequencyCaps []*LabelFrequencyCap `protobuf:"bytes,24,rep,name=effective_label_frequency_caps,json=effectiveLabelFrequencyCaps,proto3" json:"effective_label_frequency_caps,omitempty"`
	// Optional. The smart size mode for this ad unit. This attribute is optional
	// and defaults to SmartSizeMode.NONE for fixed sizes.
	SmartSizeMode SmartSizeModeEnum_SmartSizeMode `protobuf:"varint,25,opt,name=smart_size_mode,json=smartSizeMode,proto3,enum=google.ads.admanager.v1.SmartSizeModeEnum_SmartSizeMode" json:"smart_size_mode,omitempty"`
	// Optional. The value of AdSense enabled directly applied to this ad unit.
	// This attribute is optional and if not specified this ad unit will inherit
	// the value of effectiveAdsenseEnabled from its ancestors.
	AppliedAdsenseEnabled *bool `protobuf:"varint,26,opt,name=applied_adsense_enabled,json=appliedAdsenseEnabled,proto3,oneof" json:"applied_adsense_enabled,omitempty"`
	// Output only. Specifies whether or not the AdUnit is enabled for serving ads
	// from the AdSense content network. This attribute defaults to the ad unit's
	// parent or ancestor's setting if one has been set. If no ancestor of the ad
	// unit has set appliedAdsenseEnabled, the attribute is defaulted to true.
	EffectiveAdsenseEnabled bool `protobuf:"varint,27,opt,name=effective_adsense_enabled,json=effectiveAdsenseEnabled,proto3" json:"effective_adsense_enabled,omitempty"`
}

func (x *AdUnit) Reset() {
	*x = AdUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdUnit) ProtoMessage() {}

func (x *AdUnit) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdUnit.ProtoReflect.Descriptor instead.
func (*AdUnit) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescGZIP(), []int{0}
}

func (x *AdUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdUnit) GetAdUnitId() int64 {
	if x != nil {
		return x.AdUnitId
	}
	return 0
}

func (x *AdUnit) GetParentAdUnit() string {
	if x != nil {
		return x.ParentAdUnit
	}
	return ""
}

func (x *AdUnit) GetParentPath() []*AdUnitParent {
	if x != nil {
		return x.ParentPath
	}
	return nil
}

func (x *AdUnit) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AdUnit) GetAdUnitCode() string {
	if x != nil {
		return x.AdUnitCode
	}
	return ""
}

func (x *AdUnit) GetStatus() AdUnitStatusEnum_AdUnitStatus {
	if x != nil {
		return x.Status
	}
	return AdUnitStatusEnum_AD_UNIT_STATUS_UNSPECIFIED
}

func (x *AdUnit) GetAppliedTargetWindow() TargetWindowEnum_TargetWindow {
	if x != nil {
		return x.AppliedTargetWindow
	}
	return TargetWindowEnum_TARGET_WINDOW_UNSPECIFIED
}

func (x *AdUnit) GetEffectiveTargetWindow() TargetWindowEnum_TargetWindow {
	if x != nil {
		return x.EffectiveTargetWindow
	}
	return TargetWindowEnum_TARGET_WINDOW_UNSPECIFIED
}

func (x *AdUnit) GetAppliedTeams() []string {
	if x != nil {
		return x.AppliedTeams
	}
	return nil
}

func (x *AdUnit) GetTeams() []string {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *AdUnit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AdUnit) GetExplicitlyTargeted() bool {
	if x != nil {
		return x.ExplicitlyTargeted
	}
	return false
}

func (x *AdUnit) GetHasChildren() bool {
	if x != nil {
		return x.HasChildren
	}
	return false
}

func (x *AdUnit) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *AdUnit) GetAdUnitSizes() []*AdUnitSize {
	if x != nil {
		return x.AdUnitSizes
	}
	return nil
}

func (x *AdUnit) GetExternalSetTopBoxChannelId() string {
	if x != nil {
		return x.ExternalSetTopBoxChannelId
	}
	return ""
}

func (x *AdUnit) GetRefreshDelay() *durationpb.Duration {
	if x != nil {
		return x.RefreshDelay
	}
	return nil
}

func (x *AdUnit) GetAppliedLabels() []*AppliedLabel {
	if x != nil {
		return x.AppliedLabels
	}
	return nil
}

func (x *AdUnit) GetEffectiveAppliedLabels() []*AppliedLabel {
	if x != nil {
		return x.EffectiveAppliedLabels
	}
	return nil
}

func (x *AdUnit) GetAppliedLabelFrequencyCaps() []*LabelFrequencyCap {
	if x != nil {
		return x.AppliedLabelFrequencyCaps
	}
	return nil
}

func (x *AdUnit) GetEffectiveLabelFrequencyCaps() []*LabelFrequencyCap {
	if x != nil {
		return x.EffectiveLabelFrequencyCaps
	}
	return nil
}

func (x *AdUnit) GetSmartSizeMode() SmartSizeModeEnum_SmartSizeMode {
	if x != nil {
		return x.SmartSizeMode
	}
	return SmartSizeModeEnum_SMART_SIZE_MODE_UNSPECIFIED
}

func (x *AdUnit) GetAppliedAdsenseEnabled() bool {
	if x != nil && x.AppliedAdsenseEnabled != nil {
		return *x.AppliedAdsenseEnabled
	}
	return false
}

func (x *AdUnit) GetEffectiveAdsenseEnabled() bool {
	if x != nil {
		return x.EffectiveAdsenseEnabled
	}
	return false
}

// Represents the size, environment, and companions of an ad in an ad unit.
type AdUnitSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The Size of the AdUnit.
	Size *Size `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	// Required. The EnvironmentType of the AdUnit
	EnvironmentType EnvironmentTypeEnum_EnvironmentType `protobuf:"varint,2,opt,name=environment_type,json=environmentType,proto3,enum=google.ads.admanager.v1.EnvironmentTypeEnum_EnvironmentType" json:"environment_type,omitempty"`
	// The companions for this ad unit size. Companions are only valid if the
	// environment is
	// [VIDEO_PLAYER][google.ads.admanager.v1.EnvironmentTypeEnum.EnvironmentType].
	Companions []*Size `protobuf:"bytes,3,rep,name=companions,proto3" json:"companions,omitempty"`
}

func (x *AdUnitSize) Reset() {
	*x = AdUnitSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdUnitSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdUnitSize) ProtoMessage() {}

func (x *AdUnitSize) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdUnitSize.ProtoReflect.Descriptor instead.
func (*AdUnitSize) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescGZIP(), []int{1}
}

func (x *AdUnitSize) GetSize() *Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *AdUnitSize) GetEnvironmentType() EnvironmentTypeEnum_EnvironmentType {
	if x != nil {
		return x.EnvironmentType
	}
	return EnvironmentTypeEnum_ENVIRONMENT_TYPE_UNSPECIFIED
}

func (x *AdUnitSize) GetCompanions() []*Size {
	if x != nil {
		return x.Companions
	}
	return nil
}

// The summary of a parent AdUnit.
type AdUnitParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The parent of the current AdUnit
	// Format: `networks/{network_code}/adUnits/{ad_unit_id}`
	ParentAdUnit string `protobuf:"bytes,1,opt,name=parent_ad_unit,json=parentAdUnit,proto3" json:"parent_ad_unit,omitempty"`
	// Output only. The display name of the parent AdUnit.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. A string used to uniquely identify the ad unit for the
	// purposes of serving the ad.
	AdUnitCode string `protobuf:"bytes,3,opt,name=ad_unit_code,json=adUnitCode,proto3" json:"ad_unit_code,omitempty"`
}

func (x *AdUnitParent) Reset() {
	*x = AdUnitParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdUnitParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdUnitParent) ProtoMessage() {}

func (x *AdUnitParent) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdUnitParent.ProtoReflect.Descriptor instead.
func (*AdUnitParent) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescGZIP(), []int{2}
}

func (x *AdUnitParent) GetParentAdUnit() string {
	if x != nil {
		return x.ParentAdUnit
	}
	return ""
}

func (x *AdUnitParent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AdUnitParent) GetAdUnitCode() string {
	if x != nil {
		return x.AdUnitCode
	}
	return ""
}

// Frequency cap using a label.
type LabelFrequencyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The label to used for frequency capping.
	// Format: "networks/{network_code}/labels/{label_id}"
	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The frequency cap.
	FrequencyCap *FrequencyCap `protobuf:"bytes,2,opt,name=frequency_cap,json=frequencyCap,proto3" json:"frequency_cap,omitempty"`
}

func (x *LabelFrequencyCap) Reset() {
	*x = LabelFrequencyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelFrequencyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelFrequencyCap) ProtoMessage() {}

func (x *LabelFrequencyCap) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelFrequencyCap.ProtoReflect.Descriptor instead.
func (*LabelFrequencyCap) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescGZIP(), []int{3}
}

func (x *LabelFrequencyCap) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelFrequencyCap) GetFrequencyCap() *FrequencyCap {
	if x != nil {
		return x.FrequencyCap
	}
	return nil
}

var File_google_ads_admanager_v1_ad_unit_messages_proto protoreflect.FileDescriptor

var file_google_ads_admanager_v1_ad_unit_messages_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64,
	0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x0f, 0x0a, 0x06, 0x41, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x21,
	0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x4b, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52,
	0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x6f, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x76, 0x0a, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x06, 0xe0, 0x41, 0x07, 0xe0,
	0x41, 0x03, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x25, 0xe0, 0x41, 0x01, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x13, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x6c, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x64, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x64, 0x55, 0x6e,
	0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x6f, 0x78, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x42, 0x6f, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x51, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x16, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x70, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70,
	0x73, 0x12, 0x74, 0x0a, 0x1e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63,
	0x61, 0x70, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x61, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1b, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x73, 0x12, 0x65, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x53, 0x6d, 0x61,
	0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0d, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x17, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x73, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41,
	0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x19, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64,
	0x73, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x3a, 0x60, 0xea, 0x41, 0x5d, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d,
	0x2f, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x7d, 0x2a, 0x07, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x32, 0x06, 0x61, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x73, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xf1, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x36,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x2e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x61,
	0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x20, 0x0a,
	0x1e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x61, 0x70, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x61, 0x70, 0x42, 0xc7, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x42, 0x13, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0xaa, 0x02, 0x17, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41,
	0x64, 0x73, 0x5c, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x1a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x41,
	0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescOnce sync.Once
	file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescData = file_google_ads_admanager_v1_ad_unit_messages_proto_rawDesc
)

func file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescGZIP() []byte {
	file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescOnce.Do(func() {
		file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescData)
	})
	return file_google_ads_admanager_v1_ad_unit_messages_proto_rawDescData
}

var file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_google_ads_admanager_v1_ad_unit_messages_proto_goTypes = []any{
	(*AdUnit)(nil),                           // 0: google.ads.admanager.v1.AdUnit
	(*AdUnitSize)(nil),                       // 1: google.ads.admanager.v1.AdUnitSize
	(*AdUnitParent)(nil),                     // 2: google.ads.admanager.v1.AdUnitParent
	(*LabelFrequencyCap)(nil),                // 3: google.ads.admanager.v1.LabelFrequencyCap
	(AdUnitStatusEnum_AdUnitStatus)(0),       // 4: google.ads.admanager.v1.AdUnitStatusEnum.AdUnitStatus
	(TargetWindowEnum_TargetWindow)(0),       // 5: google.ads.admanager.v1.TargetWindowEnum.TargetWindow
	(*timestamppb.Timestamp)(nil),            // 6: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),              // 7: google.protobuf.Duration
	(*AppliedLabel)(nil),                     // 8: google.ads.admanager.v1.AppliedLabel
	(SmartSizeModeEnum_SmartSizeMode)(0),     // 9: google.ads.admanager.v1.SmartSizeModeEnum.SmartSizeMode
	(*Size)(nil),                             // 10: google.ads.admanager.v1.Size
	(EnvironmentTypeEnum_EnvironmentType)(0), // 11: google.ads.admanager.v1.EnvironmentTypeEnum.EnvironmentType
	(*FrequencyCap)(nil),                     // 12: google.ads.admanager.v1.FrequencyCap
}
var file_google_ads_admanager_v1_ad_unit_messages_proto_depIdxs = []int32{
	2,  // 0: google.ads.admanager.v1.AdUnit.parent_path:type_name -> google.ads.admanager.v1.AdUnitParent
	4,  // 1: google.ads.admanager.v1.AdUnit.status:type_name -> google.ads.admanager.v1.AdUnitStatusEnum.AdUnitStatus
	5,  // 2: google.ads.admanager.v1.AdUnit.applied_target_window:type_name -> google.ads.admanager.v1.TargetWindowEnum.TargetWindow
	5,  // 3: google.ads.admanager.v1.AdUnit.effective_target_window:type_name -> google.ads.admanager.v1.TargetWindowEnum.TargetWindow
	6,  // 4: google.ads.admanager.v1.AdUnit.update_time:type_name -> google.protobuf.Timestamp
	1,  // 5: google.ads.admanager.v1.AdUnit.ad_unit_sizes:type_name -> google.ads.admanager.v1.AdUnitSize
	7,  // 6: google.ads.admanager.v1.AdUnit.refresh_delay:type_name -> google.protobuf.Duration
	8,  // 7: google.ads.admanager.v1.AdUnit.applied_labels:type_name -> google.ads.admanager.v1.AppliedLabel
	8,  // 8: google.ads.admanager.v1.AdUnit.effective_applied_labels:type_name -> google.ads.admanager.v1.AppliedLabel
	3,  // 9: google.ads.admanager.v1.AdUnit.applied_label_frequency_caps:type_name -> google.ads.admanager.v1.LabelFrequencyCap
	3,  // 10: google.ads.admanager.v1.AdUnit.effective_label_frequency_caps:type_name -> google.ads.admanager.v1.LabelFrequencyCap
	9,  // 11: google.ads.admanager.v1.AdUnit.smart_size_mode:type_name -> google.ads.admanager.v1.SmartSizeModeEnum.SmartSizeMode
	10, // 12: google.ads.admanager.v1.AdUnitSize.size:type_name -> google.ads.admanager.v1.Size
	11, // 13: google.ads.admanager.v1.AdUnitSize.environment_type:type_name -> google.ads.admanager.v1.EnvironmentTypeEnum.EnvironmentType
	10, // 14: google.ads.admanager.v1.AdUnitSize.companions:type_name -> google.ads.admanager.v1.Size
	12, // 15: google.ads.admanager.v1.LabelFrequencyCap.frequency_cap:type_name -> google.ads.admanager.v1.FrequencyCap
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_google_ads_admanager_v1_ad_unit_messages_proto_init() }
func file_google_ads_admanager_v1_ad_unit_messages_proto_init() {
	if File_google_ads_admanager_v1_ad_unit_messages_proto != nil {
		return
	}
	file_google_ads_admanager_v1_ad_unit_enums_proto_init()
	file_google_ads_admanager_v1_applied_label_proto_init()
	file_google_ads_admanager_v1_environment_type_enum_proto_init()
	file_google_ads_admanager_v1_frequency_cap_proto_init()
	file_google_ads_admanager_v1_size_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AdUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*AdUnitSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*AdUnitParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*LabelFrequencyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_admanager_v1_ad_unit_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_admanager_v1_ad_unit_messages_proto_goTypes,
		DependencyIndexes: file_google_ads_admanager_v1_ad_unit_messages_proto_depIdxs,
		MessageInfos:      file_google_ads_admanager_v1_ad_unit_messages_proto_msgTypes,
	}.Build()
	File_google_ads_admanager_v1_ad_unit_messages_proto = out.File
	file_google_ads_admanager_v1_ad_unit_messages_proto_rawDesc = nil
	file_google_ads_admanager_v1_ad_unit_messages_proto_goTypes = nil
	file_google_ads_admanager_v1_ad_unit_messages_proto_depIdxs = nil
}
