// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/ads/admanager/v1/report_service.proto

package admanager

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	dayofweek "google.golang.org/genproto/googleapis/type/dayofweek"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Valid time period columns.
type Report_TimePeriodColumn int32

const (
	// Default value. Report will have no time period column.
	Report_TIME_PERIOD_COLUMN_UNSPECIFIED Report_TimePeriodColumn = 0
	// A column for each date in the report.
	Report_TIME_PERIOD_COLUMN_DATE Report_TimePeriodColumn = 1
	// A column for each week in the report.
	Report_TIME_PERIOD_COLUMN_WEEK Report_TimePeriodColumn = 2
	// A column for each month in the report.
	Report_TIME_PERIOD_COLUMN_MONTH Report_TimePeriodColumn = 3
	// A column for each quarter in the report.
	Report_TIME_PERIOD_COLUMN_QUARTER Report_TimePeriodColumn = 4
)

// Enum value maps for Report_TimePeriodColumn.
var (
	Report_TimePeriodColumn_name = map[int32]string{
		0: "TIME_PERIOD_COLUMN_UNSPECIFIED",
		1: "TIME_PERIOD_COLUMN_DATE",
		2: "TIME_PERIOD_COLUMN_WEEK",
		3: "TIME_PERIOD_COLUMN_MONTH",
		4: "TIME_PERIOD_COLUMN_QUARTER",
	}
	Report_TimePeriodColumn_value = map[string]int32{
		"TIME_PERIOD_COLUMN_UNSPECIFIED": 0,
		"TIME_PERIOD_COLUMN_DATE":        1,
		"TIME_PERIOD_COLUMN_WEEK":        2,
		"TIME_PERIOD_COLUMN_MONTH":       3,
		"TIME_PERIOD_COLUMN_QUARTER":     4,
	}
)

func (x Report_TimePeriodColumn) Enum() *Report_TimePeriodColumn {
	p := new(Report_TimePeriodColumn)
	*p = x
	return p
}

func (x Report_TimePeriodColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_TimePeriodColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[0].Descriptor()
}

func (Report_TimePeriodColumn) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[0]
}

func (x Report_TimePeriodColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_TimePeriodColumn.Descriptor instead.
func (Report_TimePeriodColumn) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 0}
}

// Reporting dimensions.
type Report_Dimension int32

const (
	// Default value. This value is unused.
	Report_DIMENSION_UNSPECIFIED Report_Dimension = 0
	// The domain name of the advertiser.
	Report_ADVERTISER_DOMAIN_NAME Report_Dimension = 242
	// The ID used in an external system for advertiser identification
	Report_ADVERTISER_EXTERNAL_ID Report_Dimension = 228
	// The ID of an advertiser company assigned to an order
	Report_ADVERTISER_ID Report_Dimension = 131
	// Labels applied to the advertiser
	// can be used for either competitive exclusion or ad exclusion
	Report_ADVERTISER_LABELS Report_Dimension = 230
	// Label ids applied to the advertiser
	// can be used for either competitive exclusion or ad exclusion
	Report_ADVERTISER_LABEL_IDS Report_Dimension = 229
	// The name of an advertiser company assigned to an order
	Report_ADVERTISER_NAME Report_Dimension = 132
	// The name of the contact associated with an advertiser company
	Report_ADVERTISER_PRIMARY_CONTACT Report_Dimension = 227
	// Shows an ENUM value describing whether a given piece of publisher
	// inventory was above (ATF) or below the fold (BTF) of a page.
	Report_AD_LOCATION Report_Dimension = 390
	// Shows a localized string describing whether a given piece of publisher
	// inventory was above (ATF) or below the fold (BTF) of a page.
	Report_AD_LOCATION_NAME Report_Dimension = 391
	// The code of the ad unit where the ad was requested.
	Report_AD_UNIT_CODE Report_Dimension = 64
	// The code of the first level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_1 Report_Dimension = 65
	// The code of the tenth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_10 Report_Dimension = 74
	// The code of the eleventh level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_11 Report_Dimension = 75
	// The code of the twelfth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_12 Report_Dimension = 76
	// The code of the thirteenth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_13 Report_Dimension = 77
	// The code of the fourteenth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_14 Report_Dimension = 78
	// The code of the fifteenth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_15 Report_Dimension = 79
	// The code of the sixteenth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_16 Report_Dimension = 80
	// The code of the second level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_2 Report_Dimension = 66
	// The code of the third level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_3 Report_Dimension = 67
	// The code of the fourth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_4 Report_Dimension = 68
	// The code of the fifth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_5 Report_Dimension = 69
	// The code of the sixth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_6 Report_Dimension = 70
	// The code of the seventh level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_7 Report_Dimension = 71
	// The code of the eighth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_8 Report_Dimension = 72
	// The code of the ninth level ad unit of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_CODE_LEVEL_9 Report_Dimension = 73
	// The depth of the ad unit's hierarchy
	Report_AD_UNIT_DEPTH Report_Dimension = 101
	// The ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID Report_Dimension = 25
	// The full hierarchy of ad unit IDs where the ad was requested, from
	// root to leaf, excluding the root ad unit ID.
	Report_AD_UNIT_ID_ALL_LEVEL Report_Dimension = 27
	// The first level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_1 Report_Dimension = 30
	// The tenth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_10 Report_Dimension = 48
	// The eleventh level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_11 Report_Dimension = 50
	// The twelfth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_12 Report_Dimension = 52
	// The thirteenth level ad unit ID of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_ID_LEVEL_13 Report_Dimension = 54
	// The fourteenth level ad unit ID of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_ID_LEVEL_14 Report_Dimension = 56
	// The fifteenth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_15 Report_Dimension = 58
	// The sixteenth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_16 Report_Dimension = 60
	// The second level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_2 Report_Dimension = 32
	// The third level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_3 Report_Dimension = 34
	// The fourth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_4 Report_Dimension = 36
	// The fifth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_5 Report_Dimension = 38
	// The sixth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_6 Report_Dimension = 40
	// The seventh level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_7 Report_Dimension = 42
	// The eighth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_8 Report_Dimension = 44
	// The ninth level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_LEVEL_9 Report_Dimension = 46
	// The top-level ad unit ID of the ad unit where the ad was requested.
	Report_AD_UNIT_ID_TOP_LEVEL Report_Dimension = 142
	// The name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME Report_Dimension = 26
	// The full hierarchy of ad unit names where the ad was requested, from
	// root to leaf, excluding the root ad unit name.
	Report_AD_UNIT_NAME_ALL_LEVEL Report_Dimension = 29
	// The first level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_1 Report_Dimension = 31
	// The tenth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_10 Report_Dimension = 49
	// The eleventh level ad unit name of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_NAME_LEVEL_11 Report_Dimension = 51
	// The twelfth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_12 Report_Dimension = 53
	// The thirteenth level ad unit name of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_NAME_LEVEL_13 Report_Dimension = 55
	// The fourteenth level ad unit name of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_NAME_LEVEL_14 Report_Dimension = 57
	// The fifteenth level ad unit name of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_NAME_LEVEL_15 Report_Dimension = 59
	// The sixteenth level ad unit name of the ad unit where the ad was
	// requested.
	Report_AD_UNIT_NAME_LEVEL_16 Report_Dimension = 61
	// The second level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_2 Report_Dimension = 33
	// The third level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_3 Report_Dimension = 35
	// The fourth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_4 Report_Dimension = 37
	// The fifth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_5 Report_Dimension = 39
	// The sixth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_6 Report_Dimension = 41
	// The seventh level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_7 Report_Dimension = 43
	// The eighth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_8 Report_Dimension = 45
	// The ninth level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_LEVEL_9 Report_Dimension = 47
	// The top-level ad unit name of the ad unit where the ad was requested.
	Report_AD_UNIT_NAME_TOP_LEVEL Report_Dimension = 143
	// The reward amount of the ad unit where the ad was requested.
	Report_AD_UNIT_REWARD_AMOUNT Report_Dimension = 63
	// The reward type of the ad unit where the ad was requested.
	Report_AD_UNIT_REWARD_TYPE Report_Dimension = 62
	// The status of the ad unit
	Report_AD_UNIT_STATUS Report_Dimension = 206
	// The name of the status of the ad unit
	Report_AD_UNIT_STATUS_NAME Report_Dimension = 207
	// The app version.
	Report_APP_VERSION Report_Dimension = 392
	// The ID used in an external system for advertiser identification
	Report_BACKFILL_ADVERTISER_EXTERNAL_ID Report_Dimension = 349
	// The ID of an advertiser company assigned to a backfill order
	Report_BACKFILL_ADVERTISER_ID Report_Dimension = 346
	// Labels applied to the advertiser
	// can be used for either competitive exclusion or ad exclusion
	Report_BACKFILL_ADVERTISER_LABELS Report_Dimension = 351
	// Label ids applied to the advertiser
	// can be used for either competitive exclusion or ad exclusion
	Report_BACKFILL_ADVERTISER_LABEL_IDS Report_Dimension = 350
	// The name of an advertiser company assigned to a backfill order
	Report_BACKFILL_ADVERTISER_NAME Report_Dimension = 347
	// The name of the contact associated with an advertiser company
	Report_BACKFILL_ADVERTISER_PRIMARY_CONTACT Report_Dimension = 348
	// Enum value of Backfill creative billing type
	Report_BACKFILL_CREATIVE_BILLING_TYPE Report_Dimension = 378
	// Localized string value of Backfill creative billing type
	Report_BACKFILL_CREATIVE_BILLING_TYPE_NAME Report_Dimension = 379
	// Represents the click-through URL of a Backfill creative
	Report_BACKFILL_CREATIVE_CLICK_THROUGH_URL Report_Dimension = 376
	// The ID of a Backfill creative
	Report_BACKFILL_CREATIVE_ID Report_Dimension = 370
	// Backfill creative name
	Report_BACKFILL_CREATIVE_NAME Report_Dimension = 371
	// Third party vendor name of a Backfill creative
	Report_BACKFILL_CREATIVE_THIRD_PARTY_VENDOR Report_Dimension = 377
	// Enum value of Backfill creative type
	Report_BACKFILL_CREATIVE_TYPE Report_Dimension = 374
	// Localized string name of Backfill creative type
	Report_BACKFILL_CREATIVE_TYPE_NAME Report_Dimension = 375
	// Whether a Backfill line item is archived.
	Report_BACKFILL_LINE_ITEM_ARCHIVED Report_Dimension = 278
	// Backfill line item comanion delivery option ENUM value.
	Report_BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION Report_Dimension = 258
	// Localized Backfill line item comanion delivery option name.
	Report_BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME Report_Dimension = 259
	// The computed status of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_COMPUTED_STATUS Report_Dimension = 296
	// The localized name of the computed status of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_COMPUTED_STATUS_NAME Report_Dimension = 297
	// The contracted units bought for the Backfill line item.
	Report_BACKFILL_LINE_ITEM_CONTRACTED_QUANTITY Report_Dimension = 280
	// The cost per unit of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_COST_PER_UNIT Report_Dimension = 272
	// Backfill line item cost type ENUM value.
	Report_BACKFILL_LINE_ITEM_COST_TYPE Report_Dimension = 264
	// Localized Backfill line item cost type name.
	Report_BACKFILL_LINE_ITEM_COST_TYPE_NAME Report_Dimension = 265
	// Represent the end date of a Backfill creative associated with a Backfill
	// line item
	Report_BACKFILL_LINE_ITEM_CREATIVE_END_DATE Report_Dimension = 381
	// The creative rotation type of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE Report_Dimension = 290
	// The localized name of the creative rotation type of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME Report_Dimension = 291
	// Represent the start date of a Backfill creative associated with a
	// Backfill line item
	Report_BACKFILL_LINE_ITEM_CREATIVE_START_DATE Report_Dimension = 380
	// The 3 letter currency code of the Backfill line item
	Report_BACKFILL_LINE_ITEM_CURRENCY_CODE Report_Dimension = 288
	// The progress made for the delivery of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_DELIVERY_INDICATOR Report_Dimension = 274
	// The delivery rate type of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE Report_Dimension = 292
	// The localized name of the delivery rate type of the BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE_NAME Report_Dimension = 293
	// The discount of the BackfillLineItem in whole units in the
	// BackfillLineItem's currency code, or if unspecified the Network's
	// currency code.
	Report_BACKFILL_LINE_ITEM_DISCOUNT_ABSOLUTE Report_Dimension = 294
	// The discount of the BackfillLineItem in percentage.
	Report_BACKFILL_LINE_ITEM_DISCOUNT_PERCENTAGE Report_Dimension = 295
	// The end date of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_END_DATE Report_Dimension = 267
	// The end date and time of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_END_DATE_TIME Report_Dimension = 269
	// The ENUM value of the environment a Backfill line item is targeting.
	Report_BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE Report_Dimension = 302
	// The localized name of the environment a Backfill line item is targeting.
	Report_BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE_NAME Report_Dimension = 257
	// The deal ID of the Backfill line item. Set for Programmatic Direct
	// campaigns.
	Report_BACKFILL_LINE_ITEM_EXTERNAL_DEAL_ID Report_Dimension = 285
	// The external ID of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_EXTERNAL_ID Report_Dimension = 273
	// The frequency cap of the Backfill line item (descriptive string).
	Report_BACKFILL_LINE_ITEM_FREQUENCY_CAP Report_Dimension = 303
	// Backfill line item ID.
	Report_BACKFILL_LINE_ITEM_ID Report_Dimension = 298
	// The application that last modified the Backfill line item.
	Report_BACKFILL_LINE_ITEM_LAST_MODIFIED_BY_APP Report_Dimension = 289
	// The total number of clicks delivered of the lifetime of the Backfill line
	// item.
	Report_BACKFILL_LINE_ITEM_LIFETIME_CLICKS Report_Dimension = 283
	// The total number of impressions delivered over the lifetime of the
	// Backfill line item.
	Report_BACKFILL_LINE_ITEM_LIFETIME_IMPRESSIONS Report_Dimension = 282
	// The total number of viewable impressions delivered over the lifetime of
	// the Backfill line item.
	Report_BACKFILL_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS Report_Dimension = 284
	// Whether or not the Backfill line item is Makegood. Makegood refers to
	// free inventory offered to buyers to compensate for mistakes or
	// under-delivery in the original campaigns.
	Report_BACKFILL_LINE_ITEM_MAKEGOOD Report_Dimension = 276
	// Backfill line item name.
	Report_BACKFILL_LINE_ITEM_NAME Report_Dimension = 299
	// The cost of booking for the Backfill line item (non-CPD).
	Report_BACKFILL_LINE_ITEM_NON_CPD_BOOKED_REVENUE Report_Dimension = 286
	// Whether a Backfill line item is eligible for opitimization.
	Report_BACKFILL_LINE_ITEM_OPTIMIZABLE Report_Dimension = 277
	// Goal type ENUM value of the primary goal of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE Report_Dimension = 262
	// Localized goal type name of the primary goal of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME Report_Dimension = 263
	// Unit type ENUM value of the primary goal of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE Report_Dimension = 260
	// Localized unit type name of the primary goal of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME Report_Dimension = 261
	// The priority of this Backfill line item as a value between 1 and 16.
	// In general, a lower priority means more serving priority for the
	// Backfill line item.
	Report_BACKFILL_LINE_ITEM_PRIORITY Report_Dimension = 266
	// ENUM value describing the state of inventory reservation for the
	// BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_RESERVATION_STATUS Report_Dimension = 306
	// Localized string describing the state of inventory reservation for the
	// BackfillLineItem.
	Report_BACKFILL_LINE_ITEM_RESERVATION_STATUS_NAME Report_Dimension = 307
	// The start date of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_START_DATE Report_Dimension = 268
	// The start date and time of the Backfill line item.
	Report_BACKFILL_LINE_ITEM_START_DATE_TIME Report_Dimension = 270
	// Backfill line item type ENUM value.
	Report_BACKFILL_LINE_ITEM_TYPE Report_Dimension = 300
	// Localized Backfill line item type name.
	Report_BACKFILL_LINE_ITEM_TYPE_NAME Report_Dimension = 301
	// Whether the Backfill line item end time and end date is set to
	// effectively never end.
	Report_BACKFILL_LINE_ITEM_UNLIMITED_END Report_Dimension = 271
	// The artificial cost per unit used by the Ad server to help rank
	// inventory.
	Report_BACKFILL_LINE_ITEM_VALUE_COST_PER_UNIT Report_Dimension = 275
	// The web property code used for dynamic allocation Backfill line items.
	Report_BACKFILL_LINE_ITEM_WEB_PROPERTY_CODE Report_Dimension = 287
	// The ID of Backfill creative, includes regular creatives, and master and
	// companions in case of creative sets
	Report_BACKFILL_MASTER_COMPANION_CREATIVE_ID Report_Dimension = 372
	// Name of Backfill creative, includes regular creatives, and master and
	// companions in case of creative sets
	Report_BACKFILL_MASTER_COMPANION_CREATIVE_NAME Report_Dimension = 373
	// Backfill order agency.
	Report_BACKFILL_ORDER_AGENCY Report_Dimension = 313
	// Backfill order agency ID.
	Report_BACKFILL_ORDER_AGENCY_ID Report_Dimension = 314
	// Backfill order booked CPC.
	Report_BACKFILL_ORDER_BOOKED_CPC Report_Dimension = 315
	// Backfill order booked CPM.
	Report_BACKFILL_ORDER_BOOKED_CPM Report_Dimension = 316
	// Backfill order delivery status ENUM value.
	Report_BACKFILL_ORDER_DELIVERY_STATUS Report_Dimension = 340
	// Backfill order delivery status localized name.
	Report_BACKFILL_ORDER_DELIVERY_STATUS_NAME Report_Dimension = 341
	// Backfill order end date.
	Report_BACKFILL_ORDER_END_DATE Report_Dimension = 317
	// Backfill order end date and time.
	Report_BACKFILL_ORDER_END_DATE_TIME Report_Dimension = 319
	// Backfill order external ID.
	Report_BACKFILL_ORDER_EXTERNAL_ID Report_Dimension = 320
	// Backfill order id.
	Report_BACKFILL_ORDER_ID Report_Dimension = 338
	// Backfill order labels.
	Report_BACKFILL_ORDER_LABELS Report_Dimension = 334
	// Backfill order labels IDs.
	Report_BACKFILL_ORDER_LABEL_IDS Report_Dimension = 335
	// Backfill order lifetime clicks.
	Report_BACKFILL_ORDER_LIFETIME_CLICKS Report_Dimension = 322
	// Backfill order lifetime impressions.
	Report_BACKFILL_ORDER_LIFETIME_IMPRESSIONS Report_Dimension = 323
	// Backfill order name.
	Report_BACKFILL_ORDER_NAME Report_Dimension = 339
	// Backfill order PO number.
	Report_BACKFILL_ORDER_PO_NUMBER Report_Dimension = 324
	// Whether the Backfill order is programmatic.
	Report_BACKFILL_ORDER_PROGRAMMATIC Report_Dimension = 321
	// Backfill order sales person.
	Report_BACKFILL_ORDER_SALESPERSON Report_Dimension = 325
	// Backfill order secondary sales people.
	Report_BACKFILL_ORDER_SECONDARY_SALESPEOPLE Report_Dimension = 329
	// Backfill order secondary sales people ID.
	Report_BACKFILL_ORDER_SECONDARY_SALESPEOPLE_ID Report_Dimension = 328
	// Backfill order secondary traffickers.
	Report_BACKFILL_ORDER_SECONDARY_TRAFFICKERS Report_Dimension = 331
	// Backfill order secondary traffickers ID.
	Report_BACKFILL_ORDER_SECONDARY_TRAFFICKERS_ID Report_Dimension = 330
	// Backfill order start date.
	Report_BACKFILL_ORDER_START_DATE Report_Dimension = 332
	// Backfill order start date and time.
	Report_BACKFILL_ORDER_START_DATE_TIME Report_Dimension = 333
	// Backfill order trafficker.
	Report_BACKFILL_ORDER_TRAFFICKER Report_Dimension = 326
	// Backfill order trafficker ID.
	Report_BACKFILL_ORDER_TRAFFICKER_ID Report_Dimension = 327
	// Whether the Backfill order end time and end date is set to effectively
	// never end.
	Report_BACKFILL_ORDER_UNLIMITED_END Report_Dimension = 318
	// The ID of the buyer on a backfill programmatic proposal.
	Report_BACKFILL_PROGRAMMATIC_BUYER_ID Report_Dimension = 336
	// The name of the buyer on a backfill programmatic proposal.
	Report_BACKFILL_PROGRAMMATIC_BUYER_NAME Report_Dimension = 337
	// The amount of information about the Publisher's page sent to the buyer
	// who purchased the impressions.
	Report_BRANDING_TYPE Report_Dimension = 383
	// The localized version of branding type, the amount of information about
	// the Publisher's page sent to the buyer who purchased the impressions.
	Report_BRANDING_TYPE_NAME Report_Dimension = 384
	// Browser category.
	Report_BROWSER_CATEGORY Report_Dimension = 119
	// Browser category name.
	Report_BROWSER_CATEGORY_NAME Report_Dimension = 120
	// The ID of the browser.
	Report_BROWSER_ID Report_Dimension = 235
	// The name of the browser.
	Report_BROWSER_NAME Report_Dimension = 236
	// Mobile carrier ID.
	Report_CARRIER_ID Report_Dimension = 369
	// Name of the mobile carrier.
	Report_CARRIER_NAME Report_Dimension = 368
	// The ID of an advertiser, classified by Google, associated with a creative
	// transacted
	Report_CLASSIFIED_ADVERTISER_ID Report_Dimension = 133
	// The name of an advertiser, classified by Google, associated with a
	// creative transacted
	Report_CLASSIFIED_ADVERTISER_NAME Report_Dimension = 134
	// ID of the brand, as classified by Google,
	Report_CLASSIFIED_BRAND_ID Report_Dimension = 243
	// Name of the brand, as classified by Google,
	Report_CLASSIFIED_BRAND_NAME Report_Dimension = 244
	// ID of the video content served.
	Report_CONTENT_ID Report_Dimension = 246
	// Name of the video content served.
	Report_CONTENT_NAME Report_Dimension = 247
	// The criteria ID of the country in which the ad served.
	Report_COUNTRY_ID Report_Dimension = 11
	// The name of the country in which the ad served.
	Report_COUNTRY_NAME Report_Dimension = 12
	// Enum value of creative billing type
	Report_CREATIVE_BILLING_TYPE Report_Dimension = 366
	// Localized string value of creative billing type
	Report_CREATIVE_BILLING_TYPE_NAME Report_Dimension = 367
	// Represents the click-through URL of a creative
	Report_CREATIVE_CLICK_THROUGH_URL Report_Dimension = 174
	// The ID of a creative
	Report_CREATIVE_ID Report_Dimension = 138
	// Creative name
	Report_CREATIVE_NAME Report_Dimension = 139
	// Creative technology ENUM
	Report_CREATIVE_TECHNOLOGY Report_Dimension = 148
	// Creative technology locallized name
	Report_CREATIVE_TECHNOLOGY_NAME Report_Dimension = 149
	// Third party vendor name of a creative
	Report_CREATIVE_THIRD_PARTY_VENDOR Report_Dimension = 361
	// Enum value of creative type
	Report_CREATIVE_TYPE Report_Dimension = 344
	// Localized string name of creative type
	Report_CREATIVE_TYPE_NAME Report_Dimension = 345
	// Breaks down reporting data by date.
	Report_DATE Report_Dimension = 3
	// Breaks down reporting data by day of the week. Monday is 1 and 7 is
	// Sunday.
	Report_DAY_OF_WEEK Report_Dimension = 4
	// Demand channel.
	Report_DEMAND_CHANNEL Report_Dimension = 9
	// Demand channel name.
	Report_DEMAND_CHANNEL_NAME Report_Dimension = 10
	// Demand subchannel.
	Report_DEMAND_SUBCHANNEL Report_Dimension = 22
	// Demand subchannel name.
	Report_DEMAND_SUBCHANNEL_NAME Report_Dimension = 23
	// The device on which an ad was served.
	Report_DEVICE Report_Dimension = 226
	// The device category to which an ad is being targeted.
	Report_DEVICE_CATEGORY Report_Dimension = 15
	// The name of the category of device (smartphone, feature phone, tablet, or
	// desktop) to which an ad is being targeted.
	Report_DEVICE_CATEGORY_NAME Report_Dimension = 16
	// The localized name of the device on which an ad was served.
	Report_DEVICE_NAME Report_Dimension = 225
	// ID of the yield partner as classified by Google
	Report_EXCHANGE_THIRD_PARTY_COMPANY_ID Report_Dimension = 185
	// Name of the yield partner as classified by Google
	Report_EXCHANGE_THIRD_PARTY_COMPANY_NAME Report_Dimension = 186
	// The ID of the first look pricing rule.
	Report_FIRST_LOOK_PRICING_RULE_ID Report_Dimension = 248
	// The name of the first look pricing rule.
	Report_FIRST_LOOK_PRICING_RULE_NAME Report_Dimension = 249
	// Breaks down reporting data by hour in one day.
	Report_HOUR Report_Dimension = 100
	// The interaction type of an ad.
	Report_INTERACTION_TYPE Report_Dimension = 223
	// The localized name of the interaction type of an ad.
	Report_INTERACTION_TYPE_NAME Report_Dimension = 224
	// Inventory format.
	// The format of the ad unit (e.g, banner) where the ad was requested.
	Report_INVENTORY_FORMAT Report_Dimension = 17
	// Inventory format name.
	// The format of the ad unit (e.g, banner) where the ad was requested.
	Report_INVENTORY_FORMAT_NAME Report_Dimension = 18
	// Inventory type.
	// The kind of web page or device where the ad was requested.
	Report_INVENTORY_TYPE Report_Dimension = 19
	// Inventory type name.
	// The kind of web page or device where the ad was requested.
	Report_INVENTORY_TYPE_NAME Report_Dimension = 20
	// Whether traffic is Adx Direct.
	Report_IS_ADX_DIRECT Report_Dimension = 382
	// Whether traffic is First Look.
	Report_IS_FIRST_LOOK_DEAL Report_Dimension = 401
	// The Custom Targeting Value ID
	Report_KEY_VALUES_ID Report_Dimension = 214
	// The Custom Targeting Value formatted like <key_name>=<value_name>
	Report_KEY_VALUES_NAME Report_Dimension = 215
	// Whether a Line item is archived.
	Report_LINE_ITEM_ARCHIVED Report_Dimension = 188
	// Line item comanion delivery option ENUM value.
	Report_LINE_ITEM_COMPANION_DELIVERY_OPTION Report_Dimension = 204
	// Localized line item comanion delivery option name.
	Report_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME Report_Dimension = 205
	// The computed status of the LineItem.
	Report_LINE_ITEM_COMPUTED_STATUS Report_Dimension = 250
	// The localized name of the computed status of the LineItem.
	Report_LINE_ITEM_COMPUTED_STATUS_NAME Report_Dimension = 251
	// The contracted units bought for the Line item.
	Report_LINE_ITEM_CONTRACTED_QUANTITY Report_Dimension = 92
	// The cost per unit of the Line item.
	Report_LINE_ITEM_COST_PER_UNIT Report_Dimension = 85
	// Line item cost type ENUM value.
	Report_LINE_ITEM_COST_TYPE Report_Dimension = 212
	// Localized line item cost type name.
	Report_LINE_ITEM_COST_TYPE_NAME Report_Dimension = 213
	// Represent the end date of a creative associated with line item
	Report_LINE_ITEM_CREATIVE_END_DATE Report_Dimension = 176
	// The creative rotation type of the LineItem.
	Report_LINE_ITEM_CREATIVE_ROTATION_TYPE Report_Dimension = 189
	// The localized name of the creative rotation type of the LineItem.
	Report_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME Report_Dimension = 190
	// Represent the start date of a creative associated with line item
	Report_LINE_ITEM_CREATIVE_START_DATE Report_Dimension = 175
	// The 3 letter currency code of the Line Item
	Report_LINE_ITEM_CURRENCY_CODE Report_Dimension = 180
	// The progress made for the delivery of the Line item.
	Report_LINE_ITEM_DELIVERY_INDICATOR Report_Dimension = 87
	// The delivery rate type of the LineItem.
	Report_LINE_ITEM_DELIVERY_RATE_TYPE Report_Dimension = 191
	// The localized name of the delivery rate type of the LineItem.
	Report_LINE_ITEM_DELIVERY_RATE_TYPE_NAME Report_Dimension = 192
	// The discount of the LineItem in whole units in the LineItem's currency
	// code, or if unspecified the Network's currency code.
	Report_LINE_ITEM_DISCOUNT_ABSOLUTE Report_Dimension = 195
	// The discount of the LineItem in percentage.
	Report_LINE_ITEM_DISCOUNT_PERCENTAGE Report_Dimension = 196
	// The end date of the Line item.
	Report_LINE_ITEM_END_DATE Report_Dimension = 81
	// The end date and time of the Line item.
	Report_LINE_ITEM_END_DATE_TIME Report_Dimension = 83
	// The ENUM value of the environment a LineItem is targeting.
	Report_LINE_ITEM_ENVIRONMENT_TYPE Report_Dimension = 201
	// The localized name of the environment a LineItem is targeting.
	Report_LINE_ITEM_ENVIRONMENT_TYPE_NAME Report_Dimension = 202
	// The deal ID of the Line item. Set for Programmatic Direct campaigns.
	Report_LINE_ITEM_EXTERNAL_DEAL_ID Report_Dimension = 97
	// The external ID of the Line item.
	Report_LINE_ITEM_EXTERNAL_ID Report_Dimension = 86
	// The frequency cap of the Line item (descriptive string).
	Report_LINE_ITEM_FREQUENCY_CAP Report_Dimension = 256
	// Line item ID.
	Report_LINE_ITEM_ID Report_Dimension = 1
	// The application that last modified the Line Item.
	Report_LINE_ITEM_LAST_MODIFIED_BY_APP Report_Dimension = 181
	// The total number of clicks delivered of the lifetime of the Line item.
	Report_LINE_ITEM_LIFETIME_CLICKS Report_Dimension = 95
	// The total number of impressions delivered over the lifetime of the
	// Line item.
	Report_LINE_ITEM_LIFETIME_IMPRESSIONS Report_Dimension = 94
	// The total number of viewable impressions delivered over the lifetime of
	// the Line item.
	Report_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS Report_Dimension = 96
	// Whether or not the Line item is Makegood. Makegood refers to free
	// inventory offered to buyers to compensate for mistakes or under-delivery
	// in the original campaigns.
	Report_LINE_ITEM_MAKEGOOD Report_Dimension = 89
	// Line item Name.
	Report_LINE_ITEM_NAME Report_Dimension = 2
	// The cost of booking for the Line item (non-CPD).
	Report_LINE_ITEM_NON_CPD_BOOKED_REVENUE Report_Dimension = 98
	// Whether a Line item is eligible for opitimization.
	Report_LINE_ITEM_OPTIMIZABLE Report_Dimension = 90
	// Goal type ENUM value of the primary goal of the line item.
	Report_LINE_ITEM_PRIMARY_GOAL_TYPE Report_Dimension = 210
	// Localized goal type name of the primary goal of the line item.
	Report_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME Report_Dimension = 211
	// The total number of impressions or clicks that are reserved for a
	// line item. For line items of type BULK or PRICE_PRIORITY, this represents
	// the number of remaining impressions reserved. If the line item has an
	// impression cap goal, this represents the number of impressions or
	// conversions that the line item will stop serving at if reached.
	Report_LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE Report_Dimension = 93
	// The percentage of impressions or clicks that are reserved for a
	// line item. For line items of type SPONSORSHIP, this represents the
	// percentage of available impressions reserved. For line items of type
	// NETWORK or HOUSE, this represents the percentage of remaining impressions
	// reserved.
	Report_LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE Report_Dimension = 396
	// Unit type ENUM value of the primary goal of the line item.
	Report_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE Report_Dimension = 208
	// Localized unit type name of the primary goal of the line item.
	Report_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME Report_Dimension = 209
	// The priority of this Line item as a value between 1 and 16.
	// In general, a lower priority means more serving priority for the
	// Line item.
	Report_LINE_ITEM_PRIORITY Report_Dimension = 24
	// ENUM value describing the state of inventory reservation for the
	// LineItem.
	Report_LINE_ITEM_RESERVATION_STATUS Report_Dimension = 304
	// Localized string describing the state of inventory reservation for the
	// LineItem.
	Report_LINE_ITEM_RESERVATION_STATUS_NAME Report_Dimension = 305
	// The start date of the Line item.
	Report_LINE_ITEM_START_DATE Report_Dimension = 82
	// The start date and time of the Line item.
	Report_LINE_ITEM_START_DATE_TIME Report_Dimension = 84
	// Line item type ENUM value.
	Report_LINE_ITEM_TYPE Report_Dimension = 193
	// Localized line item type name.
	Report_LINE_ITEM_TYPE_NAME Report_Dimension = 194
	// Whether the Line item end time and end date is set to effectively never
	// end.
	Report_LINE_ITEM_UNLIMITED_END Report_Dimension = 187
	// The artificial cost per unit used by the Ad server to help rank
	// inventory.
	Report_LINE_ITEM_VALUE_COST_PER_UNIT Report_Dimension = 88
	// The web property code used for dynamic allocation Line Items.
	Report_LINE_ITEM_WEB_PROPERTY_CODE Report_Dimension = 179
	// The ID of creative, includes regular creatives, and master and companions
	// in case of creative sets
	Report_MASTER_COMPANION_CREATIVE_ID Report_Dimension = 140
	// Name of creative, includes regular creatives, and master and companions
	// in case of creative sets
	Report_MASTER_COMPANION_CREATIVE_NAME Report_Dimension = 141
	// Whether the mobile app is free.
	Report_MOBILE_APP_FREE Report_Dimension = 128
	// URL of app icon for the mobile app.
	Report_MOBILE_APP_ICON_URL Report_Dimension = 129
	// The ID of the Mobile App.
	Report_MOBILE_APP_ID Report_Dimension = 123
	// The name of the mobile app.
	Report_MOBILE_APP_NAME Report_Dimension = 127
	// Ownership status of the mobile app.
	Report_MOBILE_APP_OWNERSHIP_STATUS Report_Dimension = 311
	// Ownership status of the mobile app.
	Report_MOBILE_APP_OWNERSHIP_STATUS_NAME Report_Dimension = 312
	// The App Store of the mobile app.
	Report_MOBILE_APP_STORE Report_Dimension = 125
	// The localized name of the mobile app store.
	Report_MOBILE_APP_STORE_NAME Report_Dimension = 245
	// Mobile inventory type.
	// Identifies whether a mobile ad came from a regular web page, an AMP web
	// page, or a mobile app.
	// Values match the Inventory type dimension available in the Overview Home
	// dashboard. Note: Video takes precedence over any other value, for
	// example, if there is an in-stream video impression on a desktop device,
	// it will be attributed to in-stream video and not desktop web.
	Report_MOBILE_INVENTORY_TYPE Report_Dimension = 99
	// Mobile inventory type name.
	// Identifies whether a mobile ad came from a regular web page, an AMP web
	// page, or a mobile app.
	Report_MOBILE_INVENTORY_TYPE_NAME Report_Dimension = 21
	// SDK version of the mobile device.
	Report_MOBILE_SDK_VERSION_NAME Report_Dimension = 130
	// Breaks down reporting data by month and year.
	Report_MONTH_YEAR Report_Dimension = 6
	// Native ad format ID.
	Report_NATIVE_AD_FORMAT_ID Report_Dimension = 255
	// Native ad format name.
	Report_NATIVE_AD_FORMAT_NAME Report_Dimension = 254
	// Native style ID.
	Report_NATIVE_STYLE_ID Report_Dimension = 253
	// Native style name.
	Report_NATIVE_STYLE_NAME Report_Dimension = 252
	// Operating system category.
	Report_OPERATING_SYSTEM_CATEGORY Report_Dimension = 117
	// Operating system category name.
	Report_OPERATING_SYSTEM_CATEGORY_NAME Report_Dimension = 118
	// ID of the operating system version.
	Report_OPERATING_SYSTEM_VERSION_ID Report_Dimension = 238
	// Details of the operating system, including version.
	Report_OPERATING_SYSTEM_VERSION_NAME Report_Dimension = 237
	// Order agency.
	Report_ORDER_AGENCY Report_Dimension = 150
	// Order agency ID.
	Report_ORDER_AGENCY_ID Report_Dimension = 151
	// Order booked CPC.
	Report_ORDER_BOOKED_CPC Report_Dimension = 152
	// Order booked CPM.
	Report_ORDER_BOOKED_CPM Report_Dimension = 153
	// Order delivery status ENUM value.
	Report_ORDER_DELIVERY_STATUS Report_Dimension = 231
	// Order delivery status localized name.
	Report_ORDER_DELIVERY_STATUS_NAME Report_Dimension = 239
	// Order end date.
	Report_ORDER_END_DATE Report_Dimension = 154
	// Order end date and time.
	Report_ORDER_END_DATE_TIME Report_Dimension = 155
	// Order external ID.
	Report_ORDER_EXTERNAL_ID Report_Dimension = 156
	// Order id.
	Report_ORDER_ID Report_Dimension = 7
	// Order labels.
	Report_ORDER_LABELS Report_Dimension = 170
	// Order labels IDs.
	Report_ORDER_LABEL_IDS Report_Dimension = 171
	// Order lifetime clicks.
	Report_ORDER_LIFETIME_CLICKS Report_Dimension = 158
	// Order lifetime impressions.
	Report_ORDER_LIFETIME_IMPRESSIONS Report_Dimension = 159
	// Order name.
	Report_ORDER_NAME Report_Dimension = 8
	// Order PO number.
	Report_ORDER_PO_NUMBER Report_Dimension = 160
	// Whether the Order is programmatic.
	Report_ORDER_PROGRAMMATIC Report_Dimension = 157
	// Order sales person.
	Report_ORDER_SALESPERSON Report_Dimension = 161
	// Order secondary sales people.
	Report_ORDER_SECONDARY_SALESPEOPLE Report_Dimension = 164
	// Order secondary sales people ID.
	Report_ORDER_SECONDARY_SALESPEOPLE_ID Report_Dimension = 165
	// Order secondary traffickers.
	Report_ORDER_SECONDARY_TRAFFICKERS Report_Dimension = 166
	// Order secondary traffickers ID.
	Report_ORDER_SECONDARY_TRAFFICKERS_ID Report_Dimension = 167
	// Order start date.
	Report_ORDER_START_DATE Report_Dimension = 168
	// Order start date and time.
	Report_ORDER_START_DATE_TIME Report_Dimension = 169
	// Order trafficker.
	Report_ORDER_TRAFFICKER Report_Dimension = 162
	// Order trafficker ID.
	Report_ORDER_TRAFFICKER_ID Report_Dimension = 163
	// Whether the Order end time and end date is set to effectively never
	// end.
	Report_ORDER_UNLIMITED_END Report_Dimension = 203
	// Placement ID
	Report_PLACEMENT_ID Report_Dimension = 113
	// The full list of placement IDs associated with the ad unit.
	Report_PLACEMENT_ID_ALL Report_Dimension = 144
	// Placement name
	Report_PLACEMENT_NAME Report_Dimension = 114
	// The full list of placement names associated with the ad unit.
	Report_PLACEMENT_NAME_ALL Report_Dimension = 145
	// Placement status ENUM value
	Report_PLACEMENT_STATUS Report_Dimension = 362
	// The full list of placement status ENUM values associated with the ad
	// unit.
	Report_PLACEMENT_STATUS_ALL Report_Dimension = 363
	// Localized placement status name.
	Report_PLACEMENT_STATUS_NAME Report_Dimension = 364
	// The full list of localized placement status names associated with the ad
	// unit.
	Report_PLACEMENT_STATUS_NAME_ALL Report_Dimension = 365
	// The ID of the buyer on a programmatic proposal.
	Report_PROGRAMMATIC_BUYER_ID Report_Dimension = 240
	// The name of the buyer on a programmatic proposal.
	Report_PROGRAMMATIC_BUYER_NAME Report_Dimension = 241
	// Programmatic channel.
	// The type of transaction that occurred in Ad Exchange.
	Report_PROGRAMMATIC_CHANNEL Report_Dimension = 13
	// Programmatic channel name.
	// The type of transaction that occurred in Ad Exchange.
	Report_PROGRAMMATIC_CHANNEL_NAME Report_Dimension = 14
	// The size of a rendered creative, It can differ with the creative's size
	// if a creative is shown in an ad slot of a different size.
	Report_RENDERED_CREATIVE_SIZE Report_Dimension = 343
	// Inventory Requested Ad Sizes dimension
	Report_REQUESTED_AD_SIZES Report_Dimension = 352
	// Request type ENUM
	Report_REQUEST_TYPE Report_Dimension = 146
	// Request type locallized name
	Report_REQUEST_TYPE_NAME Report_Dimension = 147
	// Information about domain or subdomains.
	Report_SITE Report_Dimension = 387
	// The ID of the browser, device or other environment into which a line item
	// or creative was served.
	Report_TARGETING_ID Report_Dimension = 232
	// Information about the browser, device and other environments into which
	// a line item or creative was served.
	Report_TARGETING_NAME Report_Dimension = 233
	// The way in which advertisers targeted their ads.
	Report_TARGETING_TYPE Report_Dimension = 385
	// The localized name of the way in which advertisers targeted their ads.
	Report_TARGETING_TYPE_NAME Report_Dimension = 386
	// Inventory Traffic source dimension
	Report_TRAFFIC_SOURCE Report_Dimension = 388
	// Inventory Traffic source dimension name
	Report_TRAFFIC_SOURCE_NAME Report_Dimension = 389
	// Unified pricing rule ID dimension
	Report_UNIFIED_PRICING_RULE_ID Report_Dimension = 393
	// Unified pricing rule name dimension
	Report_UNIFIED_PRICING_RULE_NAME Report_Dimension = 394
	// The video placement enum as defined by ADCOM 1.0-202303.
	Report_VIDEO_PLCMT Report_Dimension = 172
	// The localized name of the video placement as defined by ADCOM 1.0-202303.
	Report_VIDEO_PLCMT_NAME Report_Dimension = 173
	// Breaks down reporting data by week of the year.
	Report_WEEK Report_Dimension = 5
	// Name of the company within a yield group
	Report_YIELD_GROUP_BUYER_NAME Report_Dimension = 184
	// ID of the group of ad networks or exchanges used for Mediation and Open
	// Bidding
	Report_YIELD_GROUP_ID Report_Dimension = 182
	// Name of the group of ad networks or exchanges used for Mediation and Open
	// Bidding
	Report_YIELD_GROUP_NAME Report_Dimension = 183
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 10000
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 10001
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 10002
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 10003
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 10004
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 10005
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 10006
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 10007
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 10008
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 10009
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 10010
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 10011
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 10012
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 10013
	// Custom field option ID for Line Item with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 10014
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_0_VALUE Report_Dimension = 11000
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_1_VALUE Report_Dimension = 11001
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_2_VALUE Report_Dimension = 11002
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_3_VALUE Report_Dimension = 11003
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_4_VALUE Report_Dimension = 11004
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_5_VALUE Report_Dimension = 11005
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_6_VALUE Report_Dimension = 11006
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_7_VALUE Report_Dimension = 11007
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_8_VALUE Report_Dimension = 11008
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_9_VALUE Report_Dimension = 11009
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_10_VALUE Report_Dimension = 11010
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_11_VALUE Report_Dimension = 11011
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_12_VALUE Report_Dimension = 11012
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_13_VALUE Report_Dimension = 11013
	// Custom field value for Line Item with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.line_item_custom_field_ids`.
	Report_LINE_ITEM_CUSTOM_FIELD_14_VALUE Report_Dimension = 11014
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 12000
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 12001
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 12002
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 12003
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 12004
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 12005
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 12006
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 12007
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 12008
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 12009
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 12010
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 12011
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 12012
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 12013
	// Custom field option ID for Order with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 12014
	// Custom field value for Order with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_0_VALUE Report_Dimension = 13000
	// Custom field value for Order with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_1_VALUE Report_Dimension = 13001
	// Custom field value for Order with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_2_VALUE Report_Dimension = 13002
	// Custom field value for Order with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_3_VALUE Report_Dimension = 13003
	// Custom field value for Order with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_4_VALUE Report_Dimension = 13004
	// Custom field value for Order with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_5_VALUE Report_Dimension = 13005
	// Custom field value for Order with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_6_VALUE Report_Dimension = 13006
	// Custom field value for Order with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_7_VALUE Report_Dimension = 13007
	// Custom field value for Order with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_8_VALUE Report_Dimension = 13008
	// Custom field value for Order with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_9_VALUE Report_Dimension = 13009
	// Custom field value for Order with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_10_VALUE Report_Dimension = 13010
	// Custom field value for Order with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_11_VALUE Report_Dimension = 13011
	// Custom field value for Order with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_12_VALUE Report_Dimension = 13012
	// Custom field value for Order with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_13_VALUE Report_Dimension = 13013
	// Custom field value for Order with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.order_custom_field_ids`.
	Report_ORDER_CUSTOM_FIELD_14_VALUE Report_Dimension = 13014
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 14000
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 14001
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 14002
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 14003
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 14004
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 14005
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 14006
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 14007
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 14008
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 14009
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 14010
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 14011
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 14012
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 14013
	// Custom field option ID for Creative with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 14014
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 0 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_0_VALUE Report_Dimension = 15000
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 1 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_1_VALUE Report_Dimension = 15001
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 2 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_2_VALUE Report_Dimension = 15002
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 3 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_3_VALUE Report_Dimension = 15003
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 4 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_4_VALUE Report_Dimension = 15004
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 5 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_5_VALUE Report_Dimension = 15005
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 6 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_6_VALUE Report_Dimension = 15006
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 7 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_7_VALUE Report_Dimension = 15007
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 8 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_8_VALUE Report_Dimension = 15008
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 9 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_9_VALUE Report_Dimension = 15009
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 10 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_10_VALUE Report_Dimension = 15010
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 11 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_11_VALUE Report_Dimension = 15011
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 12 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_12_VALUE Report_Dimension = 15012
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 13 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_13_VALUE Report_Dimension = 15013
	// Custom field value for Creative with custom field ID equal to the ID
	// in index 14 of `ReportDefinition.creative_custom_field_ids`.
	Report_CREATIVE_CUSTOM_FIELD_14_VALUE Report_Dimension = 15014
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 16000
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 16001
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 16002
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 16003
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 16004
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 16005
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 16006
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 16007
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 16008
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 16009
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 16010
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 16011
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 16012
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 16013
	// Custom field option ID for Backfill line item with custom field ID equal
	// to the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 16014
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE Report_Dimension = 17000
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE Report_Dimension = 17001
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE Report_Dimension = 17002
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE Report_Dimension = 17003
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE Report_Dimension = 17004
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE Report_Dimension = 17005
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE Report_Dimension = 17006
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE Report_Dimension = 17007
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE Report_Dimension = 17008
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE Report_Dimension = 17009
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE Report_Dimension = 17010
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE Report_Dimension = 17011
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE Report_Dimension = 17012
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE Report_Dimension = 17013
	// Custom field value for Backfill line item with custom field ID equal to
	// the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
	Report_BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE Report_Dimension = 17014
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 0 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 18000
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 1 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 18001
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 2 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 18002
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 3 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 18003
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 4 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 18004
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 5 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 18005
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 6 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 18006
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 7 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 18007
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 8 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 18008
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 9 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 18009
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 10 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 18010
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 11 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 18011
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 12 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 18012
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 13 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 18013
	// Custom field option ID for Backfill order with custom field ID equal to
	// the ID in index 14 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 18014
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 0 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE Report_Dimension = 19000
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 1 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE Report_Dimension = 19001
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 2 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE Report_Dimension = 19002
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 3 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE Report_Dimension = 19003
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 4 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE Report_Dimension = 19004
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 5 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE Report_Dimension = 19005
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 6 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE Report_Dimension = 19006
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 7 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE Report_Dimension = 19007
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 8 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE Report_Dimension = 19008
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 9 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE Report_Dimension = 19009
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 10 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE Report_Dimension = 19010
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 11 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE Report_Dimension = 19011
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 12 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE Report_Dimension = 19012
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 13 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE Report_Dimension = 19013
	// Custom field value for Backfill order with custom field ID equal to the
	// ID in index 14 of `ReportDefinition.order_custom_field_ids`.
	Report_BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE Report_Dimension = 19014
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID Report_Dimension = 20000
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID Report_Dimension = 20001
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID Report_Dimension = 20002
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID Report_Dimension = 20003
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID Report_Dimension = 20004
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID Report_Dimension = 20005
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID Report_Dimension = 20006
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID Report_Dimension = 20007
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID Report_Dimension = 20008
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID Report_Dimension = 20009
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID Report_Dimension = 20010
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID Report_Dimension = 20011
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID Report_Dimension = 20012
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID Report_Dimension = 20013
	// Custom field option ID for Backfill creative with custom field ID equal
	// to the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID Report_Dimension = 20014
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE Report_Dimension = 21000
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE Report_Dimension = 21001
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE Report_Dimension = 21002
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE Report_Dimension = 21003
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE Report_Dimension = 21004
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE Report_Dimension = 21005
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE Report_Dimension = 21006
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE Report_Dimension = 21007
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE Report_Dimension = 21008
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE Report_Dimension = 21009
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE Report_Dimension = 21010
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE Report_Dimension = 21011
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE Report_Dimension = 21012
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE Report_Dimension = 21013
	// Custom field value for Backfill creative with custom field ID equal to
	// the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
	Report_BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE Report_Dimension = 21014
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 0 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_0_VALUE_ID Report_Dimension = 100000
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 1 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_1_VALUE_ID Report_Dimension = 100001
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 2 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_2_VALUE_ID Report_Dimension = 100002
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 3 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_3_VALUE_ID Report_Dimension = 100003
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 4 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_4_VALUE_ID Report_Dimension = 100004
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 5 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_5_VALUE_ID Report_Dimension = 100005
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 6 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_6_VALUE_ID Report_Dimension = 100006
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_7_VALUE_ID Report_Dimension = 100007
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 8 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_8_VALUE_ID Report_Dimension = 100008
	// Custom Dimension Value ID for Custom Dimension with key equal to the key
	// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_9_VALUE_ID Report_Dimension = 100009
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 0 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_0_VALUE Report_Dimension = 101000
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 1 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_1_VALUE Report_Dimension = 101001
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 2 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_2_VALUE Report_Dimension = 101002
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 3 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_3_VALUE Report_Dimension = 101003
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 4 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_4_VALUE Report_Dimension = 101004
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 5 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_5_VALUE Report_Dimension = 101005
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 6 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_6_VALUE Report_Dimension = 101006
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 7 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_7_VALUE Report_Dimension = 101007
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 8 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_8_VALUE Report_Dimension = 101008
	// Custom Dimension Value name for Custom Dimension with key equal to the
	// id in index 9 of `ReportDefinition.custom_dimension_key_ids`.
	Report_CUSTOM_DIMENSION_9_VALUE Report_Dimension = 101009
)

// Enum value maps for Report_Dimension.
var (
	Report_Dimension_name = map[int32]string{
		0:      "DIMENSION_UNSPECIFIED",
		242:    "ADVERTISER_DOMAIN_NAME",
		228:    "ADVERTISER_EXTERNAL_ID",
		131:    "ADVERTISER_ID",
		230:    "ADVERTISER_LABELS",
		229:    "ADVERTISER_LABEL_IDS",
		132:    "ADVERTISER_NAME",
		227:    "ADVERTISER_PRIMARY_CONTACT",
		390:    "AD_LOCATION",
		391:    "AD_LOCATION_NAME",
		64:     "AD_UNIT_CODE",
		65:     "AD_UNIT_CODE_LEVEL_1",
		74:     "AD_UNIT_CODE_LEVEL_10",
		75:     "AD_UNIT_CODE_LEVEL_11",
		76:     "AD_UNIT_CODE_LEVEL_12",
		77:     "AD_UNIT_CODE_LEVEL_13",
		78:     "AD_UNIT_CODE_LEVEL_14",
		79:     "AD_UNIT_CODE_LEVEL_15",
		80:     "AD_UNIT_CODE_LEVEL_16",
		66:     "AD_UNIT_CODE_LEVEL_2",
		67:     "AD_UNIT_CODE_LEVEL_3",
		68:     "AD_UNIT_CODE_LEVEL_4",
		69:     "AD_UNIT_CODE_LEVEL_5",
		70:     "AD_UNIT_CODE_LEVEL_6",
		71:     "AD_UNIT_CODE_LEVEL_7",
		72:     "AD_UNIT_CODE_LEVEL_8",
		73:     "AD_UNIT_CODE_LEVEL_9",
		101:    "AD_UNIT_DEPTH",
		25:     "AD_UNIT_ID",
		27:     "AD_UNIT_ID_ALL_LEVEL",
		30:     "AD_UNIT_ID_LEVEL_1",
		48:     "AD_UNIT_ID_LEVEL_10",
		50:     "AD_UNIT_ID_LEVEL_11",
		52:     "AD_UNIT_ID_LEVEL_12",
		54:     "AD_UNIT_ID_LEVEL_13",
		56:     "AD_UNIT_ID_LEVEL_14",
		58:     "AD_UNIT_ID_LEVEL_15",
		60:     "AD_UNIT_ID_LEVEL_16",
		32:     "AD_UNIT_ID_LEVEL_2",
		34:     "AD_UNIT_ID_LEVEL_3",
		36:     "AD_UNIT_ID_LEVEL_4",
		38:     "AD_UNIT_ID_LEVEL_5",
		40:     "AD_UNIT_ID_LEVEL_6",
		42:     "AD_UNIT_ID_LEVEL_7",
		44:     "AD_UNIT_ID_LEVEL_8",
		46:     "AD_UNIT_ID_LEVEL_9",
		142:    "AD_UNIT_ID_TOP_LEVEL",
		26:     "AD_UNIT_NAME",
		29:     "AD_UNIT_NAME_ALL_LEVEL",
		31:     "AD_UNIT_NAME_LEVEL_1",
		49:     "AD_UNIT_NAME_LEVEL_10",
		51:     "AD_UNIT_NAME_LEVEL_11",
		53:     "AD_UNIT_NAME_LEVEL_12",
		55:     "AD_UNIT_NAME_LEVEL_13",
		57:     "AD_UNIT_NAME_LEVEL_14",
		59:     "AD_UNIT_NAME_LEVEL_15",
		61:     "AD_UNIT_NAME_LEVEL_16",
		33:     "AD_UNIT_NAME_LEVEL_2",
		35:     "AD_UNIT_NAME_LEVEL_3",
		37:     "AD_UNIT_NAME_LEVEL_4",
		39:     "AD_UNIT_NAME_LEVEL_5",
		41:     "AD_UNIT_NAME_LEVEL_6",
		43:     "AD_UNIT_NAME_LEVEL_7",
		45:     "AD_UNIT_NAME_LEVEL_8",
		47:     "AD_UNIT_NAME_LEVEL_9",
		143:    "AD_UNIT_NAME_TOP_LEVEL",
		63:     "AD_UNIT_REWARD_AMOUNT",
		62:     "AD_UNIT_REWARD_TYPE",
		206:    "AD_UNIT_STATUS",
		207:    "AD_UNIT_STATUS_NAME",
		392:    "APP_VERSION",
		349:    "BACKFILL_ADVERTISER_EXTERNAL_ID",
		346:    "BACKFILL_ADVERTISER_ID",
		351:    "BACKFILL_ADVERTISER_LABELS",
		350:    "BACKFILL_ADVERTISER_LABEL_IDS",
		347:    "BACKFILL_ADVERTISER_NAME",
		348:    "BACKFILL_ADVERTISER_PRIMARY_CONTACT",
		378:    "BACKFILL_CREATIVE_BILLING_TYPE",
		379:    "BACKFILL_CREATIVE_BILLING_TYPE_NAME",
		376:    "BACKFILL_CREATIVE_CLICK_THROUGH_URL",
		370:    "BACKFILL_CREATIVE_ID",
		371:    "BACKFILL_CREATIVE_NAME",
		377:    "BACKFILL_CREATIVE_THIRD_PARTY_VENDOR",
		374:    "BACKFILL_CREATIVE_TYPE",
		375:    "BACKFILL_CREATIVE_TYPE_NAME",
		278:    "BACKFILL_LINE_ITEM_ARCHIVED",
		258:    "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION",
		259:    "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME",
		296:    "BACKFILL_LINE_ITEM_COMPUTED_STATUS",
		297:    "BACKFILL_LINE_ITEM_COMPUTED_STATUS_NAME",
		280:    "BACKFILL_LINE_ITEM_CONTRACTED_QUANTITY",
		272:    "BACKFILL_LINE_ITEM_COST_PER_UNIT",
		264:    "BACKFILL_LINE_ITEM_COST_TYPE",
		265:    "BACKFILL_LINE_ITEM_COST_TYPE_NAME",
		381:    "BACKFILL_LINE_ITEM_CREATIVE_END_DATE",
		290:    "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE",
		291:    "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME",
		380:    "BACKFILL_LINE_ITEM_CREATIVE_START_DATE",
		288:    "BACKFILL_LINE_ITEM_CURRENCY_CODE",
		274:    "BACKFILL_LINE_ITEM_DELIVERY_INDICATOR",
		292:    "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE",
		293:    "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE_NAME",
		294:    "BACKFILL_LINE_ITEM_DISCOUNT_ABSOLUTE",
		295:    "BACKFILL_LINE_ITEM_DISCOUNT_PERCENTAGE",
		267:    "BACKFILL_LINE_ITEM_END_DATE",
		269:    "BACKFILL_LINE_ITEM_END_DATE_TIME",
		302:    "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE",
		257:    "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE_NAME",
		285:    "BACKFILL_LINE_ITEM_EXTERNAL_DEAL_ID",
		273:    "BACKFILL_LINE_ITEM_EXTERNAL_ID",
		303:    "BACKFILL_LINE_ITEM_FREQUENCY_CAP",
		298:    "BACKFILL_LINE_ITEM_ID",
		289:    "BACKFILL_LINE_ITEM_LAST_MODIFIED_BY_APP",
		283:    "BACKFILL_LINE_ITEM_LIFETIME_CLICKS",
		282:    "BACKFILL_LINE_ITEM_LIFETIME_IMPRESSIONS",
		284:    "BACKFILL_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS",
		276:    "BACKFILL_LINE_ITEM_MAKEGOOD",
		299:    "BACKFILL_LINE_ITEM_NAME",
		286:    "BACKFILL_LINE_ITEM_NON_CPD_BOOKED_REVENUE",
		277:    "BACKFILL_LINE_ITEM_OPTIMIZABLE",
		262:    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE",
		263:    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME",
		260:    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE",
		261:    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME",
		266:    "BACKFILL_LINE_ITEM_PRIORITY",
		306:    "BACKFILL_LINE_ITEM_RESERVATION_STATUS",
		307:    "BACKFILL_LINE_ITEM_RESERVATION_STATUS_NAME",
		268:    "BACKFILL_LINE_ITEM_START_DATE",
		270:    "BACKFILL_LINE_ITEM_START_DATE_TIME",
		300:    "BACKFILL_LINE_ITEM_TYPE",
		301:    "BACKFILL_LINE_ITEM_TYPE_NAME",
		271:    "BACKFILL_LINE_ITEM_UNLIMITED_END",
		275:    "BACKFILL_LINE_ITEM_VALUE_COST_PER_UNIT",
		287:    "BACKFILL_LINE_ITEM_WEB_PROPERTY_CODE",
		372:    "BACKFILL_MASTER_COMPANION_CREATIVE_ID",
		373:    "BACKFILL_MASTER_COMPANION_CREATIVE_NAME",
		313:    "BACKFILL_ORDER_AGENCY",
		314:    "BACKFILL_ORDER_AGENCY_ID",
		315:    "BACKFILL_ORDER_BOOKED_CPC",
		316:    "BACKFILL_ORDER_BOOKED_CPM",
		340:    "BACKFILL_ORDER_DELIVERY_STATUS",
		341:    "BACKFILL_ORDER_DELIVERY_STATUS_NAME",
		317:    "BACKFILL_ORDER_END_DATE",
		319:    "BACKFILL_ORDER_END_DATE_TIME",
		320:    "BACKFILL_ORDER_EXTERNAL_ID",
		338:    "BACKFILL_ORDER_ID",
		334:    "BACKFILL_ORDER_LABELS",
		335:    "BACKFILL_ORDER_LABEL_IDS",
		322:    "BACKFILL_ORDER_LIFETIME_CLICKS",
		323:    "BACKFILL_ORDER_LIFETIME_IMPRESSIONS",
		339:    "BACKFILL_ORDER_NAME",
		324:    "BACKFILL_ORDER_PO_NUMBER",
		321:    "BACKFILL_ORDER_PROGRAMMATIC",
		325:    "BACKFILL_ORDER_SALESPERSON",
		329:    "BACKFILL_ORDER_SECONDARY_SALESPEOPLE",
		328:    "BACKFILL_ORDER_SECONDARY_SALESPEOPLE_ID",
		331:    "BACKFILL_ORDER_SECONDARY_TRAFFICKERS",
		330:    "BACKFILL_ORDER_SECONDARY_TRAFFICKERS_ID",
		332:    "BACKFILL_ORDER_START_DATE",
		333:    "BACKFILL_ORDER_START_DATE_TIME",
		326:    "BACKFILL_ORDER_TRAFFICKER",
		327:    "BACKFILL_ORDER_TRAFFICKER_ID",
		318:    "BACKFILL_ORDER_UNLIMITED_END",
		336:    "BACKFILL_PROGRAMMATIC_BUYER_ID",
		337:    "BACKFILL_PROGRAMMATIC_BUYER_NAME",
		383:    "BRANDING_TYPE",
		384:    "BRANDING_TYPE_NAME",
		119:    "BROWSER_CATEGORY",
		120:    "BROWSER_CATEGORY_NAME",
		235:    "BROWSER_ID",
		236:    "BROWSER_NAME",
		369:    "CARRIER_ID",
		368:    "CARRIER_NAME",
		133:    "CLASSIFIED_ADVERTISER_ID",
		134:    "CLASSIFIED_ADVERTISER_NAME",
		243:    "CLASSIFIED_BRAND_ID",
		244:    "CLASSIFIED_BRAND_NAME",
		246:    "CONTENT_ID",
		247:    "CONTENT_NAME",
		11:     "COUNTRY_ID",
		12:     "COUNTRY_NAME",
		366:    "CREATIVE_BILLING_TYPE",
		367:    "CREATIVE_BILLING_TYPE_NAME",
		174:    "CREATIVE_CLICK_THROUGH_URL",
		138:    "CREATIVE_ID",
		139:    "CREATIVE_NAME",
		148:    "CREATIVE_TECHNOLOGY",
		149:    "CREATIVE_TECHNOLOGY_NAME",
		361:    "CREATIVE_THIRD_PARTY_VENDOR",
		344:    "CREATIVE_TYPE",
		345:    "CREATIVE_TYPE_NAME",
		3:      "DATE",
		4:      "DAY_OF_WEEK",
		9:      "DEMAND_CHANNEL",
		10:     "DEMAND_CHANNEL_NAME",
		22:     "DEMAND_SUBCHANNEL",
		23:     "DEMAND_SUBCHANNEL_NAME",
		226:    "DEVICE",
		15:     "DEVICE_CATEGORY",
		16:     "DEVICE_CATEGORY_NAME",
		225:    "DEVICE_NAME",
		185:    "EXCHANGE_THIRD_PARTY_COMPANY_ID",
		186:    "EXCHANGE_THIRD_PARTY_COMPANY_NAME",
		248:    "FIRST_LOOK_PRICING_RULE_ID",
		249:    "FIRST_LOOK_PRICING_RULE_NAME",
		100:    "HOUR",
		223:    "INTERACTION_TYPE",
		224:    "INTERACTION_TYPE_NAME",
		17:     "INVENTORY_FORMAT",
		18:     "INVENTORY_FORMAT_NAME",
		19:     "INVENTORY_TYPE",
		20:     "INVENTORY_TYPE_NAME",
		382:    "IS_ADX_DIRECT",
		401:    "IS_FIRST_LOOK_DEAL",
		214:    "KEY_VALUES_ID",
		215:    "KEY_VALUES_NAME",
		188:    "LINE_ITEM_ARCHIVED",
		204:    "LINE_ITEM_COMPANION_DELIVERY_OPTION",
		205:    "LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME",
		250:    "LINE_ITEM_COMPUTED_STATUS",
		251:    "LINE_ITEM_COMPUTED_STATUS_NAME",
		92:     "LINE_ITEM_CONTRACTED_QUANTITY",
		85:     "LINE_ITEM_COST_PER_UNIT",
		212:    "LINE_ITEM_COST_TYPE",
		213:    "LINE_ITEM_COST_TYPE_NAME",
		176:    "LINE_ITEM_CREATIVE_END_DATE",
		189:    "LINE_ITEM_CREATIVE_ROTATION_TYPE",
		190:    "LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME",
		175:    "LINE_ITEM_CREATIVE_START_DATE",
		180:    "LINE_ITEM_CURRENCY_CODE",
		87:     "LINE_ITEM_DELIVERY_INDICATOR",
		191:    "LINE_ITEM_DELIVERY_RATE_TYPE",
		192:    "LINE_ITEM_DELIVERY_RATE_TYPE_NAME",
		195:    "LINE_ITEM_DISCOUNT_ABSOLUTE",
		196:    "LINE_ITEM_DISCOUNT_PERCENTAGE",
		81:     "LINE_ITEM_END_DATE",
		83:     "LINE_ITEM_END_DATE_TIME",
		201:    "LINE_ITEM_ENVIRONMENT_TYPE",
		202:    "LINE_ITEM_ENVIRONMENT_TYPE_NAME",
		97:     "LINE_ITEM_EXTERNAL_DEAL_ID",
		86:     "LINE_ITEM_EXTERNAL_ID",
		256:    "LINE_ITEM_FREQUENCY_CAP",
		1:      "LINE_ITEM_ID",
		181:    "LINE_ITEM_LAST_MODIFIED_BY_APP",
		95:     "LINE_ITEM_LIFETIME_CLICKS",
		94:     "LINE_ITEM_LIFETIME_IMPRESSIONS",
		96:     "LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS",
		89:     "LINE_ITEM_MAKEGOOD",
		2:      "LINE_ITEM_NAME",
		98:     "LINE_ITEM_NON_CPD_BOOKED_REVENUE",
		90:     "LINE_ITEM_OPTIMIZABLE",
		210:    "LINE_ITEM_PRIMARY_GOAL_TYPE",
		211:    "LINE_ITEM_PRIMARY_GOAL_TYPE_NAME",
		93:     "LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE",
		396:    "LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE",
		208:    "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE",
		209:    "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME",
		24:     "LINE_ITEM_PRIORITY",
		304:    "LINE_ITEM_RESERVATION_STATUS",
		305:    "LINE_ITEM_RESERVATION_STATUS_NAME",
		82:     "LINE_ITEM_START_DATE",
		84:     "LINE_ITEM_START_DATE_TIME",
		193:    "LINE_ITEM_TYPE",
		194:    "LINE_ITEM_TYPE_NAME",
		187:    "LINE_ITEM_UNLIMITED_END",
		88:     "LINE_ITEM_VALUE_COST_PER_UNIT",
		179:    "LINE_ITEM_WEB_PROPERTY_CODE",
		140:    "MASTER_COMPANION_CREATIVE_ID",
		141:    "MASTER_COMPANION_CREATIVE_NAME",
		128:    "MOBILE_APP_FREE",
		129:    "MOBILE_APP_ICON_URL",
		123:    "MOBILE_APP_ID",
		127:    "MOBILE_APP_NAME",
		311:    "MOBILE_APP_OWNERSHIP_STATUS",
		312:    "MOBILE_APP_OWNERSHIP_STATUS_NAME",
		125:    "MOBILE_APP_STORE",
		245:    "MOBILE_APP_STORE_NAME",
		99:     "MOBILE_INVENTORY_TYPE",
		21:     "MOBILE_INVENTORY_TYPE_NAME",
		130:    "MOBILE_SDK_VERSION_NAME",
		6:      "MONTH_YEAR",
		255:    "NATIVE_AD_FORMAT_ID",
		254:    "NATIVE_AD_FORMAT_NAME",
		253:    "NATIVE_STYLE_ID",
		252:    "NATIVE_STYLE_NAME",
		117:    "OPERATING_SYSTEM_CATEGORY",
		118:    "OPERATING_SYSTEM_CATEGORY_NAME",
		238:    "OPERATING_SYSTEM_VERSION_ID",
		237:    "OPERATING_SYSTEM_VERSION_NAME",
		150:    "ORDER_AGENCY",
		151:    "ORDER_AGENCY_ID",
		152:    "ORDER_BOOKED_CPC",
		153:    "ORDER_BOOKED_CPM",
		231:    "ORDER_DELIVERY_STATUS",
		239:    "ORDER_DELIVERY_STATUS_NAME",
		154:    "ORDER_END_DATE",
		155:    "ORDER_END_DATE_TIME",
		156:    "ORDER_EXTERNAL_ID",
		7:      "ORDER_ID",
		170:    "ORDER_LABELS",
		171:    "ORDER_LABEL_IDS",
		158:    "ORDER_LIFETIME_CLICKS",
		159:    "ORDER_LIFETIME_IMPRESSIONS",
		8:      "ORDER_NAME",
		160:    "ORDER_PO_NUMBER",
		157:    "ORDER_PROGRAMMATIC",
		161:    "ORDER_SALESPERSON",
		164:    "ORDER_SECONDARY_SALESPEOPLE",
		165:    "ORDER_SECONDARY_SALESPEOPLE_ID",
		166:    "ORDER_SECONDARY_TRAFFICKERS",
		167:    "ORDER_SECONDARY_TRAFFICKERS_ID",
		168:    "ORDER_START_DATE",
		169:    "ORDER_START_DATE_TIME",
		162:    "ORDER_TRAFFICKER",
		163:    "ORDER_TRAFFICKER_ID",
		203:    "ORDER_UNLIMITED_END",
		113:    "PLACEMENT_ID",
		144:    "PLACEMENT_ID_ALL",
		114:    "PLACEMENT_NAME",
		145:    "PLACEMENT_NAME_ALL",
		362:    "PLACEMENT_STATUS",
		363:    "PLACEMENT_STATUS_ALL",
		364:    "PLACEMENT_STATUS_NAME",
		365:    "PLACEMENT_STATUS_NAME_ALL",
		240:    "PROGRAMMATIC_BUYER_ID",
		241:    "PROGRAMMATIC_BUYER_NAME",
		13:     "PROGRAMMATIC_CHANNEL",
		14:     "PROGRAMMATIC_CHANNEL_NAME",
		343:    "RENDERED_CREATIVE_SIZE",
		352:    "REQUESTED_AD_SIZES",
		146:    "REQUEST_TYPE",
		147:    "REQUEST_TYPE_NAME",
		387:    "SITE",
		232:    "TARGETING_ID",
		233:    "TARGETING_NAME",
		385:    "TARGETING_TYPE",
		386:    "TARGETING_TYPE_NAME",
		388:    "TRAFFIC_SOURCE",
		389:    "TRAFFIC_SOURCE_NAME",
		393:    "UNIFIED_PRICING_RULE_ID",
		394:    "UNIFIED_PRICING_RULE_NAME",
		172:    "VIDEO_PLCMT",
		173:    "VIDEO_PLCMT_NAME",
		5:      "WEEK",
		184:    "YIELD_GROUP_BUYER_NAME",
		182:    "YIELD_GROUP_ID",
		183:    "YIELD_GROUP_NAME",
		10000:  "LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID",
		10001:  "LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID",
		10002:  "LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID",
		10003:  "LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID",
		10004:  "LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID",
		10005:  "LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID",
		10006:  "LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID",
		10007:  "LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID",
		10008:  "LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID",
		10009:  "LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID",
		10010:  "LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID",
		10011:  "LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID",
		10012:  "LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID",
		10013:  "LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID",
		10014:  "LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID",
		11000:  "LINE_ITEM_CUSTOM_FIELD_0_VALUE",
		11001:  "LINE_ITEM_CUSTOM_FIELD_1_VALUE",
		11002:  "LINE_ITEM_CUSTOM_FIELD_2_VALUE",
		11003:  "LINE_ITEM_CUSTOM_FIELD_3_VALUE",
		11004:  "LINE_ITEM_CUSTOM_FIELD_4_VALUE",
		11005:  "LINE_ITEM_CUSTOM_FIELD_5_VALUE",
		11006:  "LINE_ITEM_CUSTOM_FIELD_6_VALUE",
		11007:  "LINE_ITEM_CUSTOM_FIELD_7_VALUE",
		11008:  "LINE_ITEM_CUSTOM_FIELD_8_VALUE",
		11009:  "LINE_ITEM_CUSTOM_FIELD_9_VALUE",
		11010:  "LINE_ITEM_CUSTOM_FIELD_10_VALUE",
		11011:  "LINE_ITEM_CUSTOM_FIELD_11_VALUE",
		11012:  "LINE_ITEM_CUSTOM_FIELD_12_VALUE",
		11013:  "LINE_ITEM_CUSTOM_FIELD_13_VALUE",
		11014:  "LINE_ITEM_CUSTOM_FIELD_14_VALUE",
		12000:  "ORDER_CUSTOM_FIELD_0_OPTION_ID",
		12001:  "ORDER_CUSTOM_FIELD_1_OPTION_ID",
		12002:  "ORDER_CUSTOM_FIELD_2_OPTION_ID",
		12003:  "ORDER_CUSTOM_FIELD_3_OPTION_ID",
		12004:  "ORDER_CUSTOM_FIELD_4_OPTION_ID",
		12005:  "ORDER_CUSTOM_FIELD_5_OPTION_ID",
		12006:  "ORDER_CUSTOM_FIELD_6_OPTION_ID",
		12007:  "ORDER_CUSTOM_FIELD_7_OPTION_ID",
		12008:  "ORDER_CUSTOM_FIELD_8_OPTION_ID",
		12009:  "ORDER_CUSTOM_FIELD_9_OPTION_ID",
		12010:  "ORDER_CUSTOM_FIELD_10_OPTION_ID",
		12011:  "ORDER_CUSTOM_FIELD_11_OPTION_ID",
		12012:  "ORDER_CUSTOM_FIELD_12_OPTION_ID",
		12013:  "ORDER_CUSTOM_FIELD_13_OPTION_ID",
		12014:  "ORDER_CUSTOM_FIELD_14_OPTION_ID",
		13000:  "ORDER_CUSTOM_FIELD_0_VALUE",
		13001:  "ORDER_CUSTOM_FIELD_1_VALUE",
		13002:  "ORDER_CUSTOM_FIELD_2_VALUE",
		13003:  "ORDER_CUSTOM_FIELD_3_VALUE",
		13004:  "ORDER_CUSTOM_FIELD_4_VALUE",
		13005:  "ORDER_CUSTOM_FIELD_5_VALUE",
		13006:  "ORDER_CUSTOM_FIELD_6_VALUE",
		13007:  "ORDER_CUSTOM_FIELD_7_VALUE",
		13008:  "ORDER_CUSTOM_FIELD_8_VALUE",
		13009:  "ORDER_CUSTOM_FIELD_9_VALUE",
		13010:  "ORDER_CUSTOM_FIELD_10_VALUE",
		13011:  "ORDER_CUSTOM_FIELD_11_VALUE",
		13012:  "ORDER_CUSTOM_FIELD_12_VALUE",
		13013:  "ORDER_CUSTOM_FIELD_13_VALUE",
		13014:  "ORDER_CUSTOM_FIELD_14_VALUE",
		14000:  "CREATIVE_CUSTOM_FIELD_0_OPTION_ID",
		14001:  "CREATIVE_CUSTOM_FIELD_1_OPTION_ID",
		14002:  "CREATIVE_CUSTOM_FIELD_2_OPTION_ID",
		14003:  "CREATIVE_CUSTOM_FIELD_3_OPTION_ID",
		14004:  "CREATIVE_CUSTOM_FIELD_4_OPTION_ID",
		14005:  "CREATIVE_CUSTOM_FIELD_5_OPTION_ID",
		14006:  "CREATIVE_CUSTOM_FIELD_6_OPTION_ID",
		14007:  "CREATIVE_CUSTOM_FIELD_7_OPTION_ID",
		14008:  "CREATIVE_CUSTOM_FIELD_8_OPTION_ID",
		14009:  "CREATIVE_CUSTOM_FIELD_9_OPTION_ID",
		14010:  "CREATIVE_CUSTOM_FIELD_10_OPTION_ID",
		14011:  "CREATIVE_CUSTOM_FIELD_11_OPTION_ID",
		14012:  "CREATIVE_CUSTOM_FIELD_12_OPTION_ID",
		14013:  "CREATIVE_CUSTOM_FIELD_13_OPTION_ID",
		14014:  "CREATIVE_CUSTOM_FIELD_14_OPTION_ID",
		15000:  "CREATIVE_CUSTOM_FIELD_0_VALUE",
		15001:  "CREATIVE_CUSTOM_FIELD_1_VALUE",
		15002:  "CREATIVE_CUSTOM_FIELD_2_VALUE",
		15003:  "CREATIVE_CUSTOM_FIELD_3_VALUE",
		15004:  "CREATIVE_CUSTOM_FIELD_4_VALUE",
		15005:  "CREATIVE_CUSTOM_FIELD_5_VALUE",
		15006:  "CREATIVE_CUSTOM_FIELD_6_VALUE",
		15007:  "CREATIVE_CUSTOM_FIELD_7_VALUE",
		15008:  "CREATIVE_CUSTOM_FIELD_8_VALUE",
		15009:  "CREATIVE_CUSTOM_FIELD_9_VALUE",
		15010:  "CREATIVE_CUSTOM_FIELD_10_VALUE",
		15011:  "CREATIVE_CUSTOM_FIELD_11_VALUE",
		15012:  "CREATIVE_CUSTOM_FIELD_12_VALUE",
		15013:  "CREATIVE_CUSTOM_FIELD_13_VALUE",
		15014:  "CREATIVE_CUSTOM_FIELD_14_VALUE",
		16000:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID",
		16001:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID",
		16002:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID",
		16003:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID",
		16004:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID",
		16005:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID",
		16006:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID",
		16007:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID",
		16008:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID",
		16009:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID",
		16010:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID",
		16011:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID",
		16012:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID",
		16013:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID",
		16014:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID",
		17000:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE",
		17001:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE",
		17002:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE",
		17003:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE",
		17004:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE",
		17005:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE",
		17006:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE",
		17007:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE",
		17008:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE",
		17009:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE",
		17010:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE",
		17011:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE",
		17012:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE",
		17013:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE",
		17014:  "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE",
		18000:  "BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID",
		18001:  "BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID",
		18002:  "BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID",
		18003:  "BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID",
		18004:  "BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID",
		18005:  "BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID",
		18006:  "BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID",
		18007:  "BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID",
		18008:  "BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID",
		18009:  "BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID",
		18010:  "BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID",
		18011:  "BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID",
		18012:  "BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID",
		18013:  "BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID",
		18014:  "BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID",
		19000:  "BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE",
		19001:  "BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE",
		19002:  "BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE",
		19003:  "BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE",
		19004:  "BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE",
		19005:  "BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE",
		19006:  "BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE",
		19007:  "BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE",
		19008:  "BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE",
		19009:  "BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE",
		19010:  "BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE",
		19011:  "BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE",
		19012:  "BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE",
		19013:  "BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE",
		19014:  "BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE",
		20000:  "BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID",
		20001:  "BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID",
		20002:  "BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID",
		20003:  "BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID",
		20004:  "BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID",
		20005:  "BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID",
		20006:  "BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID",
		20007:  "BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID",
		20008:  "BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID",
		20009:  "BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID",
		20010:  "BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID",
		20011:  "BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID",
		20012:  "BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID",
		20013:  "BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID",
		20014:  "BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID",
		21000:  "BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE",
		21001:  "BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE",
		21002:  "BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE",
		21003:  "BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE",
		21004:  "BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE",
		21005:  "BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE",
		21006:  "BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE",
		21007:  "BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE",
		21008:  "BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE",
		21009:  "BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE",
		21010:  "BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE",
		21011:  "BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE",
		21012:  "BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE",
		21013:  "BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE",
		21014:  "BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE",
		100000: "CUSTOM_DIMENSION_0_VALUE_ID",
		100001: "CUSTOM_DIMENSION_1_VALUE_ID",
		100002: "CUSTOM_DIMENSION_2_VALUE_ID",
		100003: "CUSTOM_DIMENSION_3_VALUE_ID",
		100004: "CUSTOM_DIMENSION_4_VALUE_ID",
		100005: "CUSTOM_DIMENSION_5_VALUE_ID",
		100006: "CUSTOM_DIMENSION_6_VALUE_ID",
		100007: "CUSTOM_DIMENSION_7_VALUE_ID",
		100008: "CUSTOM_DIMENSION_8_VALUE_ID",
		100009: "CUSTOM_DIMENSION_9_VALUE_ID",
		101000: "CUSTOM_DIMENSION_0_VALUE",
		101001: "CUSTOM_DIMENSION_1_VALUE",
		101002: "CUSTOM_DIMENSION_2_VALUE",
		101003: "CUSTOM_DIMENSION_3_VALUE",
		101004: "CUSTOM_DIMENSION_4_VALUE",
		101005: "CUSTOM_DIMENSION_5_VALUE",
		101006: "CUSTOM_DIMENSION_6_VALUE",
		101007: "CUSTOM_DIMENSION_7_VALUE",
		101008: "CUSTOM_DIMENSION_8_VALUE",
		101009: "CUSTOM_DIMENSION_9_VALUE",
	}
	Report_Dimension_value = map[string]int32{
		"DIMENSION_UNSPECIFIED":                             0,
		"ADVERTISER_DOMAIN_NAME":                            242,
		"ADVERTISER_EXTERNAL_ID":                            228,
		"ADVERTISER_ID":                                     131,
		"ADVERTISER_LABELS":                                 230,
		"ADVERTISER_LABEL_IDS":                              229,
		"ADVERTISER_NAME":                                   132,
		"ADVERTISER_PRIMARY_CONTACT":                        227,
		"AD_LOCATION":                                       390,
		"AD_LOCATION_NAME":                                  391,
		"AD_UNIT_CODE":                                      64,
		"AD_UNIT_CODE_LEVEL_1":                              65,
		"AD_UNIT_CODE_LEVEL_10":                             74,
		"AD_UNIT_CODE_LEVEL_11":                             75,
		"AD_UNIT_CODE_LEVEL_12":                             76,
		"AD_UNIT_CODE_LEVEL_13":                             77,
		"AD_UNIT_CODE_LEVEL_14":                             78,
		"AD_UNIT_CODE_LEVEL_15":                             79,
		"AD_UNIT_CODE_LEVEL_16":                             80,
		"AD_UNIT_CODE_LEVEL_2":                              66,
		"AD_UNIT_CODE_LEVEL_3":                              67,
		"AD_UNIT_CODE_LEVEL_4":                              68,
		"AD_UNIT_CODE_LEVEL_5":                              69,
		"AD_UNIT_CODE_LEVEL_6":                              70,
		"AD_UNIT_CODE_LEVEL_7":                              71,
		"AD_UNIT_CODE_LEVEL_8":                              72,
		"AD_UNIT_CODE_LEVEL_9":                              73,
		"AD_UNIT_DEPTH":                                     101,
		"AD_UNIT_ID":                                        25,
		"AD_UNIT_ID_ALL_LEVEL":                              27,
		"AD_UNIT_ID_LEVEL_1":                                30,
		"AD_UNIT_ID_LEVEL_10":                               48,
		"AD_UNIT_ID_LEVEL_11":                               50,
		"AD_UNIT_ID_LEVEL_12":                               52,
		"AD_UNIT_ID_LEVEL_13":                               54,
		"AD_UNIT_ID_LEVEL_14":                               56,
		"AD_UNIT_ID_LEVEL_15":                               58,
		"AD_UNIT_ID_LEVEL_16":                               60,
		"AD_UNIT_ID_LEVEL_2":                                32,
		"AD_UNIT_ID_LEVEL_3":                                34,
		"AD_UNIT_ID_LEVEL_4":                                36,
		"AD_UNIT_ID_LEVEL_5":                                38,
		"AD_UNIT_ID_LEVEL_6":                                40,
		"AD_UNIT_ID_LEVEL_7":                                42,
		"AD_UNIT_ID_LEVEL_8":                                44,
		"AD_UNIT_ID_LEVEL_9":                                46,
		"AD_UNIT_ID_TOP_LEVEL":                              142,
		"AD_UNIT_NAME":                                      26,
		"AD_UNIT_NAME_ALL_LEVEL":                            29,
		"AD_UNIT_NAME_LEVEL_1":                              31,
		"AD_UNIT_NAME_LEVEL_10":                             49,
		"AD_UNIT_NAME_LEVEL_11":                             51,
		"AD_UNIT_NAME_LEVEL_12":                             53,
		"AD_UNIT_NAME_LEVEL_13":                             55,
		"AD_UNIT_NAME_LEVEL_14":                             57,
		"AD_UNIT_NAME_LEVEL_15":                             59,
		"AD_UNIT_NAME_LEVEL_16":                             61,
		"AD_UNIT_NAME_LEVEL_2":                              33,
		"AD_UNIT_NAME_LEVEL_3":                              35,
		"AD_UNIT_NAME_LEVEL_4":                              37,
		"AD_UNIT_NAME_LEVEL_5":                              39,
		"AD_UNIT_NAME_LEVEL_6":                              41,
		"AD_UNIT_NAME_LEVEL_7":                              43,
		"AD_UNIT_NAME_LEVEL_8":                              45,
		"AD_UNIT_NAME_LEVEL_9":                              47,
		"AD_UNIT_NAME_TOP_LEVEL":                            143,
		"AD_UNIT_REWARD_AMOUNT":                             63,
		"AD_UNIT_REWARD_TYPE":                               62,
		"AD_UNIT_STATUS":                                    206,
		"AD_UNIT_STATUS_NAME":                               207,
		"APP_VERSION":                                       392,
		"BACKFILL_ADVERTISER_EXTERNAL_ID":                   349,
		"BACKFILL_ADVERTISER_ID":                            346,
		"BACKFILL_ADVERTISER_LABELS":                        351,
		"BACKFILL_ADVERTISER_LABEL_IDS":                     350,
		"BACKFILL_ADVERTISER_NAME":                          347,
		"BACKFILL_ADVERTISER_PRIMARY_CONTACT":               348,
		"BACKFILL_CREATIVE_BILLING_TYPE":                    378,
		"BACKFILL_CREATIVE_BILLING_TYPE_NAME":               379,
		"BACKFILL_CREATIVE_CLICK_THROUGH_URL":               376,
		"BACKFILL_CREATIVE_ID":                              370,
		"BACKFILL_CREATIVE_NAME":                            371,
		"BACKFILL_CREATIVE_THIRD_PARTY_VENDOR":              377,
		"BACKFILL_CREATIVE_TYPE":                            374,
		"BACKFILL_CREATIVE_TYPE_NAME":                       375,
		"BACKFILL_LINE_ITEM_ARCHIVED":                       278,
		"BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION":      258,
		"BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME": 259,
		"BACKFILL_LINE_ITEM_COMPUTED_STATUS":                296,
		"BACKFILL_LINE_ITEM_COMPUTED_STATUS_NAME":           297,
		"BACKFILL_LINE_ITEM_CONTRACTED_QUANTITY":            280,
		"BACKFILL_LINE_ITEM_COST_PER_UNIT":                  272,
		"BACKFILL_LINE_ITEM_COST_TYPE":                      264,
		"BACKFILL_LINE_ITEM_COST_TYPE_NAME":                 265,
		"BACKFILL_LINE_ITEM_CREATIVE_END_DATE":              381,
		"BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE":         290,
		"BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME":    291,
		"BACKFILL_LINE_ITEM_CREATIVE_START_DATE":            380,
		"BACKFILL_LINE_ITEM_CURRENCY_CODE":                  288,
		"BACKFILL_LINE_ITEM_DELIVERY_INDICATOR":             274,
		"BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE":             292,
		"BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE_NAME":        293,
		"BACKFILL_LINE_ITEM_DISCOUNT_ABSOLUTE":              294,
		"BACKFILL_LINE_ITEM_DISCOUNT_PERCENTAGE":            295,
		"BACKFILL_LINE_ITEM_END_DATE":                       267,
		"BACKFILL_LINE_ITEM_END_DATE_TIME":                  269,
		"BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE":               302,
		"BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE_NAME":          257,
		"BACKFILL_LINE_ITEM_EXTERNAL_DEAL_ID":               285,
		"BACKFILL_LINE_ITEM_EXTERNAL_ID":                    273,
		"BACKFILL_LINE_ITEM_FREQUENCY_CAP":                  303,
		"BACKFILL_LINE_ITEM_ID":                             298,
		"BACKFILL_LINE_ITEM_LAST_MODIFIED_BY_APP":           289,
		"BACKFILL_LINE_ITEM_LIFETIME_CLICKS":                283,
		"BACKFILL_LINE_ITEM_LIFETIME_IMPRESSIONS":           282,
		"BACKFILL_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS":  284,
		"BACKFILL_LINE_ITEM_MAKEGOOD":                       276,
		"BACKFILL_LINE_ITEM_NAME":                           299,
		"BACKFILL_LINE_ITEM_NON_CPD_BOOKED_REVENUE":         286,
		"BACKFILL_LINE_ITEM_OPTIMIZABLE":                    277,
		"BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE":              262,
		"BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME":         263,
		"BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE":         260,
		"BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME":    261,
		"BACKFILL_LINE_ITEM_PRIORITY":                       266,
		"BACKFILL_LINE_ITEM_RESERVATION_STATUS":             306,
		"BACKFILL_LINE_ITEM_RESERVATION_STATUS_NAME":        307,
		"BACKFILL_LINE_ITEM_START_DATE":                     268,
		"BACKFILL_LINE_ITEM_START_DATE_TIME":                270,
		"BACKFILL_LINE_ITEM_TYPE":                           300,
		"BACKFILL_LINE_ITEM_TYPE_NAME":                      301,
		"BACKFILL_LINE_ITEM_UNLIMITED_END":                  271,
		"BACKFILL_LINE_ITEM_VALUE_COST_PER_UNIT":            275,
		"BACKFILL_LINE_ITEM_WEB_PROPERTY_CODE":              287,
		"BACKFILL_MASTER_COMPANION_CREATIVE_ID":             372,
		"BACKFILL_MASTER_COMPANION_CREATIVE_NAME":           373,
		"BACKFILL_ORDER_AGENCY":                             313,
		"BACKFILL_ORDER_AGENCY_ID":                          314,
		"BACKFILL_ORDER_BOOKED_CPC":                         315,
		"BACKFILL_ORDER_BOOKED_CPM":                         316,
		"BACKFILL_ORDER_DELIVERY_STATUS":                    340,
		"BACKFILL_ORDER_DELIVERY_STATUS_NAME":               341,
		"BACKFILL_ORDER_END_DATE":                           317,
		"BACKFILL_ORDER_END_DATE_TIME":                      319,
		"BACKFILL_ORDER_EXTERNAL_ID":                        320,
		"BACKFILL_ORDER_ID":                                 338,
		"BACKFILL_ORDER_LABELS":                             334,
		"BACKFILL_ORDER_LABEL_IDS":                          335,
		"BACKFILL_ORDER_LIFETIME_CLICKS":                    322,
		"BACKFILL_ORDER_LIFETIME_IMPRESSIONS":               323,
		"BACKFILL_ORDER_NAME":                               339,
		"BACKFILL_ORDER_PO_NUMBER":                          324,
		"BACKFILL_ORDER_PROGRAMMATIC":                       321,
		"BACKFILL_ORDER_SALESPERSON":                        325,
		"BACKFILL_ORDER_SECONDARY_SALESPEOPLE":              329,
		"BACKFILL_ORDER_SECONDARY_SALESPEOPLE_ID":           328,
		"BACKFILL_ORDER_SECONDARY_TRAFFICKERS":              331,
		"BACKFILL_ORDER_SECONDARY_TRAFFICKERS_ID":           330,
		"BACKFILL_ORDER_START_DATE":                         332,
		"BACKFILL_ORDER_START_DATE_TIME":                    333,
		"BACKFILL_ORDER_TRAFFICKER":                         326,
		"BACKFILL_ORDER_TRAFFICKER_ID":                      327,
		"BACKFILL_ORDER_UNLIMITED_END":                      318,
		"BACKFILL_PROGRAMMATIC_BUYER_ID":                    336,
		"BACKFILL_PROGRAMMATIC_BUYER_NAME":                  337,
		"BRANDING_TYPE":                                     383,
		"BRANDING_TYPE_NAME":                                384,
		"BROWSER_CATEGORY":                                  119,
		"BROWSER_CATEGORY_NAME":                             120,
		"BROWSER_ID":                                        235,
		"BROWSER_NAME":                                      236,
		"CARRIER_ID":                                        369,
		"CARRIER_NAME":                                      368,
		"CLASSIFIED_ADVERTISER_ID":                          133,
		"CLASSIFIED_ADVERTISER_NAME":                        134,
		"CLASSIFIED_BRAND_ID":                               243,
		"CLASSIFIED_BRAND_NAME":                             244,
		"CONTENT_ID":                                        246,
		"CONTENT_NAME":                                      247,
		"COUNTRY_ID":                                        11,
		"COUNTRY_NAME":                                      12,
		"CREATIVE_BILLING_TYPE":                             366,
		"CREATIVE_BILLING_TYPE_NAME":                        367,
		"CREATIVE_CLICK_THROUGH_URL":                        174,
		"CREATIVE_ID":                                       138,
		"CREATIVE_NAME":                                     139,
		"CREATIVE_TECHNOLOGY":                               148,
		"CREATIVE_TECHNOLOGY_NAME":                          149,
		"CREATIVE_THIRD_PARTY_VENDOR":                       361,
		"CREATIVE_TYPE":                                     344,
		"CREATIVE_TYPE_NAME":                                345,
		"DATE":                                              3,
		"DAY_OF_WEEK":                                       4,
		"DEMAND_CHANNEL":                                    9,
		"DEMAND_CHANNEL_NAME":                               10,
		"DEMAND_SUBCHANNEL":                                 22,
		"DEMAND_SUBCHANNEL_NAME":                            23,
		"DEVICE":                                            226,
		"DEVICE_CATEGORY":                                   15,
		"DEVICE_CATEGORY_NAME":                              16,
		"DEVICE_NAME":                                       225,
		"EXCHANGE_THIRD_PARTY_COMPANY_ID":                   185,
		"EXCHANGE_THIRD_PARTY_COMPANY_NAME":                 186,
		"FIRST_LOOK_PRICING_RULE_ID":                        248,
		"FIRST_LOOK_PRICING_RULE_NAME":                      249,
		"HOUR":                                              100,
		"INTERACTION_TYPE":                                  223,
		"INTERACTION_TYPE_NAME":                             224,
		"INVENTORY_FORMAT":                                  17,
		"INVENTORY_FORMAT_NAME":                             18,
		"INVENTORY_TYPE":                                    19,
		"INVENTORY_TYPE_NAME":                               20,
		"IS_ADX_DIRECT":                                     382,
		"IS_FIRST_LOOK_DEAL":                                401,
		"KEY_VALUES_ID":                                     214,
		"KEY_VALUES_NAME":                                   215,
		"LINE_ITEM_ARCHIVED":                                188,
		"LINE_ITEM_COMPANION_DELIVERY_OPTION":               204,
		"LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME":          205,
		"LINE_ITEM_COMPUTED_STATUS":                         250,
		"LINE_ITEM_COMPUTED_STATUS_NAME":                    251,
		"LINE_ITEM_CONTRACTED_QUANTITY":                     92,
		"LINE_ITEM_COST_PER_UNIT":                           85,
		"LINE_ITEM_COST_TYPE":                               212,
		"LINE_ITEM_COST_TYPE_NAME":                          213,
		"LINE_ITEM_CREATIVE_END_DATE":                       176,
		"LINE_ITEM_CREATIVE_ROTATION_TYPE":                  189,
		"LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME":             190,
		"LINE_ITEM_CREATIVE_START_DATE":                     175,
		"LINE_ITEM_CURRENCY_CODE":                           180,
		"LINE_ITEM_DELIVERY_INDICATOR":                      87,
		"LINE_ITEM_DELIVERY_RATE_TYPE":                      191,
		"LINE_ITEM_DELIVERY_RATE_TYPE_NAME":                 192,
		"LINE_ITEM_DISCOUNT_ABSOLUTE":                       195,
		"LINE_ITEM_DISCOUNT_PERCENTAGE":                     196,
		"LINE_ITEM_END_DATE":                                81,
		"LINE_ITEM_END_DATE_TIME":                           83,
		"LINE_ITEM_ENVIRONMENT_TYPE":                        201,
		"LINE_ITEM_ENVIRONMENT_TYPE_NAME":                   202,
		"LINE_ITEM_EXTERNAL_DEAL_ID":                        97,
		"LINE_ITEM_EXTERNAL_ID":                             86,
		"LINE_ITEM_FREQUENCY_CAP":                           256,
		"LINE_ITEM_ID":                                      1,
		"LINE_ITEM_LAST_MODIFIED_BY_APP":                    181,
		"LINE_ITEM_LIFETIME_CLICKS":                         95,
		"LINE_ITEM_LIFETIME_IMPRESSIONS":                    94,
		"LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS":           96,
		"LINE_ITEM_MAKEGOOD":                                89,
		"LINE_ITEM_NAME":                                    2,
		"LINE_ITEM_NON_CPD_BOOKED_REVENUE":                  98,
		"LINE_ITEM_OPTIMIZABLE":                             90,
		"LINE_ITEM_PRIMARY_GOAL_TYPE":                       210,
		"LINE_ITEM_PRIMARY_GOAL_TYPE_NAME":                  211,
		"LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE":             93,
		"LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE":           396,
		"LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE":                  208,
		"LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME":             209,
		"LINE_ITEM_PRIORITY":                                24,
		"LINE_ITEM_RESERVATION_STATUS":                      304,
		"LINE_ITEM_RESERVATION_STATUS_NAME":                 305,
		"LINE_ITEM_START_DATE":                              82,
		"LINE_ITEM_START_DATE_TIME":                         84,
		"LINE_ITEM_TYPE":                                    193,
		"LINE_ITEM_TYPE_NAME":                               194,
		"LINE_ITEM_UNLIMITED_END":                           187,
		"LINE_ITEM_VALUE_COST_PER_UNIT":                     88,
		"LINE_ITEM_WEB_PROPERTY_CODE":                       179,
		"MASTER_COMPANION_CREATIVE_ID":                      140,
		"MASTER_COMPANION_CREATIVE_NAME":                    141,
		"MOBILE_APP_FREE":                                   128,
		"MOBILE_APP_ICON_URL":                               129,
		"MOBILE_APP_ID":                                     123,
		"MOBILE_APP_NAME":                                   127,
		"MOBILE_APP_OWNERSHIP_STATUS":                       311,
		"MOBILE_APP_OWNERSHIP_STATUS_NAME":                  312,
		"MOBILE_APP_STORE":                                  125,
		"MOBILE_APP_STORE_NAME":                             245,
		"MOBILE_INVENTORY_TYPE":                             99,
		"MOBILE_INVENTORY_TYPE_NAME":                        21,
		"MOBILE_SDK_VERSION_NAME":                           130,
		"MONTH_YEAR":                                        6,
		"NATIVE_AD_FORMAT_ID":                               255,
		"NATIVE_AD_FORMAT_NAME":                             254,
		"NATIVE_STYLE_ID":                                   253,
		"NATIVE_STYLE_NAME":                                 252,
		"OPERATING_SYSTEM_CATEGORY":                         117,
		"OPERATING_SYSTEM_CATEGORY_NAME":                    118,
		"OPERATING_SYSTEM_VERSION_ID":                       238,
		"OPERATING_SYSTEM_VERSION_NAME":                     237,
		"ORDER_AGENCY":                                      150,
		"ORDER_AGENCY_ID":                                   151,
		"ORDER_BOOKED_CPC":                                  152,
		"ORDER_BOOKED_CPM":                                  153,
		"ORDER_DELIVERY_STATUS":                             231,
		"ORDER_DELIVERY_STATUS_NAME":                        239,
		"ORDER_END_DATE":                                    154,
		"ORDER_END_DATE_TIME":                               155,
		"ORDER_EXTERNAL_ID":                                 156,
		"ORDER_ID":                                          7,
		"ORDER_LABELS":                                      170,
		"ORDER_LABEL_IDS":                                   171,
		"ORDER_LIFETIME_CLICKS":                             158,
		"ORDER_LIFETIME_IMPRESSIONS":                        159,
		"ORDER_NAME":                                        8,
		"ORDER_PO_NUMBER":                                   160,
		"ORDER_PROGRAMMATIC":                                157,
		"ORDER_SALESPERSON":                                 161,
		"ORDER_SECONDARY_SALESPEOPLE":                       164,
		"ORDER_SECONDARY_SALESPEOPLE_ID":                    165,
		"ORDER_SECONDARY_TRAFFICKERS":                       166,
		"ORDER_SECONDARY_TRAFFICKERS_ID":                    167,
		"ORDER_START_DATE":                                  168,
		"ORDER_START_DATE_TIME":                             169,
		"ORDER_TRAFFICKER":                                  162,
		"ORDER_TRAFFICKER_ID":                               163,
		"ORDER_UNLIMITED_END":                               203,
		"PLACEMENT_ID":                                      113,
		"PLACEMENT_ID_ALL":                                  144,
		"PLACEMENT_NAME":                                    114,
		"PLACEMENT_NAME_ALL":                                145,
		"PLACEMENT_STATUS":                                  362,
		"PLACEMENT_STATUS_ALL":                              363,
		"PLACEMENT_STATUS_NAME":                             364,
		"PLACEMENT_STATUS_NAME_ALL":                         365,
		"PROGRAMMATIC_BUYER_ID":                             240,
		"PROGRAMMATIC_BUYER_NAME":                           241,
		"PROGRAMMATIC_CHANNEL":                              13,
		"PROGRAMMATIC_CHANNEL_NAME":                         14,
		"RENDERED_CREATIVE_SIZE":                            343,
		"REQUESTED_AD_SIZES":                                352,
		"REQUEST_TYPE":                                      146,
		"REQUEST_TYPE_NAME":                                 147,
		"SITE":                                              387,
		"TARGETING_ID":                                      232,
		"TARGETING_NAME":                                    233,
		"TARGETING_TYPE":                                    385,
		"TARGETING_TYPE_NAME":                               386,
		"TRAFFIC_SOURCE":                                    388,
		"TRAFFIC_SOURCE_NAME":                               389,
		"UNIFIED_PRICING_RULE_ID":                           393,
		"UNIFIED_PRICING_RULE_NAME":                         394,
		"VIDEO_PLCMT":                                       172,
		"VIDEO_PLCMT_NAME":                                  173,
		"WEEK":                                              5,
		"YIELD_GROUP_BUYER_NAME":                            184,
		"YIELD_GROUP_ID":                                    182,
		"YIELD_GROUP_NAME":                                  183,
		"LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID":                10000,
		"LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID":                10001,
		"LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID":                10002,
		"LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID":                10003,
		"LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID":                10004,
		"LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID":                10005,
		"LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID":                10006,
		"LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID":                10007,
		"LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID":                10008,
		"LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID":                10009,
		"LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID":               10010,
		"LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID":               10011,
		"LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID":               10012,
		"LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID":               10013,
		"LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID":               10014,
		"LINE_ITEM_CUSTOM_FIELD_0_VALUE":                    11000,
		"LINE_ITEM_CUSTOM_FIELD_1_VALUE":                    11001,
		"LINE_ITEM_CUSTOM_FIELD_2_VALUE":                    11002,
		"LINE_ITEM_CUSTOM_FIELD_3_VALUE":                    11003,
		"LINE_ITEM_CUSTOM_FIELD_4_VALUE":                    11004,
		"LINE_ITEM_CUSTOM_FIELD_5_VALUE":                    11005,
		"LINE_ITEM_CUSTOM_FIELD_6_VALUE":                    11006,
		"LINE_ITEM_CUSTOM_FIELD_7_VALUE":                    11007,
		"LINE_ITEM_CUSTOM_FIELD_8_VALUE":                    11008,
		"LINE_ITEM_CUSTOM_FIELD_9_VALUE":                    11009,
		"LINE_ITEM_CUSTOM_FIELD_10_VALUE":                   11010,
		"LINE_ITEM_CUSTOM_FIELD_11_VALUE":                   11011,
		"LINE_ITEM_CUSTOM_FIELD_12_VALUE":                   11012,
		"LINE_ITEM_CUSTOM_FIELD_13_VALUE":                   11013,
		"LINE_ITEM_CUSTOM_FIELD_14_VALUE":                   11014,
		"ORDER_CUSTOM_FIELD_0_OPTION_ID":                    12000,
		"ORDER_CUSTOM_FIELD_1_OPTION_ID":                    12001,
		"ORDER_CUSTOM_FIELD_2_OPTION_ID":                    12002,
		"ORDER_CUSTOM_FIELD_3_OPTION_ID":                    12003,
		"ORDER_CUSTOM_FIELD_4_OPTION_ID":                    12004,
		"ORDER_CUSTOM_FIELD_5_OPTION_ID":                    12005,
		"ORDER_CUSTOM_FIELD_6_OPTION_ID":                    12006,
		"ORDER_CUSTOM_FIELD_7_OPTION_ID":                    12007,
		"ORDER_CUSTOM_FIELD_8_OPTION_ID":                    12008,
		"ORDER_CUSTOM_FIELD_9_OPTION_ID":                    12009,
		"ORDER_CUSTOM_FIELD_10_OPTION_ID":                   12010,
		"ORDER_CUSTOM_FIELD_11_OPTION_ID":                   12011,
		"ORDER_CUSTOM_FIELD_12_OPTION_ID":                   12012,
		"ORDER_CUSTOM_FIELD_13_OPTION_ID":                   12013,
		"ORDER_CUSTOM_FIELD_14_OPTION_ID":                   12014,
		"ORDER_CUSTOM_FIELD_0_VALUE":                        13000,
		"ORDER_CUSTOM_FIELD_1_VALUE":                        13001,
		"ORDER_CUSTOM_FIELD_2_VALUE":                        13002,
		"ORDER_CUSTOM_FIELD_3_VALUE":                        13003,
		"ORDER_CUSTOM_FIELD_4_VALUE":                        13004,
		"ORDER_CUSTOM_FIELD_5_VALUE":                        13005,
		"ORDER_CUSTOM_FIELD_6_VALUE":                        13006,
		"ORDER_CUSTOM_FIELD_7_VALUE":                        13007,
		"ORDER_CUSTOM_FIELD_8_VALUE":                        13008,
		"ORDER_CUSTOM_FIELD_9_VALUE":                        13009,
		"ORDER_CUSTOM_FIELD_10_VALUE":                       13010,
		"ORDER_CUSTOM_FIELD_11_VALUE":                       13011,
		"ORDER_CUSTOM_FIELD_12_VALUE":                       13012,
		"ORDER_CUSTOM_FIELD_13_VALUE":                       13013,
		"ORDER_CUSTOM_FIELD_14_VALUE":                       13014,
		"CREATIVE_CUSTOM_FIELD_0_OPTION_ID":                 14000,
		"CREATIVE_CUSTOM_FIELD_1_OPTION_ID":                 14001,
		"CREATIVE_CUSTOM_FIELD_2_OPTION_ID":                 14002,
		"CREATIVE_CUSTOM_FIELD_3_OPTION_ID":                 14003,
		"CREATIVE_CUSTOM_FIELD_4_OPTION_ID":                 14004,
		"CREATIVE_CUSTOM_FIELD_5_OPTION_ID":                 14005,
		"CREATIVE_CUSTOM_FIELD_6_OPTION_ID":                 14006,
		"CREATIVE_CUSTOM_FIELD_7_OPTION_ID":                 14007,
		"CREATIVE_CUSTOM_FIELD_8_OPTION_ID":                 14008,
		"CREATIVE_CUSTOM_FIELD_9_OPTION_ID":                 14009,
		"CREATIVE_CUSTOM_FIELD_10_OPTION_ID":                14010,
		"CREATIVE_CUSTOM_FIELD_11_OPTION_ID":                14011,
		"CREATIVE_CUSTOM_FIELD_12_OPTION_ID":                14012,
		"CREATIVE_CUSTOM_FIELD_13_OPTION_ID":                14013,
		"CREATIVE_CUSTOM_FIELD_14_OPTION_ID":                14014,
		"CREATIVE_CUSTOM_FIELD_0_VALUE":                     15000,
		"CREATIVE_CUSTOM_FIELD_1_VALUE":                     15001,
		"CREATIVE_CUSTOM_FIELD_2_VALUE":                     15002,
		"CREATIVE_CUSTOM_FIELD_3_VALUE":                     15003,
		"CREATIVE_CUSTOM_FIELD_4_VALUE":                     15004,
		"CREATIVE_CUSTOM_FIELD_5_VALUE":                     15005,
		"CREATIVE_CUSTOM_FIELD_6_VALUE":                     15006,
		"CREATIVE_CUSTOM_FIELD_7_VALUE":                     15007,
		"CREATIVE_CUSTOM_FIELD_8_VALUE":                     15008,
		"CREATIVE_CUSTOM_FIELD_9_VALUE":                     15009,
		"CREATIVE_CUSTOM_FIELD_10_VALUE":                    15010,
		"CREATIVE_CUSTOM_FIELD_11_VALUE":                    15011,
		"CREATIVE_CUSTOM_FIELD_12_VALUE":                    15012,
		"CREATIVE_CUSTOM_FIELD_13_VALUE":                    15013,
		"CREATIVE_CUSTOM_FIELD_14_VALUE":                    15014,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID":       16000,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID":       16001,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID":       16002,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID":       16003,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID":       16004,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID":       16005,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID":       16006,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID":       16007,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID":       16008,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID":       16009,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID":      16010,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID":      16011,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID":      16012,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID":      16013,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID":      16014,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE":           17000,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE":           17001,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE":           17002,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE":           17003,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE":           17004,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE":           17005,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE":           17006,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE":           17007,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE":           17008,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE":           17009,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE":          17010,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE":          17011,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE":          17012,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE":          17013,
		"BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE":          17014,
		"BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID":           18000,
		"BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID":           18001,
		"BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID":           18002,
		"BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID":           18003,
		"BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID":           18004,
		"BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID":           18005,
		"BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID":           18006,
		"BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID":           18007,
		"BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID":           18008,
		"BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID":           18009,
		"BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID":          18010,
		"BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID":          18011,
		"BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID":          18012,
		"BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID":          18013,
		"BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID":          18014,
		"BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE":               19000,
		"BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE":               19001,
		"BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE":               19002,
		"BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE":               19003,
		"BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE":               19004,
		"BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE":               19005,
		"BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE":               19006,
		"BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE":               19007,
		"BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE":               19008,
		"BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE":               19009,
		"BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE":              19010,
		"BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE":              19011,
		"BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE":              19012,
		"BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE":              19013,
		"BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE":              19014,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID":        20000,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID":        20001,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID":        20002,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID":        20003,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID":        20004,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID":        20005,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID":        20006,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID":        20007,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID":        20008,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID":        20009,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID":       20010,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID":       20011,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID":       20012,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID":       20013,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID":       20014,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE":            21000,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE":            21001,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE":            21002,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE":            21003,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE":            21004,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE":            21005,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE":            21006,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE":            21007,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE":            21008,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE":            21009,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE":           21010,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE":           21011,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE":           21012,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE":           21013,
		"BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE":           21014,
		"CUSTOM_DIMENSION_0_VALUE_ID":                       100000,
		"CUSTOM_DIMENSION_1_VALUE_ID":                       100001,
		"CUSTOM_DIMENSION_2_VALUE_ID":                       100002,
		"CUSTOM_DIMENSION_3_VALUE_ID":                       100003,
		"CUSTOM_DIMENSION_4_VALUE_ID":                       100004,
		"CUSTOM_DIMENSION_5_VALUE_ID":                       100005,
		"CUSTOM_DIMENSION_6_VALUE_ID":                       100006,
		"CUSTOM_DIMENSION_7_VALUE_ID":                       100007,
		"CUSTOM_DIMENSION_8_VALUE_ID":                       100008,
		"CUSTOM_DIMENSION_9_VALUE_ID":                       100009,
		"CUSTOM_DIMENSION_0_VALUE":                          101000,
		"CUSTOM_DIMENSION_1_VALUE":                          101001,
		"CUSTOM_DIMENSION_2_VALUE":                          101002,
		"CUSTOM_DIMENSION_3_VALUE":                          101003,
		"CUSTOM_DIMENSION_4_VALUE":                          101004,
		"CUSTOM_DIMENSION_5_VALUE":                          101005,
		"CUSTOM_DIMENSION_6_VALUE":                          101006,
		"CUSTOM_DIMENSION_7_VALUE":                          101007,
		"CUSTOM_DIMENSION_8_VALUE":                          101008,
		"CUSTOM_DIMENSION_9_VALUE":                          101009,
	}
)

func (x Report_Dimension) Enum() *Report_Dimension {
	p := new(Report_Dimension)
	*p = x
	return p
}

func (x Report_Dimension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Dimension) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[1].Descriptor()
}

func (Report_Dimension) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[1]
}

func (x Report_Dimension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Dimension.Descriptor instead.
func (Report_Dimension) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 1}
}

// Reporting metrics.
type Report_Metric int32

const (
	// Default value. This value is unused.
	Report_METRIC_UNSPECIFIED Report_Metric = 0
	// Active View total average time in seconds that specific impressions are
	// reported as being viewable.
	Report_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME Report_Metric = 61
	// Total number of impressions that were eligible to measure viewability.
	Report_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS Report_Metric = 58
	// The total number of impressions that were sampled and measured by active
	// view.
	Report_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS Report_Metric = 57
	// The percentage of total impressions that were measurable by active view
	// (out of all the total impressions sampled for active view).
	Report_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE Report_Metric = 60
	// The total number of impressions viewed on the user's screen.
	Report_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS Report_Metric = 56
	// The percentage of total impressions viewed on the user's screen (out of
	// the total impressions measurable by active view).
	Report_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE Report_Metric = 59
	// Active View AdSense average time in seconds that specific impressions are
	// reported as being viewable.
	Report_ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME Report_Metric = 73
	// Total number of impressions delivered by AdSense that were eligible to
	// measure viewability.
	Report_ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS Report_Metric = 70
	// The number of impressions delivered by AdSense that were sampled, and
	// measurable by active view.
	Report_ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS Report_Metric = 69
	// The percentage of impressions delivered by AdSense that were measurable
	// by active view (out of all AdSense impressions sampled for active view).
	Report_ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE Report_Metric = 72
	// The number of impressions delivered by AdSense viewed on the user's
	// screen.
	Report_ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS Report_Metric = 68
	// The percentage of impressions delivered by AdSense viewed on the user's
	// screen (out of AdSense impressions measurable by active view).
	Report_ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE Report_Metric = 71
	// The average effective cost-per-thousand-impressions earned from the ads
	// delivered by AdSense through line item dynamic allocation.
	Report_ADSENSE_AVERAGE_ECPM Report_Metric = 26
	// Number of clicks delivered by AdSense demand channel.
	Report_ADSENSE_CLICKS Report_Metric = 23
	// The ratio of impressions served by AdSense that resulted in users
	// clicking on an ad. The clickthrough rate (CTR) is updated nightly. The
	// AdSense CTR is calculated as: (AdSense clicks / AdSense impressions).
	Report_ADSENSE_CTR Report_Metric = 24
	// Total impressions delivered by AdSense.
	Report_ADSENSE_IMPRESSIONS Report_Metric = 22
	// Ratio of clicks delivered by AdSense through line item dynamic allocation
	// in relation to the total clicks delivered.
	Report_ADSENSE_PERCENT_CLICKS Report_Metric = 28
	// Ratio of impressions delivered by AdSense through line item dynamic
	// allocation in relation to the total impressions delivered.
	Report_ADSENSE_PERCENT_IMPRESSIONS Report_Metric = 27
	// Ratio of revenue generated by AdSense through line item dynamic
	// allocation in relation to the total revenue.
	Report_ADSENSE_PERCENT_REVENUE Report_Metric = 29
	// Ratio of revenue generated by AdSense through line item dynamic
	// allocation in relation to the total revenue (excluding CPD).
	Report_ADSENSE_PERCENT_REVENUE_WITHOUT_CPD Report_Metric = 30
	// The total number of times that an AdSense ad is delivered.
	Report_ADSENSE_RESPONSES_SERVED Report_Metric = 41
	// Revenue generated from AdSense through line item dynamic allocation,
	// calculated in the network's currency and time zone.
	Report_ADSENSE_REVENUE Report_Metric = 25
	// Active View AdExchange average time in seconds that specific impressions
	// are reported as being viewable.
	Report_AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME Report_Metric = 79
	// Total number of impressions delivered by Ad Exchange that were eligible
	// to measure viewability.
	Report_AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS Report_Metric = 76
	// The number of impressions delivered by Ad Exchange that were sampled, and
	// measurable by active view.
	Report_AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS Report_Metric = 75
	// The percentage of impressions delivered by Ad Exchange that were
	// measurable by active view (out of all Ad Exchange impressions sampled for
	// active view).
	Report_AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE Report_Metric = 78
	// The number of impressions delivered by Ad Exchange viewed on the user's
	// screen.
	Report_AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS Report_Metric = 74
	// The percentage of impressions delivered by Ad Exchange viewed on the
	// user's screen (out of Ad Exchange impressions measurable by active view).
	Report_AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE Report_Metric = 77
	// The average effective cost-per-thousand-impressions earned from the ads
	// delivered by Ad Exchange through line item dynamic allocation.
	Report_AD_EXCHANGE_AVERAGE_ECPM Report_Metric = 18
	// Number of clicks delivered by the Ad Exchange.
	Report_AD_EXCHANGE_CLICKS Report_Metric = 15
	// The ratio of impressions served by the Ad Exchange that resulted in users
	// clicking on an ad. The clickthrough rate (CTR) is updated nightly. Ad
	// Exchange CTR is calculated as: (Ad Exchange clicks / Ad Exchange
	// impressions).
	Report_AD_EXCHANGE_CTR Report_Metric = 16
	// Total impressions delivered by the Ad Exchange.
	Report_AD_EXCHANGE_IMPRESSIONS Report_Metric = 14
	// Ratio of clicks delivered by Ad Exchange through line item dynamic
	// allocation in relation to the total clicks delivered.
	Report_AD_EXCHANGE_PERCENT_CLICKS Report_Metric = 20
	// Ratio of impressions delivered by Ad Exchange through line item dynamic
	// allocation in relation to the total impressions delivered.
	Report_AD_EXCHANGE_PERCENT_IMPRESSIONS Report_Metric = 19
	// Ratio of revenue generated by Ad Exchange through line item dynamic
	// allocation in relation to the total revenue.
	Report_AD_EXCHANGE_PERCENT_REVENUE Report_Metric = 21
	// Ratio of revenue generated by Ad Exchange through line item dynamic
	// allocation in relation to the total revenue (excluding CPD).
	Report_AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD Report_Metric = 31
	// The total number of times that an Ad Exchange ad is delivered.
	Report_AD_EXCHANGE_RESPONSES_SERVED Report_Metric = 42
	// Revenue generated from the Ad Exchange through line item dynamic
	// allocation, calculated in your network's currency and time zone.
	Report_AD_EXCHANGE_REVENUE Report_Metric = 17
	// The total number of times that an ad request is sent to the ad server
	// including dynamic allocation.
	Report_AD_REQUESTS Report_Metric = 38
	// Active View ad server average time in seconds that specific impressions
	// are reported as being viewable.
	Report_AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME Report_Metric = 67
	// Total number of impressions delivered by the ad server that were eligible
	// to measure viewability.
	Report_AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS Report_Metric = 64
	// The number of impressions delivered by the ad server that were sampled,
	// and measurable by active view.
	Report_AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS Report_Metric = 63
	// The percentage of impressions delivered by the ad server that were
	// measurable by active view (out of all the ad server impressions sampled
	// for active view).
	Report_AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE Report_Metric = 66
	// The number of impressions delivered by the ad server viewed on the user's
	// screen.
	Report_AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS Report_Metric = 62
	// The percentage of impressions delivered by the ad server viewed on the
	// user's screen (out of the ad server impressions measurable by active
	// view).
	Report_AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE Report_Metric = 65
	// Average effective cost-per-thousand-impressions earned from the ads
	// delivered by the Google Ad Manager server.
	Report_AD_SERVER_AVERAGE_ECPM Report_Metric = 34
	// Average effective cost-per-thousand-impressions earned from the ads
	// delivered by the Google Ad Manager server, excluding CPD value.
	Report_AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD Report_Metric = 10
	// Total clicks served by the Google Ad Manager server. It usually takes
	// about 30 minutes for new clicks to be recorded and added to the total
	// displayed in reporting.
	Report_AD_SERVER_CLICKS Report_Metric = 7
	// CPD revenue earned, calculated in your network's currency, for
	// the ads delivered by the Google Ad Manager server. Sum of all booked
	// revenue.
	Report_AD_SERVER_CPD_REVENUE Report_Metric = 32
	// Ratio of impressions served by the Google Ad Manager server that resulted
	// in users clicking on an ad. The clickthrough rate (CTR) is updated
	// nightly. The ad server CTR is calculated as: (Ad server clicks / Ad
	// server impressions).
	Report_AD_SERVER_CTR Report_Metric = 8
	// Total impressions delivered by the Ad Server.
	Report_AD_SERVER_IMPRESSIONS Report_Metric = 6
	// Ratio of clicks delivered by the Google Ad Manager server in relation to
	// the total clicks delivered.
	Report_AD_SERVER_PERCENT_CLICKS Report_Metric = 12
	// Ratio of impressions delivered by the Google Ad Manager server in
	// relation to the total impressions delivered.
	Report_AD_SERVER_PERCENT_IMPRESSIONS Report_Metric = 11
	// Ratio of revenue generated by the Google Ad Manager server in relation
	// to the total revenue.
	Report_AD_SERVER_PERCENT_REVENUE Report_Metric = 35
	// Ratio of revenue generated by the Google Ad Manager server (excluding
	// CPD) in relation to the total revenue.
	Report_AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD Report_Metric = 13
	// The total number of times that an ad is served by the ad server.
	Report_AD_SERVER_RESPONSES_SERVED Report_Metric = 40
	// All CPM, CPC, and CPD revenue earned, calculated in your network's
	// currency, for the ads delivered by the Google Ad Manager server.
	// Sum of all booked revenue.
	Report_AD_SERVER_REVENUE Report_Metric = 33
	// Revenue (excluding CPD) earned, calculated in your network's currency,
	// for the ads delivered by the Google Ad Manager server. Sum of all booked
	// revenue.
	Report_AD_SERVER_REVENUE_WITHOUT_CPD Report_Metric = 9
	// Number of winning bids received from Open Bidding buyers, even when the
	// winning bid is placed at the end of a mediation for mobile apps chain.
	Report_AUCTIONS_WON Report_Metric = 80
	// eCPM averaged across the Google Ad Manager server, AdSense,
	// and Ad Exchange.
	Report_AVERAGE_ECPM Report_Metric = 37
	// eCPM averaged across the Google Ad Manager server (excluding CPD),
	// AdSense, and Ad Exchange.
	Report_AVERAGE_ECPM_WITHOUT_CPD Report_Metric = 5
	// Number of bids received from Open Bidding buyers, regardless of whether
	// the returned bid competes in an auction.
	Report_BIDS Report_Metric = 81
	// Number of bids received from Open Bidding buyers that competed in
	// the auction.
	Report_BIDS_IN_AUCTION Report_Metric = 82
	// Number of times a yield partner is asked to return bid to fill
	// a yield group request.
	Report_CALLOUTS Report_Metric = 83
	// The number of times a user clicked on an ad.
	Report_CLICKS Report_Metric = 2
	// The total number of times that the code for an ad is served by the ad
	// server including dynamic allocation.
	Report_CODE_SERVED_COUNT Report_Metric = 44
	// For standard ads, your ad clickthrough rate (CTR) is the number of ad
	//
	//	clicks divided by the number of individual ad impressions expressed as a
	//	fraction. Ad CTR = Clicks / Ad impressions.
	Report_CTR Report_Metric = 3
	// The number of coviewed impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS Report_Metric = 129
	// The number of auction impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_AUCTION_IMPRESSIONS Report_Metric = 128
	// The number of coviewed impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_COVIEWED_IMPRESSIONS Report_Metric = 131
	// The number of impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_IMPRESSIONS Report_Metric = 130
	// The number of coviewed impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS Report_Metric = 127
	// The number of reservation impressions sold by Google in partner sales.
	Report_GOOGLE_SOLD_RESERVATION_IMPRESSIONS Report_Metric = 126
	// Total impressions from the Google Ad Manager server, AdSense,
	// Ad Exchange, and yield group partners.
	Report_IMPRESSIONS Report_Metric = 1
	// The number of filled pod requests (filled by partner or Google) in
	// partner sales.
	Report_PARTNER_SALES_FILLED_POD_REQUESTS Report_Metric = 135
	// The percent of filled requests to total ad requests in
	// partner sales.
	Report_PARTNER_SALES_FILL_RATE Report_Metric = 136
	// The percent of partner filled requests to total ad requests
	// in partner sales.
	Report_PARTNER_SALES_PARTNER_MATCH_RATE Report_Metric = 137
	// The number of queries eligible for partner sales.
	Report_PARTNER_SALES_QUERIES Report_Metric = 132
	// The number of partner unfilled impressions in partner sales.
	// If a pod request is not filled by partner but filled by Google, this
	// metric will still count 1.
	Report_PARTNER_SALES_UNFILLED_IMPRESSIONS Report_Metric = 133
	// The number of partner unmatched queries in partner sales.
	// If an ad request is not filled by partner but filled by Google, this
	// metric will still count 1.
	Report_PARTNER_SALES_UNMATCHED_QUERIES Report_Metric = 134
	// The number of code served sold by partner in partner sales.
	Report_PARTNER_SOLD_CODE_SERVED Report_Metric = 125
	// The number of coviewed impressions sold by partner in partner sales.
	Report_PARTNER_SOLD_COVIEWED_IMPRESSIONS Report_Metric = 124
	// The number of impressions sold by partner in partner sales.
	Report_PARTNER_SOLD_IMPRESSIONS Report_Metric = 123
	// The total number of ad requests eligible for programmatic inventory,
	// including Programmatic Guaranteed, Preferred Deals, backfill, and open
	// auction.
	Report_PROGRAMMATIC_ELIGIBLE_AD_REQUESTS Report_Metric = 177
	// The number of programmatic responses served divided by the number of
	// programmatic eligible ad requests. Includes Ad Exchange, Open Bidding,
	// and Preferred Deals.
	Report_PROGRAMMATIC_MATCH_RATE Report_Metric = 178
	// Total number of ad responses served from programmatic demand sources.
	// Includes Ad Exchange, Open Bidding, and Preferred Deals.
	//
	// Differs from AD_EXCHANGE_RESPONSES_SERVED, which doesn't include Open
	// Bidding ad requests.
	Report_PROGRAMMATIC_RESPONSES_SERVED Report_Metric = 176
	// The total number of times that an ad is served by the ad server including
	// dynamic allocation.
	Report_RESPONSES_SERVED Report_Metric = 39
	// Total amount of CPM, CPC, and CPD revenue based on the number of units
	// served by the Google Ad Manager server, AdSense, Ad Exchange, and
	// third-party Mediation networks.
	Report_REVENUE Report_Metric = 36
	// Total amount of revenue (excluding CPD) based on the number of units
	// served by the Google Ad Manager server, AdSense, Ad Exchange, and
	// third-party Mediation networks.
	Report_REVENUE_WITHOUT_CPD Report_Metric = 4
	// Number of times a yield group buyer successfully returned a bid in
	// response to a yield group callout.
	Report_SUCCESSFUL_RESPONSES Report_Metric = 84
	// The total number of missed impressions due to the ad servers' inability
	// to find ads to serve including dynamic allocation.
	Report_UNFILLED_IMPRESSIONS Report_Metric = 45
	// The total number of times that an ad is not returned by the ad server.
	Report_UNMATCHED_AD_REQUESTS Report_Metric = 43
	// Number of times an Offerwall message was shown to users.
	Report_USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN Report_Metric = 121
	// The number of messages where the user gained an entitlement.
	Report_USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS Report_Metric = 122
	// The number of user interactions with a video, on average, such as pause,
	// full screen, mute, etc.
	Report_VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE Report_Metric = 92
	// The number of times a user collapses a video, either to its original size
	// or to a different size.
	Report_VIDEO_INTERACTION_COLLAPSES Report_Metric = 93
	// The number of times a user expands a video.
	Report_VIDEO_INTERACTION_EXPANDS Report_Metric = 95
	// The number of times ad clip played in full screen mode.
	Report_VIDEO_INTERACTION_FULL_SCREENS Report_Metric = 96
	// The number of times video player was in mute state during play of ad
	//
	//	clip.
	Report_VIDEO_INTERACTION_MUTES Report_Metric = 97
	// The number of times user paused ad clip.
	Report_VIDEO_INTERACTION_PAUSES Report_Metric = 98
	// The number of times the user unpaused the video.
	Report_VIDEO_INTERACTION_RESUMES Report_Metric = 99
	// The number of times a user rewinds the video.
	Report_VIDEO_INTERACTION_REWINDS Report_Metric = 100
	// The number of times a user unmutes the video.
	Report_VIDEO_INTERACTION_UNMUTES Report_Metric = 101
	// The number of times a skippable video is skipped.
	Report_VIDEO_INTERACTION_VIDEO_SKIPS Report_Metric = 102
	// The number of total creative serves in video realtime reporting.
	Report_VIDEO_REAL_TIME_CREATIVE_SERVES Report_Metric = 139
	// The number of errors of type 100 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_100_COUNT Report_Metric = 143
	// The number of errors of type 101 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_101_COUNT Report_Metric = 144
	// The number of errors of type 102 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_102_COUNT Report_Metric = 145
	// The number of errors of type 200 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_200_COUNT Report_Metric = 146
	// The number of errors of type 201 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_201_COUNT Report_Metric = 147
	// The number of errors of type 202 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_202_COUNT Report_Metric = 148
	// The number of errors of type 203 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_203_COUNT Report_Metric = 149
	// The number of errors of type 300 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_300_COUNT Report_Metric = 150
	// The number of errors of type 301 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_301_COUNT Report_Metric = 151
	// The number of errors of type 302 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_302_COUNT Report_Metric = 152
	// The number of errors of type 303 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_303_COUNT Report_Metric = 153
	// The number of errors of type 400 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_400_COUNT Report_Metric = 154
	// The number of errors of type 401 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_401_COUNT Report_Metric = 155
	// The number of errors of type 402 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_402_COUNT Report_Metric = 156
	// The number of errors of type 403 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_403_COUNT Report_Metric = 157
	// The number of errors of type 405 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_405_COUNT Report_Metric = 158
	// The number of errors of type 406 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_406_COUNT Report_Metric = 159
	// The number of errors of type 407 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_407_COUNT Report_Metric = 160
	// The number of errors of type 408 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_408_COUNT Report_Metric = 161
	// The number of errors of type 409 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_409_COUNT Report_Metric = 162
	// The number of errors of type 410 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_410_COUNT Report_Metric = 163
	// The number of errors of type 500 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_500_COUNT Report_Metric = 164
	// The number of errors of type 501 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_501_COUNT Report_Metric = 165
	// The number of errors of type 502 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_502_COUNT Report_Metric = 166
	// The number of errors of type 503 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_503_COUNT Report_Metric = 167
	// The number of errors of type 600 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_600_COUNT Report_Metric = 168
	// The number of errors of type 601 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_601_COUNT Report_Metric = 169
	// The number of errors of type 602 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_602_COUNT Report_Metric = 170
	// The number of errors of type 603 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_603_COUNT Report_Metric = 171
	// The number of errors of type 604 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_604_COUNT Report_Metric = 172
	// The number of errors of type 900 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_900_COUNT Report_Metric = 173
	// The number of errors of type 901 in video realtime reporting.
	Report_VIDEO_REAL_TIME_ERROR_901_COUNT Report_Metric = 174
	// The number of total impressions in video realtime reporting.
	Report_VIDEO_REAL_TIME_IMPRESSIONS Report_Metric = 138
	// The number of matched queries in video realtime reporting.
	Report_VIDEO_REAL_TIME_MATCHED_QUERIES Report_Metric = 140
	// The number of all errors in video realtime reporting.
	Report_VIDEO_REAL_TIME_TOTAL_ERROR_COUNT Report_Metric = 175
	// The number of total queries in video realtime reporting.
	Report_VIDEO_REAL_TIME_TOTAL_QUERIES Report_Metric = 142
	// The number of unmatched queries in video realtime reporting.
	Report_VIDEO_REAL_TIME_UNMATCHED_QUERIES Report_Metric = 141
	// Number of times that the publisher specified a video ad played
	// automatically.
	Report_VIDEO_VIEWERSHIP_AUTO_PLAYS Report_Metric = 103
	// Average percentage of the video watched by users.
	Report_VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE Report_Metric = 104
	// Average time(seconds) users watched the video.
	Report_VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME Report_Metric = 105
	// Number of times that the publisher specified a video ad was clicked to
	// play.
	Report_VIDEO_VIEWERSHIP_CLICK_TO_PLAYS Report_Metric = 106
	// The number of times the video played to completion.
	Report_VIDEO_VIEWERSHIP_COMPLETES Report_Metric = 107
	// Percentage of times the video played to the end.
	Report_VIDEO_VIEWERSHIP_COMPLETION_RATE Report_Metric = 108
	// The number of engaged views: ad is viewed to completion or for 30s,
	// whichever comes first.
	Report_VIDEO_VIEWERSHIP_ENGAGED_VIEWS Report_Metric = 109
	// The number of times the video played to 25% of its length.
	Report_VIDEO_VIEWERSHIP_FIRST_QUARTILES Report_Metric = 110
	// The number of times the video reached its midpoint during play.
	Report_VIDEO_VIEWERSHIP_MIDPOINTS Report_Metric = 111
	// The number of times a skip button is shown in video.
	Report_VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN Report_Metric = 112
	// The number of impressions where the video was played.
	Report_VIDEO_VIEWERSHIP_STARTS Report_Metric = 113
	// The number of times the video played to 75% of its length.
	Report_VIDEO_VIEWERSHIP_THIRD_QUARTILES Report_Metric = 114
	// The number of times an error occurred, such as a VAST redirect error, a
	// video playback error, or an invalid response error.
	Report_VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT Report_Metric = 115
	// The percentage of video error count.
	Report_VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE Report_Metric = 94
	// Duration of the video creative.
	Report_VIDEO_VIEWERSHIP_VIDEO_LENGTH Report_Metric = 116
	// View-through rate represented as a percentage.
	Report_VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE Report_Metric = 117
	// The estimated net rate for yield groups or individual
	// yield group partners.
	Report_YIELD_GROUP_ESTIMATED_CPM Report_Metric = 88
	// Total net revenue earned by a yield group, based upon the yield group
	// estimated CPM and yield group impressions recorded.
	Report_YIELD_GROUP_ESTIMATED_REVENUE Report_Metric = 87
	// Number of matched yield group requests where a yield partner delivered
	// their ad to publisher inventory.
	Report_YIELD_GROUP_IMPRESSIONS Report_Metric = 85
	// Yield group Mediation fill rate indicating how often a network
	// fills an ad request.
	Report_YIELD_GROUP_MEDIATION_FILL_RATE Report_Metric = 89
	// Total requests where a Mediation chain was served.
	Report_YIELD_GROUP_MEDIATION_MATCHED_QUERIES Report_Metric = 86
	// The number of mediation chain passback across all channels.
	Report_YIELD_GROUP_MEDIATION_PASSBACKS Report_Metric = 118
	// Revenue per thousand impressions based on data collected by Ad Manager
	// from third-party ad network reports.
	Report_YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM Report_Metric = 90
)

// Enum value maps for Report_Metric.
var (
	Report_Metric_name = map[int32]string{
		0:   "METRIC_UNSPECIFIED",
		61:  "ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME",
		58:  "ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS",
		57:  "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS",
		60:  "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE",
		56:  "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS",
		59:  "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE",
		73:  "ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME",
		70:  "ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS",
		69:  "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS",
		72:  "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE",
		68:  "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS",
		71:  "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE",
		26:  "ADSENSE_AVERAGE_ECPM",
		23:  "ADSENSE_CLICKS",
		24:  "ADSENSE_CTR",
		22:  "ADSENSE_IMPRESSIONS",
		28:  "ADSENSE_PERCENT_CLICKS",
		27:  "ADSENSE_PERCENT_IMPRESSIONS",
		29:  "ADSENSE_PERCENT_REVENUE",
		30:  "ADSENSE_PERCENT_REVENUE_WITHOUT_CPD",
		41:  "ADSENSE_RESPONSES_SERVED",
		25:  "ADSENSE_REVENUE",
		79:  "AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME",
		76:  "AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS",
		75:  "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS",
		78:  "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE",
		74:  "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS",
		77:  "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE",
		18:  "AD_EXCHANGE_AVERAGE_ECPM",
		15:  "AD_EXCHANGE_CLICKS",
		16:  "AD_EXCHANGE_CTR",
		14:  "AD_EXCHANGE_IMPRESSIONS",
		20:  "AD_EXCHANGE_PERCENT_CLICKS",
		19:  "AD_EXCHANGE_PERCENT_IMPRESSIONS",
		21:  "AD_EXCHANGE_PERCENT_REVENUE",
		31:  "AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD",
		42:  "AD_EXCHANGE_RESPONSES_SERVED",
		17:  "AD_EXCHANGE_REVENUE",
		38:  "AD_REQUESTS",
		67:  "AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME",
		64:  "AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS",
		63:  "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS",
		66:  "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE",
		62:  "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS",
		65:  "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE",
		34:  "AD_SERVER_AVERAGE_ECPM",
		10:  "AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD",
		7:   "AD_SERVER_CLICKS",
		32:  "AD_SERVER_CPD_REVENUE",
		8:   "AD_SERVER_CTR",
		6:   "AD_SERVER_IMPRESSIONS",
		12:  "AD_SERVER_PERCENT_CLICKS",
		11:  "AD_SERVER_PERCENT_IMPRESSIONS",
		35:  "AD_SERVER_PERCENT_REVENUE",
		13:  "AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD",
		40:  "AD_SERVER_RESPONSES_SERVED",
		33:  "AD_SERVER_REVENUE",
		9:   "AD_SERVER_REVENUE_WITHOUT_CPD",
		80:  "AUCTIONS_WON",
		37:  "AVERAGE_ECPM",
		5:   "AVERAGE_ECPM_WITHOUT_CPD",
		81:  "BIDS",
		82:  "BIDS_IN_AUCTION",
		83:  "CALLOUTS",
		2:   "CLICKS",
		44:  "CODE_SERVED_COUNT",
		3:   "CTR",
		129: "GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS",
		128: "GOOGLE_SOLD_AUCTION_IMPRESSIONS",
		131: "GOOGLE_SOLD_COVIEWED_IMPRESSIONS",
		130: "GOOGLE_SOLD_IMPRESSIONS",
		127: "GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS",
		126: "GOOGLE_SOLD_RESERVATION_IMPRESSIONS",
		1:   "IMPRESSIONS",
		135: "PARTNER_SALES_FILLED_POD_REQUESTS",
		136: "PARTNER_SALES_FILL_RATE",
		137: "PARTNER_SALES_PARTNER_MATCH_RATE",
		132: "PARTNER_SALES_QUERIES",
		133: "PARTNER_SALES_UNFILLED_IMPRESSIONS",
		134: "PARTNER_SALES_UNMATCHED_QUERIES",
		125: "PARTNER_SOLD_CODE_SERVED",
		124: "PARTNER_SOLD_COVIEWED_IMPRESSIONS",
		123: "PARTNER_SOLD_IMPRESSIONS",
		177: "PROGRAMMATIC_ELIGIBLE_AD_REQUESTS",
		178: "PROGRAMMATIC_MATCH_RATE",
		176: "PROGRAMMATIC_RESPONSES_SERVED",
		39:  "RESPONSES_SERVED",
		36:  "REVENUE",
		4:   "REVENUE_WITHOUT_CPD",
		84:  "SUCCESSFUL_RESPONSES",
		45:  "UNFILLED_IMPRESSIONS",
		43:  "UNMATCHED_AD_REQUESTS",
		121: "USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN",
		122: "USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS",
		92:  "VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE",
		93:  "VIDEO_INTERACTION_COLLAPSES",
		95:  "VIDEO_INTERACTION_EXPANDS",
		96:  "VIDEO_INTERACTION_FULL_SCREENS",
		97:  "VIDEO_INTERACTION_MUTES",
		98:  "VIDEO_INTERACTION_PAUSES",
		99:  "VIDEO_INTERACTION_RESUMES",
		100: "VIDEO_INTERACTION_REWINDS",
		101: "VIDEO_INTERACTION_UNMUTES",
		102: "VIDEO_INTERACTION_VIDEO_SKIPS",
		139: "VIDEO_REAL_TIME_CREATIVE_SERVES",
		143: "VIDEO_REAL_TIME_ERROR_100_COUNT",
		144: "VIDEO_REAL_TIME_ERROR_101_COUNT",
		145: "VIDEO_REAL_TIME_ERROR_102_COUNT",
		146: "VIDEO_REAL_TIME_ERROR_200_COUNT",
		147: "VIDEO_REAL_TIME_ERROR_201_COUNT",
		148: "VIDEO_REAL_TIME_ERROR_202_COUNT",
		149: "VIDEO_REAL_TIME_ERROR_203_COUNT",
		150: "VIDEO_REAL_TIME_ERROR_300_COUNT",
		151: "VIDEO_REAL_TIME_ERROR_301_COUNT",
		152: "VIDEO_REAL_TIME_ERROR_302_COUNT",
		153: "VIDEO_REAL_TIME_ERROR_303_COUNT",
		154: "VIDEO_REAL_TIME_ERROR_400_COUNT",
		155: "VIDEO_REAL_TIME_ERROR_401_COUNT",
		156: "VIDEO_REAL_TIME_ERROR_402_COUNT",
		157: "VIDEO_REAL_TIME_ERROR_403_COUNT",
		158: "VIDEO_REAL_TIME_ERROR_405_COUNT",
		159: "VIDEO_REAL_TIME_ERROR_406_COUNT",
		160: "VIDEO_REAL_TIME_ERROR_407_COUNT",
		161: "VIDEO_REAL_TIME_ERROR_408_COUNT",
		162: "VIDEO_REAL_TIME_ERROR_409_COUNT",
		163: "VIDEO_REAL_TIME_ERROR_410_COUNT",
		164: "VIDEO_REAL_TIME_ERROR_500_COUNT",
		165: "VIDEO_REAL_TIME_ERROR_501_COUNT",
		166: "VIDEO_REAL_TIME_ERROR_502_COUNT",
		167: "VIDEO_REAL_TIME_ERROR_503_COUNT",
		168: "VIDEO_REAL_TIME_ERROR_600_COUNT",
		169: "VIDEO_REAL_TIME_ERROR_601_COUNT",
		170: "VIDEO_REAL_TIME_ERROR_602_COUNT",
		171: "VIDEO_REAL_TIME_ERROR_603_COUNT",
		172: "VIDEO_REAL_TIME_ERROR_604_COUNT",
		173: "VIDEO_REAL_TIME_ERROR_900_COUNT",
		174: "VIDEO_REAL_TIME_ERROR_901_COUNT",
		138: "VIDEO_REAL_TIME_IMPRESSIONS",
		140: "VIDEO_REAL_TIME_MATCHED_QUERIES",
		175: "VIDEO_REAL_TIME_TOTAL_ERROR_COUNT",
		142: "VIDEO_REAL_TIME_TOTAL_QUERIES",
		141: "VIDEO_REAL_TIME_UNMATCHED_QUERIES",
		103: "VIDEO_VIEWERSHIP_AUTO_PLAYS",
		104: "VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE",
		105: "VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME",
		106: "VIDEO_VIEWERSHIP_CLICK_TO_PLAYS",
		107: "VIDEO_VIEWERSHIP_COMPLETES",
		108: "VIDEO_VIEWERSHIP_COMPLETION_RATE",
		109: "VIDEO_VIEWERSHIP_ENGAGED_VIEWS",
		110: "VIDEO_VIEWERSHIP_FIRST_QUARTILES",
		111: "VIDEO_VIEWERSHIP_MIDPOINTS",
		112: "VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN",
		113: "VIDEO_VIEWERSHIP_STARTS",
		114: "VIDEO_VIEWERSHIP_THIRD_QUARTILES",
		115: "VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT",
		94:  "VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE",
		116: "VIDEO_VIEWERSHIP_VIDEO_LENGTH",
		117: "VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE",
		88:  "YIELD_GROUP_ESTIMATED_CPM",
		87:  "YIELD_GROUP_ESTIMATED_REVENUE",
		85:  "YIELD_GROUP_IMPRESSIONS",
		89:  "YIELD_GROUP_MEDIATION_FILL_RATE",
		86:  "YIELD_GROUP_MEDIATION_MATCHED_QUERIES",
		118: "YIELD_GROUP_MEDIATION_PASSBACKS",
		90:  "YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM",
	}
	Report_Metric_value = map[string]int32{
		"METRIC_UNSPECIFIED":                                  0,
		"ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME":                   61,
		"ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS":                    58,
		"ACTIVE_VIEW_MEASURABLE_IMPRESSIONS":                  57,
		"ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE":             60,
		"ACTIVE_VIEW_VIEWABLE_IMPRESSIONS":                    56,
		"ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE":               59,
		"ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME":           73,
		"ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS":            70,
		"ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS":          69,
		"ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE":     72,
		"ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS":            68,
		"ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE":       71,
		"ADSENSE_AVERAGE_ECPM":                                26,
		"ADSENSE_CLICKS":                                      23,
		"ADSENSE_CTR":                                         24,
		"ADSENSE_IMPRESSIONS":                                 22,
		"ADSENSE_PERCENT_CLICKS":                              28,
		"ADSENSE_PERCENT_IMPRESSIONS":                         27,
		"ADSENSE_PERCENT_REVENUE":                             29,
		"ADSENSE_PERCENT_REVENUE_WITHOUT_CPD":                 30,
		"ADSENSE_RESPONSES_SERVED":                            41,
		"ADSENSE_REVENUE":                                     25,
		"AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME":       79,
		"AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS":        76,
		"AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS":      75,
		"AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE": 78,
		"AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS":        74,
		"AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE":   77,
		"AD_EXCHANGE_AVERAGE_ECPM":                            18,
		"AD_EXCHANGE_CLICKS":                                  15,
		"AD_EXCHANGE_CTR":                                     16,
		"AD_EXCHANGE_IMPRESSIONS":                             14,
		"AD_EXCHANGE_PERCENT_CLICKS":                          20,
		"AD_EXCHANGE_PERCENT_IMPRESSIONS":                     19,
		"AD_EXCHANGE_PERCENT_REVENUE":                         21,
		"AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD":             31,
		"AD_EXCHANGE_RESPONSES_SERVED":                        42,
		"AD_EXCHANGE_REVENUE":                                 17,
		"AD_REQUESTS":                                         38,
		"AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME":         67,
		"AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS":          64,
		"AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS":        63,
		"AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE":   66,
		"AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS":          62,
		"AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE":     65,
		"AD_SERVER_AVERAGE_ECPM":                              34,
		"AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD":                  10,
		"AD_SERVER_CLICKS":                                    7,
		"AD_SERVER_CPD_REVENUE":                               32,
		"AD_SERVER_CTR":                                       8,
		"AD_SERVER_IMPRESSIONS":                               6,
		"AD_SERVER_PERCENT_CLICKS":                            12,
		"AD_SERVER_PERCENT_IMPRESSIONS":                       11,
		"AD_SERVER_PERCENT_REVENUE":                           35,
		"AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD":               13,
		"AD_SERVER_RESPONSES_SERVED":                          40,
		"AD_SERVER_REVENUE":                                   33,
		"AD_SERVER_REVENUE_WITHOUT_CPD":                       9,
		"AUCTIONS_WON":                                        80,
		"AVERAGE_ECPM":                                        37,
		"AVERAGE_ECPM_WITHOUT_CPD":                            5,
		"BIDS":                                                81,
		"BIDS_IN_AUCTION":                                     82,
		"CALLOUTS":                                            83,
		"CLICKS":                                              2,
		"CODE_SERVED_COUNT":                                   44,
		"CTR":                                                 3,
		"GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS":            129,
		"GOOGLE_SOLD_AUCTION_IMPRESSIONS":                     128,
		"GOOGLE_SOLD_COVIEWED_IMPRESSIONS":                    131,
		"GOOGLE_SOLD_IMPRESSIONS":                             130,
		"GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS":        127,
		"GOOGLE_SOLD_RESERVATION_IMPRESSIONS":                 126,
		"IMPRESSIONS":                                         1,
		"PARTNER_SALES_FILLED_POD_REQUESTS":                   135,
		"PARTNER_SALES_FILL_RATE":                             136,
		"PARTNER_SALES_PARTNER_MATCH_RATE":                    137,
		"PARTNER_SALES_QUERIES":                               132,
		"PARTNER_SALES_UNFILLED_IMPRESSIONS":                  133,
		"PARTNER_SALES_UNMATCHED_QUERIES":                     134,
		"PARTNER_SOLD_CODE_SERVED":                            125,
		"PARTNER_SOLD_COVIEWED_IMPRESSIONS":                   124,
		"PARTNER_SOLD_IMPRESSIONS":                            123,
		"PROGRAMMATIC_ELIGIBLE_AD_REQUESTS":                   177,
		"PROGRAMMATIC_MATCH_RATE":                             178,
		"PROGRAMMATIC_RESPONSES_SERVED":                       176,
		"RESPONSES_SERVED":                                    39,
		"REVENUE":                                             36,
		"REVENUE_WITHOUT_CPD":                                 4,
		"SUCCESSFUL_RESPONSES":                                84,
		"UNFILLED_IMPRESSIONS":                                45,
		"UNMATCHED_AD_REQUESTS":                               43,
		"USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN":              121,
		"USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS":      122,
		"VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE":          92,
		"VIDEO_INTERACTION_COLLAPSES":                         93,
		"VIDEO_INTERACTION_EXPANDS":                           95,
		"VIDEO_INTERACTION_FULL_SCREENS":                      96,
		"VIDEO_INTERACTION_MUTES":                             97,
		"VIDEO_INTERACTION_PAUSES":                            98,
		"VIDEO_INTERACTION_RESUMES":                           99,
		"VIDEO_INTERACTION_REWINDS":                           100,
		"VIDEO_INTERACTION_UNMUTES":                           101,
		"VIDEO_INTERACTION_VIDEO_SKIPS":                       102,
		"VIDEO_REAL_TIME_CREATIVE_SERVES":                     139,
		"VIDEO_REAL_TIME_ERROR_100_COUNT":                     143,
		"VIDEO_REAL_TIME_ERROR_101_COUNT":                     144,
		"VIDEO_REAL_TIME_ERROR_102_COUNT":                     145,
		"VIDEO_REAL_TIME_ERROR_200_COUNT":                     146,
		"VIDEO_REAL_TIME_ERROR_201_COUNT":                     147,
		"VIDEO_REAL_TIME_ERROR_202_COUNT":                     148,
		"VIDEO_REAL_TIME_ERROR_203_COUNT":                     149,
		"VIDEO_REAL_TIME_ERROR_300_COUNT":                     150,
		"VIDEO_REAL_TIME_ERROR_301_COUNT":                     151,
		"VIDEO_REAL_TIME_ERROR_302_COUNT":                     152,
		"VIDEO_REAL_TIME_ERROR_303_COUNT":                     153,
		"VIDEO_REAL_TIME_ERROR_400_COUNT":                     154,
		"VIDEO_REAL_TIME_ERROR_401_COUNT":                     155,
		"VIDEO_REAL_TIME_ERROR_402_COUNT":                     156,
		"VIDEO_REAL_TIME_ERROR_403_COUNT":                     157,
		"VIDEO_REAL_TIME_ERROR_405_COUNT":                     158,
		"VIDEO_REAL_TIME_ERROR_406_COUNT":                     159,
		"VIDEO_REAL_TIME_ERROR_407_COUNT":                     160,
		"VIDEO_REAL_TIME_ERROR_408_COUNT":                     161,
		"VIDEO_REAL_TIME_ERROR_409_COUNT":                     162,
		"VIDEO_REAL_TIME_ERROR_410_COUNT":                     163,
		"VIDEO_REAL_TIME_ERROR_500_COUNT":                     164,
		"VIDEO_REAL_TIME_ERROR_501_COUNT":                     165,
		"VIDEO_REAL_TIME_ERROR_502_COUNT":                     166,
		"VIDEO_REAL_TIME_ERROR_503_COUNT":                     167,
		"VIDEO_REAL_TIME_ERROR_600_COUNT":                     168,
		"VIDEO_REAL_TIME_ERROR_601_COUNT":                     169,
		"VIDEO_REAL_TIME_ERROR_602_COUNT":                     170,
		"VIDEO_REAL_TIME_ERROR_603_COUNT":                     171,
		"VIDEO_REAL_TIME_ERROR_604_COUNT":                     172,
		"VIDEO_REAL_TIME_ERROR_900_COUNT":                     173,
		"VIDEO_REAL_TIME_ERROR_901_COUNT":                     174,
		"VIDEO_REAL_TIME_IMPRESSIONS":                         138,
		"VIDEO_REAL_TIME_MATCHED_QUERIES":                     140,
		"VIDEO_REAL_TIME_TOTAL_ERROR_COUNT":                   175,
		"VIDEO_REAL_TIME_TOTAL_QUERIES":                       142,
		"VIDEO_REAL_TIME_UNMATCHED_QUERIES":                   141,
		"VIDEO_VIEWERSHIP_AUTO_PLAYS":                         103,
		"VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE":                  104,
		"VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME":                  105,
		"VIDEO_VIEWERSHIP_CLICK_TO_PLAYS":                     106,
		"VIDEO_VIEWERSHIP_COMPLETES":                          107,
		"VIDEO_VIEWERSHIP_COMPLETION_RATE":                    108,
		"VIDEO_VIEWERSHIP_ENGAGED_VIEWS":                      109,
		"VIDEO_VIEWERSHIP_FIRST_QUARTILES":                    110,
		"VIDEO_VIEWERSHIP_MIDPOINTS":                          111,
		"VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN":                 112,
		"VIDEO_VIEWERSHIP_STARTS":                             113,
		"VIDEO_VIEWERSHIP_THIRD_QUARTILES":                    114,
		"VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT":                  115,
		"VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE":                   94,
		"VIDEO_VIEWERSHIP_VIDEO_LENGTH":                       116,
		"VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE":                  117,
		"YIELD_GROUP_ESTIMATED_CPM":                           88,
		"YIELD_GROUP_ESTIMATED_REVENUE":                       87,
		"YIELD_GROUP_IMPRESSIONS":                             85,
		"YIELD_GROUP_MEDIATION_FILL_RATE":                     89,
		"YIELD_GROUP_MEDIATION_MATCHED_QUERIES":               86,
		"YIELD_GROUP_MEDIATION_PASSBACKS":                     118,
		"YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM":              90,
	}
)

func (x Report_Metric) Enum() *Report_Metric {
	p := new(Report_Metric)
	*p = x
	return p
}

func (x Report_Metric) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Metric) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[2].Descriptor()
}

func (Report_Metric) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[2]
}

func (x Report_Metric) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Metric.Descriptor instead.
func (Report_Metric) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 2}
}

// Possible metric value types to add.
type Report_MetricValueType int32

const (
	// The values for the primary date_range.
	Report_PRIMARY Report_MetricValueType = 0
	// Each metrics' percent of the total for the primary date_range.
	Report_PRIMARY_PERCENT_OF_TOTAL Report_MetricValueType = 1
	// The values for the comparison_date_range.
	Report_COMPARISON Report_MetricValueType = 2
	// Each metrics' percent of the total for the comparison_date_range.
	Report_COMPARISON_PERCENT_OF_TOTAL Report_MetricValueType = 3
	// The absolute change between the primary and comparison date ranges.
	Report_ABSOLUTE_CHANGE Report_MetricValueType = 4
	// The relative change between the primary and comparison date ranges.
	Report_RELATIVE_CHANGE Report_MetricValueType = 5
)

// Enum value maps for Report_MetricValueType.
var (
	Report_MetricValueType_name = map[int32]string{
		0: "PRIMARY",
		1: "PRIMARY_PERCENT_OF_TOTAL",
		2: "COMPARISON",
		3: "COMPARISON_PERCENT_OF_TOTAL",
		4: "ABSOLUTE_CHANGE",
		5: "RELATIVE_CHANGE",
	}
	Report_MetricValueType_value = map[string]int32{
		"PRIMARY":                     0,
		"PRIMARY_PERCENT_OF_TOTAL":    1,
		"COMPARISON":                  2,
		"COMPARISON_PERCENT_OF_TOTAL": 3,
		"ABSOLUTE_CHANGE":             4,
		"RELATIVE_CHANGE":             5,
	}
)

func (x Report_MetricValueType) Enum() *Report_MetricValueType {
	p := new(Report_MetricValueType)
	*p = x
	return p
}

func (x Report_MetricValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_MetricValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[3].Descriptor()
}

func (Report_MetricValueType) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[3]
}

func (x Report_MetricValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_MetricValueType.Descriptor instead.
func (Report_MetricValueType) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 3}
}

// Supported report types.
type Report_ReportType int32

const (
	// Default value. This value is unused.
	Report_REPORT_TYPE_UNSPECIFIED Report_ReportType = 0
	// Historical.
	Report_HISTORICAL Report_ReportType = 1
)

// Enum value maps for Report_ReportType.
var (
	Report_ReportType_name = map[int32]string{
		0: "REPORT_TYPE_UNSPECIFIED",
		1: "HISTORICAL",
	}
	Report_ReportType_value = map[string]int32{
		"REPORT_TYPE_UNSPECIFIED": 0,
		"HISTORICAL":              1,
	}
)

func (x Report_ReportType) Enum() *Report_ReportType {
	p := new(Report_ReportType)
	*p = x
	return p
}

func (x Report_ReportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_ReportType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[4].Descriptor()
}

func (Report_ReportType) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[4]
}

func (x Report_ReportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_ReportType.Descriptor instead.
func (Report_ReportType) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 4}
}

// The visibility of a report.
type Report_Visibility int32

const (
	// Default value. Reports with hidden visibility will not appear in the Ad
	// Manager UI.
	Report_HIDDEN Report_Visibility = 0
	// Reports with draft visibility will appear in the Ad Manager UI only if
	// the user has configured the UI to show them.
	Report_DRAFT Report_Visibility = 1
	// Reports with saved visibility will appear in the Ad Manager UI by
	// default.
	Report_SAVED Report_Visibility = 2
)

// Enum value maps for Report_Visibility.
var (
	Report_Visibility_name = map[int32]string{
		0: "HIDDEN",
		1: "DRAFT",
		2: "SAVED",
	}
	Report_Visibility_value = map[string]int32{
		"HIDDEN": 0,
		"DRAFT":  1,
		"SAVED":  2,
	}
)

func (x Report_Visibility) Enum() *Report_Visibility {
	p := new(Report_Visibility)
	*p = x
	return p
}

func (x Report_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[5].Descriptor()
}

func (Report_Visibility) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[5]
}

func (x Report_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Visibility.Descriptor instead.
func (Report_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 5}
}

// Supported filter operations.
type Report_Filter_Operation int32

const (
	// For scalar operands, checks if the operand is in the set of provided
	// filter values.
	//
	// For list operands, checks if any element in the operand is in the set
	// of provided filter values.
	//
	// Default value.
	Report_Filter_IN Report_Filter_Operation = 0
	// For scalar operands, checks that the operand is not in the set of
	// provided filter values.
	//
	// For list operands, checks that none of the elements in the operand
	// is in the set of provided filter values.
	Report_Filter_NOT_IN Report_Filter_Operation = 1
	// For scalar string operands, checks if the operand contains any of the
	// provided filter substrings.
	//
	// For string list operands, checks if any string in the operand contains
	// any of the provided filter substrings.
	Report_Filter_CONTAINS Report_Filter_Operation = 2
	// For scalar string operands, checks that the operand contains none of
	// the provided filter substrings.
	//
	// For string list operands, checks that none of the strings in the
	// operand contain none of the provided filter substrings.
	Report_Filter_NOT_CONTAINS Report_Filter_Operation = 3
	// Operand is less than the provided filter value.
	Report_Filter_LESS_THAN Report_Filter_Operation = 4
	// Operand is less than or equal to provided filter value.
	Report_Filter_LESS_THAN_EQUALS Report_Filter_Operation = 5
	// Operand is greater than provided filter value.
	Report_Filter_GREATER_THAN Report_Filter_Operation = 6
	// Operand is greater than or equal to provided filter value.
	Report_Filter_GREATER_THAN_EQUALS Report_Filter_Operation = 7
	// Operand is between provided filter values.
	Report_Filter_BETWEEN Report_Filter_Operation = 8
	// Operand matches against a regex or set of regexes (one must match)
	Report_Filter_MATCHES Report_Filter_Operation = 9
	// Operand negative matches against a regex or set of regexes (none must
	// match)
	Report_Filter_NOT_MATCHES Report_Filter_Operation = 10
)

// Enum value maps for Report_Filter_Operation.
var (
	Report_Filter_Operation_name = map[int32]string{
		0:  "IN",
		1:  "NOT_IN",
		2:  "CONTAINS",
		3:  "NOT_CONTAINS",
		4:  "LESS_THAN",
		5:  "LESS_THAN_EQUALS",
		6:  "GREATER_THAN",
		7:  "GREATER_THAN_EQUALS",
		8:  "BETWEEN",
		9:  "MATCHES",
		10: "NOT_MATCHES",
	}
	Report_Filter_Operation_value = map[string]int32{
		"IN":                  0,
		"NOT_IN":              1,
		"CONTAINS":            2,
		"NOT_CONTAINS":        3,
		"LESS_THAN":           4,
		"LESS_THAN_EQUALS":    5,
		"GREATER_THAN":        6,
		"GREATER_THAN_EQUALS": 7,
		"BETWEEN":             8,
		"MATCHES":             9,
		"NOT_MATCHES":         10,
	}
)

func (x Report_Filter_Operation) Enum() *Report_Filter_Operation {
	p := new(Report_Filter_Operation)
	*p = x
	return p
}

func (x Report_Filter_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_Filter_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[6].Descriptor()
}

func (Report_Filter_Operation) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[6]
}

func (x Report_Filter_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_Filter_Operation.Descriptor instead.
func (Report_Filter_Operation) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 5, 0}
}

// Options for relative date ranges.
type Report_DateRange_RelativeDateRange int32

const (
	// Default value. This value is unused.
	Report_DateRange_RELATIVE_DATE_RANGE_UNSPECIFIED Report_DateRange_RelativeDateRange = 0
	// The date the report is run.
	Report_DateRange_TODAY Report_DateRange_RelativeDateRange = 1
	// The date a day before the date that the report is run.
	Report_DateRange_YESTERDAY Report_DateRange_RelativeDateRange = 2
	// The full week in which this report is run. Could include dates in
	// the future.
	Report_DateRange_THIS_WEEK Report_DateRange_RelativeDateRange = 3
	// From the beginning of the calendar week (Monday to Sunday) in which the
	// up to and including the day the report is run.
	Report_DateRange_THIS_WEEK_TO_DATE Report_DateRange_RelativeDateRange = 29
	// The full month in which this report is run. Could include dates in
	// the future.
	Report_DateRange_THIS_MONTH Report_DateRange_RelativeDateRange = 4
	// From the beginning of the calendar month in which the report is run, to
	// up to and including the day the report is run.
	Report_DateRange_THIS_MONTH_TO_DATE Report_DateRange_RelativeDateRange = 26
	// The full quarter in which this report is run. Could include dates
	// in the future.
	Report_DateRange_THIS_QUARTER Report_DateRange_RelativeDateRange = 5
	// From the beginning of the calendar quarter in which the report is run,
	// up to and including the day the report is run.
	Report_DateRange_THIS_QUARTER_TO_DATE Report_DateRange_RelativeDateRange = 27
	// The full year in which this report is run. Could include dates in
	// the future.
	Report_DateRange_THIS_YEAR Report_DateRange_RelativeDateRange = 6
	// From the beginning of the calendar year in which the report is run, to
	// up to and including the day the report is run.
	Report_DateRange_THIS_YEAR_TO_DATE Report_DateRange_RelativeDateRange = 28
	// The entire previous calendar week, Monday to Sunday (inclusive),
	// preceding the calendar week the report is run.
	Report_DateRange_LAST_WEEK Report_DateRange_RelativeDateRange = 7
	// The entire previous calendar month preceding the calendar month the
	// report is run.
	Report_DateRange_LAST_MONTH Report_DateRange_RelativeDateRange = 8
	// The entire previous calendar quarter preceding the calendar quarter the
	// report is run.
	Report_DateRange_LAST_QUARTER Report_DateRange_RelativeDateRange = 9
	// The entire previous calendar year preceding the calendar year the
	// report is run.
	Report_DateRange_LAST_YEAR Report_DateRange_RelativeDateRange = 10
	// The 7 days preceding the day the report is run.
	Report_DateRange_LAST_7_DAYS Report_DateRange_RelativeDateRange = 11
	// The 30 days preceding the day the report is run.
	Report_DateRange_LAST_30_DAYS Report_DateRange_RelativeDateRange = 12
	// The 60 days preceding the day the report is run.
	Report_DateRange_LAST_60_DAYS Report_DateRange_RelativeDateRange = 13
	// The 90 days preceding the day the report is run.
	Report_DateRange_LAST_90_DAYS Report_DateRange_RelativeDateRange = 14
	// The 180 days preceding the day the report is run.
	Report_DateRange_LAST_180_DAYS Report_DateRange_RelativeDateRange = 15
	// The 360 days preceding the day the report is run.
	Report_DateRange_LAST_360_DAYS Report_DateRange_RelativeDateRange = 16
	// The 365 days preceding the day the report is run.
	Report_DateRange_LAST_365_DAYS Report_DateRange_RelativeDateRange = 17
	// The entire previous 3 calendar months preceding the calendar month the
	// report is run.
	Report_DateRange_LAST_3_MONTHS Report_DateRange_RelativeDateRange = 18
	// The entire previous 6 calendar months preceding the calendar month the
	// report is run.
	Report_DateRange_LAST_6_MONTHS Report_DateRange_RelativeDateRange = 19
	// The entire previous 6 calendar months preceding the calendar month the
	// report is run.
	Report_DateRange_LAST_12_MONTHS Report_DateRange_RelativeDateRange = 20
	// From 3 years before the report is run, to the day before the report is
	// run, inclusive.
	Report_DateRange_ALL_AVAILABLE Report_DateRange_RelativeDateRange = 21
	// Only valid when used in the comparison_date_range field. The complete
	// period preceding the date period provided in date_range.
	//
	// In the case where date_range is a FixedDateRange of N days, this will
	// be a period of N days where the end date is the date preceding the
	// start date of the date_range.
	//
	// In the case where date_range is a RelativeDateRange, this will be a
	// period of the same time frame preceding the date_range. In the case
	// where the date_range does not capture the full period because a report
	// is run in the middle of that period, this will still be the full
	// preceding period. For example, if date_range is THIS_WEEK, but the
	// report is run on a Wednesday, THIS_WEEK will be Monday - Wednesday, but
	// PREVIOUS_PERIOD will be Monday - Sunday.
	Report_DateRange_PREVIOUS_PERIOD Report_DateRange_RelativeDateRange = 22
	// Only valid when used in the comparison_date_range field. The period
	// starting 1 year prior to the date period provided in date_range.
	//
	// In the case where date_range is a FixedDateRange, this will be a date
	// range starting 1 year prior to the date_range start date and ending 1
	// year prior to the date_range end date.
	//
	// In the case where date_range is a RelativeDateRange, this will be a
	// period of the same time frame exactly 1 year prior to the date_range.
	// In the case where the date_range does not capture the full period
	// because a report is run in the middle of that period, this will still
	// be the full period 1 year prior. For example, if date range is
	// THIS_WEEK, but the report is run on a Wednesday, THIS_WEEK will be
	// Monday - Wednesday, but SAME_PERIOD_PREVIOUS_YEAR will be Monday -
	// Sunday.
	Report_DateRange_SAME_PERIOD_PREVIOUS_YEAR Report_DateRange_RelativeDateRange = 24
)

// Enum value maps for Report_DateRange_RelativeDateRange.
var (
	Report_DateRange_RelativeDateRange_name = map[int32]string{
		0:  "RELATIVE_DATE_RANGE_UNSPECIFIED",
		1:  "TODAY",
		2:  "YESTERDAY",
		3:  "THIS_WEEK",
		29: "THIS_WEEK_TO_DATE",
		4:  "THIS_MONTH",
		26: "THIS_MONTH_TO_DATE",
		5:  "THIS_QUARTER",
		27: "THIS_QUARTER_TO_DATE",
		6:  "THIS_YEAR",
		28: "THIS_YEAR_TO_DATE",
		7:  "LAST_WEEK",
		8:  "LAST_MONTH",
		9:  "LAST_QUARTER",
		10: "LAST_YEAR",
		11: "LAST_7_DAYS",
		12: "LAST_30_DAYS",
		13: "LAST_60_DAYS",
		14: "LAST_90_DAYS",
		15: "LAST_180_DAYS",
		16: "LAST_360_DAYS",
		17: "LAST_365_DAYS",
		18: "LAST_3_MONTHS",
		19: "LAST_6_MONTHS",
		20: "LAST_12_MONTHS",
		21: "ALL_AVAILABLE",
		22: "PREVIOUS_PERIOD",
		24: "SAME_PERIOD_PREVIOUS_YEAR",
	}
	Report_DateRange_RelativeDateRange_value = map[string]int32{
		"RELATIVE_DATE_RANGE_UNSPECIFIED": 0,
		"TODAY":                           1,
		"YESTERDAY":                       2,
		"THIS_WEEK":                       3,
		"THIS_WEEK_TO_DATE":               29,
		"THIS_MONTH":                      4,
		"THIS_MONTH_TO_DATE":              26,
		"THIS_QUARTER":                    5,
		"THIS_QUARTER_TO_DATE":            27,
		"THIS_YEAR":                       6,
		"THIS_YEAR_TO_DATE":               28,
		"LAST_WEEK":                       7,
		"LAST_MONTH":                      8,
		"LAST_QUARTER":                    9,
		"LAST_YEAR":                       10,
		"LAST_7_DAYS":                     11,
		"LAST_30_DAYS":                    12,
		"LAST_60_DAYS":                    13,
		"LAST_90_DAYS":                    14,
		"LAST_180_DAYS":                   15,
		"LAST_360_DAYS":                   16,
		"LAST_365_DAYS":                   17,
		"LAST_3_MONTHS":                   18,
		"LAST_6_MONTHS":                   19,
		"LAST_12_MONTHS":                  20,
		"ALL_AVAILABLE":                   21,
		"PREVIOUS_PERIOD":                 22,
		"SAME_PERIOD_PREVIOUS_YEAR":       24,
	}
)

func (x Report_DateRange_RelativeDateRange) Enum() *Report_DateRange_RelativeDateRange {
	p := new(Report_DateRange_RelativeDateRange)
	*p = x
	return p
}

func (x Report_DateRange_RelativeDateRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Report_DateRange_RelativeDateRange) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[7].Descriptor()
}

func (Report_DateRange_RelativeDateRange) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[7]
}

func (x Report_DateRange_RelativeDateRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Report_DateRange_RelativeDateRange.Descriptor instead.
func (Report_DateRange_RelativeDateRange) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 7, 0}
}

// Condition for when to email the scheduled report.
type ScheduleOptions_DeliveryCondition int32

const (
	// Never deliver report.
	ScheduleOptions_NEVER ScheduleOptions_DeliveryCondition = 0
	// Always deliver report.
	ScheduleOptions_ALWAYS ScheduleOptions_DeliveryCondition = 1
	// Deliver report when flag's conditions are met.
	ScheduleOptions_WHEN_FLAG_CONDITIONS_MET ScheduleOptions_DeliveryCondition = 2
)

// Enum value maps for ScheduleOptions_DeliveryCondition.
var (
	ScheduleOptions_DeliveryCondition_name = map[int32]string{
		0: "NEVER",
		1: "ALWAYS",
		2: "WHEN_FLAG_CONDITIONS_MET",
	}
	ScheduleOptions_DeliveryCondition_value = map[string]int32{
		"NEVER":                    0,
		"ALWAYS":                   1,
		"WHEN_FLAG_CONDITIONS_MET": 2,
	}
)

func (x ScheduleOptions_DeliveryCondition) Enum() *ScheduleOptions_DeliveryCondition {
	p := new(ScheduleOptions_DeliveryCondition)
	*p = x
	return p
}

func (x ScheduleOptions_DeliveryCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScheduleOptions_DeliveryCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[8].Descriptor()
}

func (ScheduleOptions_DeliveryCondition) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[8]
}

func (x ScheduleOptions_DeliveryCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScheduleOptions_DeliveryCondition.Descriptor instead.
func (ScheduleOptions_DeliveryCondition) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{12, 0}
}

// Frequency to run report.
type Schedule_Frequency int32

const (
	// No Frequency specified.
	Schedule_FREQUENCY_UNSPECIFIED Schedule_Frequency = 0
	// Schedule report to run every hour.
	Schedule_HOURLY Schedule_Frequency = 1
	// Schedule report to run twice a day (every 12 hours).
	Schedule_TWO_TIMES_DAILY Schedule_Frequency = 2
	// Schedule report to run three times a day (every 8 hours).
	Schedule_THREE_TIMES_DAILY Schedule_Frequency = 3
	// Schedule report to run four times a day (every 6 hours).
	Schedule_FOUR_TIMES_DAILY Schedule_Frequency = 4
	// Schedule report to run on a daily basis.
	Schedule_DAILY Schedule_Frequency = 5
	// Schedule report to run on a weekly basis.
	Schedule_WEEKLY Schedule_Frequency = 6
	// Schedule report to run on a monthly basis.
	Schedule_MONTHLY Schedule_Frequency = 7
)

// Enum value maps for Schedule_Frequency.
var (
	Schedule_Frequency_name = map[int32]string{
		0: "FREQUENCY_UNSPECIFIED",
		1: "HOURLY",
		2: "TWO_TIMES_DAILY",
		3: "THREE_TIMES_DAILY",
		4: "FOUR_TIMES_DAILY",
		5: "DAILY",
		6: "WEEKLY",
		7: "MONTHLY",
	}
	Schedule_Frequency_value = map[string]int32{
		"FREQUENCY_UNSPECIFIED": 0,
		"HOURLY":                1,
		"TWO_TIMES_DAILY":       2,
		"THREE_TIMES_DAILY":     3,
		"FOUR_TIMES_DAILY":      4,
		"DAILY":                 5,
		"WEEKLY":                6,
		"MONTHLY":               7,
	}
)

func (x Schedule_Frequency) Enum() *Schedule_Frequency {
	p := new(Schedule_Frequency)
	*p = x
	return p
}

func (x Schedule_Frequency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schedule_Frequency) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_admanager_v1_report_service_proto_enumTypes[9].Descriptor()
}

func (Schedule_Frequency) Type() protoreflect.EnumType {
	return &file_google_ads_admanager_v1_report_service_proto_enumTypes[9]
}

func (x Schedule_Frequency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schedule_Frequency.Descriptor instead.
func (Schedule_Frequency) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{13, 0}
}

// The `Report` resource.
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The resource name of the report.
	// Report resource name have the form:
	// `networks/{network_code}/reports/{report_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Report ID.
	ReportId int64 `protobuf:"varint,3,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	// Optional. The visibility of a report.
	Visibility Report_Visibility `protobuf:"varint,2,opt,name=visibility,proto3,enum=google.ads.admanager.v1.Report_Visibility" json:"visibility,omitempty"`
	// Required. The report definition of the report.
	ReportDefinition *ReportDefinition `protobuf:"bytes,4,opt,name=report_definition,json=reportDefinition,proto3" json:"report_definition,omitempty"`
	// Optional. Display name for the report.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. The instant this report was last modified.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. The instant this report was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The locale of this report. Locale is set from the user's
	// locale at the time of the request. Locale can not be modified.
	Locale string `protobuf:"bytes,8,opt,name=locale,proto3" json:"locale,omitempty"`
	// Optional. The schedule options of this report.
	ScheduleOptions *ScheduleOptions `protobuf:"bytes,9,opt,name=schedule_options,json=scheduleOptions,proto3" json:"schedule_options,omitempty"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Report) GetReportId() int64 {
	if x != nil {
		return x.ReportId
	}
	return 0
}

func (x *Report) GetVisibility() Report_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Report_HIDDEN
}

func (x *Report) GetReportDefinition() *ReportDefinition {
	if x != nil {
		return x.ReportDefinition
	}
	return nil
}

func (x *Report) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Report) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Report) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Report) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *Report) GetScheduleOptions() *ScheduleOptions {
	if x != nil {
		return x.ScheduleOptions
	}
	return nil
}

// Request message for a running a report.
type RunReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The report to run.
	// Format: `networks/{network_code}/reports/{report_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RunReportRequest) Reset() {
	*x = RunReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReportRequest) ProtoMessage() {}

func (x *RunReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReportRequest.ProtoReflect.Descriptor instead.
func (*RunReportRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{1}
}

func (x *RunReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// `RunReport` operation metadata.
type RunReportMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An estimate of how close this report is to being completed. Will always be
	// 100 for failed and completed reports.
	PercentComplete int32 `protobuf:"varint,2,opt,name=percent_complete,json=percentComplete,proto3" json:"percent_complete,omitempty"`
	// The result's parent report.
	Report string `protobuf:"bytes,4,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *RunReportMetadata) Reset() {
	*x = RunReportMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunReportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReportMetadata) ProtoMessage() {}

func (x *RunReportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReportMetadata.ProtoReflect.Descriptor instead.
func (*RunReportMetadata) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{2}
}

func (x *RunReportMetadata) GetPercentComplete() int32 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *RunReportMetadata) GetReport() string {
	if x != nil {
		return x.Report
	}
	return ""
}

// Response message for a completed `RunReport` operation.
type RunReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique name of the generated result. Use with `FetchReportResultRows`
	// to retrieve data.
	ReportResult string `protobuf:"bytes,1,opt,name=report_result,json=reportResult,proto3" json:"report_result,omitempty"`
}

func (x *RunReportResponse) Reset() {
	*x = RunReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunReportResponse) ProtoMessage() {}

func (x *RunReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunReportResponse.ProtoReflect.Descriptor instead.
func (*RunReportResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{3}
}

func (x *RunReportResponse) GetReportResult() string {
	if x != nil {
		return x.ReportResult
	}
	return ""
}

// Request object for `GetReport` method.
type GetReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the report.
	// Format: `networks/{network_code}/reports/{report_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReportRequest) Reset() {
	*x = GetReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportRequest) ProtoMessage() {}

func (x *GetReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportRequest.ProtoReflect.Descriptor instead.
func (*GetReportRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetReportRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request object for `ListReports` method.
type ListReportsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of reports.
	// Format: `networks/{network_code}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of `Reports` to return. The service may return
	// fewer than this value. If unspecified, at most 50 `Reports` will be
	// returned. The maximum value is 1000; values above 1000 will be coerced to
	// 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListReports` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListReports` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Expression to filter the response.
	// See syntax details at
	// https://developers.google.com/ad-manager/api/beta/filters
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Expression to specify sorting order.
	// See syntax details at
	// https://developers.google.com/ad-manager/api/beta/filters#order
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Optional. Number of individual resources to skip while paginating.
	Skip int32 `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *ListReportsRequest) Reset() {
	*x = ListReportsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportsRequest) ProtoMessage() {}

func (x *ListReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportsRequest.ProtoReflect.Descriptor instead.
func (*ListReportsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListReportsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListReportsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReportsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListReportsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListReportsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListReportsRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

// Response object for `ListReportsResponse` containing matching `Report`
// objects.
type ListReportsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `Report` objects from the specified network.
	Reports []*Report `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of `Report` objects.
	// If a filter was included in the request, this reflects the total number
	// after the filtering is applied.
	//
	// `total_size` will not be calculated in the response unless it has been
	// included in a response field mask. The response field mask can be provided
	// to the method by using the URL parameter `$fields` or `fields`, or by using
	// the HTTP/gRPC header `X-Goog-FieldMask`.
	//
	// For more information, see
	// https://developers.google.com/ad-manager/api/beta/field-masks
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListReportsResponse) Reset() {
	*x = ListReportsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportsResponse) ProtoMessage() {}

func (x *ListReportsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportsResponse.ProtoReflect.Descriptor instead.
func (*ListReportsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListReportsResponse) GetReports() []*Report {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ListReportsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListReportsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// Request object for `CreateReport` method.
type CreateReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this `Report` will be created.
	// Format: `networks/{network_code}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The `Report` to create.
	Report *Report `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *CreateReportRequest) Reset() {
	*x = CreateReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportRequest) ProtoMessage() {}

func (x *CreateReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportRequest.ProtoReflect.Descriptor instead.
func (*CreateReportRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{7}
}

func (x *CreateReportRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateReportRequest) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

// Request object for `UpdateReport` method.
type UpdateReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The `Report` to update.
	Report *Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	// Required. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateReportRequest) Reset() {
	*x = UpdateReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReportRequest) ProtoMessage() {}

func (x *UpdateReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReportRequest.ProtoReflect.Descriptor instead.
func (*UpdateReportRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateReportRequest) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *UpdateReportRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// The request message for the fetch report result rows endpoint.
type FetchReportResultRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The report result being fetched.
	// Format:
	// `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The maximum number of rows to return. The service may return
	// fewer than this value. If unspecified, at most 1,000 rows will be returned.
	// The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `FetchReportResultRows`
	// call. Provide this to retrieve the second and subsequent batches of rows.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *FetchReportResultRowsRequest) Reset() {
	*x = FetchReportResultRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReportResultRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReportResultRowsRequest) ProtoMessage() {}

func (x *FetchReportResultRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReportResultRowsRequest.ProtoReflect.Descriptor instead.
func (*FetchReportResultRowsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{9}
}

func (x *FetchReportResultRowsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FetchReportResultRowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FetchReportResultRowsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response message for the fetch report result rows endpoint.
type FetchReportResultRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Up to `page_size` rows of report data.
	Rows []*Report_DataTable_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	// The time at which the report was scheduled to run. For non-scheduled
	// reports, this is the time at which the report was requested to be run.
	RunTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
	// The computed fixed date ranges this report includes.
	// Only returned with the first page of results (when page_token is not
	// included in the request).
	DateRanges []*Report_DateRange_FixedDateRange `protobuf:"bytes,3,rep,name=date_ranges,json=dateRanges,proto3" json:"date_ranges,omitempty"`
	// The computed comparison fixed date ranges this report includes.
	// Only returned with the first page of results (when page_token is not
	// included in the request).
	ComparisonDateRanges []*Report_DateRange_FixedDateRange `protobuf:"bytes,4,rep,name=comparison_date_ranges,json=comparisonDateRanges,proto3" json:"comparison_date_ranges,omitempty"`
	// The total number of rows available from this report. Useful for
	// pagination.
	// Only returned with the first page of results (when page_token is not
	// included in the request).
	TotalRowCount int32 `protobuf:"varint,5,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,6,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *FetchReportResultRowsResponse) Reset() {
	*x = FetchReportResultRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReportResultRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReportResultRowsResponse) ProtoMessage() {}

func (x *FetchReportResultRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReportResultRowsResponse.ProtoReflect.Descriptor instead.
func (*FetchReportResultRowsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{10}
}

func (x *FetchReportResultRowsResponse) GetRows() []*Report_DataTable_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *FetchReportResultRowsResponse) GetRunTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RunTime
	}
	return nil
}

func (x *FetchReportResultRowsResponse) GetDateRanges() []*Report_DateRange_FixedDateRange {
	if x != nil {
		return x.DateRanges
	}
	return nil
}

func (x *FetchReportResultRowsResponse) GetComparisonDateRanges() []*Report_DateRange_FixedDateRange {
	if x != nil {
		return x.ComparisonDateRanges
	}
	return nil
}

func (x *FetchReportResultRowsResponse) GetTotalRowCount() int32 {
	if x != nil {
		return x.TotalRowCount
	}
	return 0
}

func (x *FetchReportResultRowsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The definition of how a report should be run.
type ReportDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The list of dimensions to report on. If empty, the report will
	// have no dimensions, and any metrics will be totals.
	Dimensions []Report_Dimension `protobuf:"varint,1,rep,packed,name=dimensions,proto3,enum=google.ads.admanager.v1.Report_Dimension" json:"dimensions,omitempty"`
	// Required. The list of metrics to report on. If empty, the report will have
	// no metrics.
	Metrics []Report_Metric `protobuf:"varint,2,rep,packed,name=metrics,proto3,enum=google.ads.admanager.v1.Report_Metric" json:"metrics,omitempty"`
	// Optional. The filters for this report.
	Filters []*Report_Filter `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. The time zone the date range is defined in for this report.
	// Defaults to publisher's time zone if not specified. Time zone in IANA
	// format. Acceptable values depend on the report type. Publisher time zone is
	// always accepted. Use "America/Los_Angeles" for pacific time, or "Etc/UTC"
	// for UTC.
	TimeZone string `protobuf:"bytes,4,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. The ISO 4217 currency code for this report. Defaults to publisher
	// currency code if not specified.
	CurrencyCode string `protobuf:"bytes,5,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Required. The primary date range of this report.
	DateRange *Report_DateRange `protobuf:"bytes,6,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// Optional. The comparison date range of this report. If unspecified, the
	// report will not have any comparison metrics.
	ComparisonDateRange *Report_DateRange `protobuf:"bytes,9,opt,name=comparison_date_range,json=comparisonDateRange,proto3,oneof" json:"comparison_date_range,omitempty"`
	// Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
	// dimensions. The index of this repeated field corresponds to the index on
	// each dimension. For example, custom_dimension_key_ids[0] describes
	// CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
	CustomDimensionKeyIds []int64 `protobuf:"varint,7,rep,packed,name=custom_dimension_key_ids,json=customDimensionKeyIds,proto3" json:"custom_dimension_key_ids,omitempty"`
	// Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
	// dimensions. The index of this repeated field corresponds to the index on
	// each dimension. For example, line_item_custom_field_ids[0] describes
	// LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
	LineItemCustomFieldIds []int64 `protobuf:"varint,11,rep,packed,name=line_item_custom_field_ids,json=lineItemCustomFieldIds,proto3" json:"line_item_custom_field_ids,omitempty"`
	// Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
	// dimensions. The index of this repeated field corresponds to the index on
	// each dimension. For example, order_custom_field_ids[0] describes
	// ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
	OrderCustomFieldIds []int64 `protobuf:"varint,12,rep,packed,name=order_custom_field_ids,json=orderCustomFieldIds,proto3" json:"order_custom_field_ids,omitempty"`
	// Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
	// dimensions. The index of this repeated field corresponds to the index on
	// each dimension. For example, creative_custom_field_ids[0] describes
	// CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
	CreativeCustomFieldIds []int64 `protobuf:"varint,13,rep,packed,name=creative_custom_field_ids,json=creativeCustomFieldIds,proto3" json:"creative_custom_field_ids,omitempty"`
	// Required. The type of this report.
	ReportType Report_ReportType `protobuf:"varint,8,opt,name=report_type,json=reportType,proto3,enum=google.ads.admanager.v1.Report_ReportType" json:"report_type,omitempty"`
	// Optional. Include a time period column to introduce comparison columns in
	// the report for each generated period. For example, set to  "QUARTERS" here
	// to have a column for each quarter present in the primary date range. If
	// "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
	// column will also include comparison values for its relative previous
	// quarter.
	TimePeriodColumn Report_TimePeriodColumn `protobuf:"varint,10,opt,name=time_period_column,json=timePeriodColumn,proto3,enum=google.ads.admanager.v1.Report_TimePeriodColumn" json:"time_period_column,omitempty"`
	// Optional. List of flags for this report. Used to flag rows in a result set
	// based on a set of defined filters.
	Flags []*Report_Flag `protobuf:"bytes,14,rep,name=flags,proto3" json:"flags,omitempty"`
	// Optional. Default sorts to apply to this report.
	Sorts []*Report_Sort `protobuf:"bytes,15,rep,name=sorts,proto3" json:"sorts,omitempty"`
}

func (x *ReportDefinition) Reset() {
	*x = ReportDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDefinition) ProtoMessage() {}

func (x *ReportDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDefinition.ProtoReflect.Descriptor instead.
func (*ReportDefinition) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{11}
}

func (x *ReportDefinition) GetDimensions() []Report_Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ReportDefinition) GetMetrics() []Report_Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ReportDefinition) GetFilters() []*Report_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *ReportDefinition) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *ReportDefinition) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *ReportDefinition) GetDateRange() *Report_DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *ReportDefinition) GetComparisonDateRange() *Report_DateRange {
	if x != nil {
		return x.ComparisonDateRange
	}
	return nil
}

func (x *ReportDefinition) GetCustomDimensionKeyIds() []int64 {
	if x != nil {
		return x.CustomDimensionKeyIds
	}
	return nil
}

func (x *ReportDefinition) GetLineItemCustomFieldIds() []int64 {
	if x != nil {
		return x.LineItemCustomFieldIds
	}
	return nil
}

func (x *ReportDefinition) GetOrderCustomFieldIds() []int64 {
	if x != nil {
		return x.OrderCustomFieldIds
	}
	return nil
}

func (x *ReportDefinition) GetCreativeCustomFieldIds() []int64 {
	if x != nil {
		return x.CreativeCustomFieldIds
	}
	return nil
}

func (x *ReportDefinition) GetReportType() Report_ReportType {
	if x != nil {
		return x.ReportType
	}
	return Report_REPORT_TYPE_UNSPECIFIED
}

func (x *ReportDefinition) GetTimePeriodColumn() Report_TimePeriodColumn {
	if x != nil {
		return x.TimePeriodColumn
	}
	return Report_TIME_PERIOD_COLUMN_UNSPECIFIED
}

func (x *ReportDefinition) GetFlags() []*Report_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ReportDefinition) GetSorts() []*Report_Sort {
	if x != nil {
		return x.Sorts
	}
	return nil
}

// The options for a scheduled report.
type ScheduleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information pertaining to schedule itself.
	Schedule *Schedule `protobuf:"bytes,1,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Option for when to deliver the scheduled report.
	DeliveryCondition ScheduleOptions_DeliveryCondition `protobuf:"varint,2,opt,name=delivery_condition,json=deliveryCondition,proto3,enum=google.ads.admanager.v1.ScheduleOptions_DeliveryCondition" json:"delivery_condition,omitempty"`
	// Optional. The flags evaluated when ReportDeliveryOption.WHEN_FLAG_PRESENT
	// is specified.
	Flags []*Report_Flag `protobuf:"bytes,3,rep,name=flags,proto3" json:"flags,omitempty"`
}

func (x *ScheduleOptions) Reset() {
	*x = ScheduleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleOptions) ProtoMessage() {}

func (x *ScheduleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleOptions.ProtoReflect.Descriptor instead.
func (*ScheduleOptions) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleOptions) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ScheduleOptions) GetDeliveryCondition() ScheduleOptions_DeliveryCondition {
	if x != nil {
		return x.DeliveryCondition
	}
	return ScheduleOptions_NEVER
}

func (x *ScheduleOptions) GetFlags() []*Report_Flag {
	if x != nil {
		return x.Flags
	}
	return nil
}

// The schedule for the report
type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The scheduled values based on the frequency selected.
	// WEEKLY - uses WeeklySchedule
	// MONTHLY - uses MonthlySchedule
	//
	// Types that are assignable to FrequencySchedule:
	//
	//	*Schedule_WeeklySchedule_
	//	*Schedule_MonthlySchedule_
	FrequencySchedule isSchedule_FrequencySchedule `protobuf_oneof:"frequency_schedule"`
	// Date for the first run of the report.
	StartDate *date.Date `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Date for the final run of the report.
	EndDate *date.Date `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Frequency to run report.
	Frequency Schedule_Frequency `protobuf:"varint,3,opt,name=frequency,proto3,enum=google.ads.admanager.v1.Schedule_Frequency" json:"frequency,omitempty"`
	// Indicates start time for schedule to run
	// Will use the time_zone from `ReportDefinition`. Defaults
	// to the publisher's time zone if not specified.
	//
	// For HOURLY, TWO_TIMES_DAILY, THREE_TIMES_DAILY, or FOUR_TIMES_DAILY, this
	// will be the time of day that the first report will run on the first day.
	// For example, if the start time is 2:00 PM, and the frequency is
	// THREE_TIMES_DAILY, the first day will have reports scheduled at 2:00 PM,
	// 10:00 PM. Each subsequent day will have reports scheduled at 6:00 AM,
	// 2:00 PM, 10:00 PM.
	StartTime *timeofday.TimeOfDay `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{13}
}

func (m *Schedule) GetFrequencySchedule() isSchedule_FrequencySchedule {
	if m != nil {
		return m.FrequencySchedule
	}
	return nil
}

func (x *Schedule) GetWeeklySchedule() *Schedule_WeeklySchedule {
	if x, ok := x.GetFrequencySchedule().(*Schedule_WeeklySchedule_); ok {
		return x.WeeklySchedule
	}
	return nil
}

func (x *Schedule) GetMonthlySchedule() *Schedule_MonthlySchedule {
	if x, ok := x.GetFrequencySchedule().(*Schedule_MonthlySchedule_); ok {
		return x.MonthlySchedule
	}
	return nil
}

func (x *Schedule) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Schedule) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *Schedule) GetFrequency() Schedule_Frequency {
	if x != nil {
		return x.Frequency
	}
	return Schedule_FREQUENCY_UNSPECIFIED
}

func (x *Schedule) GetStartTime() *timeofday.TimeOfDay {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type isSchedule_FrequencySchedule interface {
	isSchedule_FrequencySchedule()
}

type Schedule_WeeklySchedule_ struct {
	// Days of week to schedule report run.
	WeeklySchedule *Schedule_WeeklySchedule `protobuf:"bytes,6,opt,name=weekly_schedule,json=weeklySchedule,proto3,oneof"`
}

type Schedule_MonthlySchedule_ struct {
	// Days of month to schedule report run.
	MonthlySchedule *Schedule_MonthlySchedule `protobuf:"bytes,7,opt,name=monthly_schedule,json=monthlySchedule,proto3,oneof"`
}

func (*Schedule_WeeklySchedule_) isSchedule_FrequencySchedule() {}

func (*Schedule_MonthlySchedule_) isSchedule_FrequencySchedule() {}

// Represents a single value in a report.
type Report_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the field, depends on the field's data format.
	//
	// Types that are assignable to Value:
	//
	//	*Report_Value_IntValue
	//	*Report_Value_DoubleValue
	//	*Report_Value_StringValue
	//	*Report_Value_BoolValue
	//	*Report_Value_IntListValue
	//	*Report_Value_StringListValue
	//	*Report_Value_BytesValue
	Value isReport_Value_Value `protobuf_oneof:"value"`
}

func (x *Report_Value) Reset() {
	*x = Report_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Value) ProtoMessage() {}

func (x *Report_Value) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Value.ProtoReflect.Descriptor instead.
func (*Report_Value) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Report_Value) GetValue() isReport_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Report_Value) GetIntValue() int64 {
	if x, ok := x.GetValue().(*Report_Value_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Report_Value) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Report_Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Report_Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Report_Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Report_Value) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Report_Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Report_Value) GetIntListValue() *Report_Value_IntList {
	if x, ok := x.GetValue().(*Report_Value_IntListValue); ok {
		return x.IntListValue
	}
	return nil
}

func (x *Report_Value) GetStringListValue() *Report_Value_StringList {
	if x, ok := x.GetValue().(*Report_Value_StringListValue); ok {
		return x.StringListValue
	}
	return nil
}

func (x *Report_Value) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Report_Value_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

type isReport_Value_Value interface {
	isReport_Value_Value()
}

type Report_Value_IntValue struct {
	// For integer values.
	IntValue int64 `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3,oneof"`
}

type Report_Value_DoubleValue struct {
	// For double values.
	DoubleValue float64 `protobuf:"fixed64,2,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Report_Value_StringValue struct {
	// For string values.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Report_Value_BoolValue struct {
	// For boolean values.
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Report_Value_IntListValue struct {
	// For lists of integer values.
	IntListValue *Report_Value_IntList `protobuf:"bytes,6,opt,name=int_list_value,json=intListValue,proto3,oneof"`
}

type Report_Value_StringListValue struct {
	// For lists of string values.
	StringListValue *Report_Value_StringList `protobuf:"bytes,7,opt,name=string_list_value,json=stringListValue,proto3,oneof"`
}

type Report_Value_BytesValue struct {
	// For bytes values.
	BytesValue []byte `protobuf:"bytes,8,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*Report_Value_IntValue) isReport_Value_Value() {}

func (*Report_Value_DoubleValue) isReport_Value_Value() {}

func (*Report_Value_StringValue) isReport_Value_Value() {}

func (*Report_Value_BoolValue) isReport_Value_Value() {}

func (*Report_Value_IntListValue) isReport_Value_Value() {}

func (*Report_Value_StringListValue) isReport_Value_Value() {}

func (*Report_Value_BytesValue) isReport_Value_Value() {}

// Represents a sorting in a report.
type Report_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A field (dimension or metric) to sort by.
	Field *Report_Field `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Optional. The sort order. If true the sort will be descending.
	Descending bool `protobuf:"varint,2,opt,name=descending,proto3" json:"descending,omitempty"`
	// Optional. Use to sort on a specific slice of data.
	Slice *Report_Slice `protobuf:"bytes,3,opt,name=slice,proto3,oneof" json:"slice,omitempty"`
	// Optional. When using time period columns, use this to sort on a specific
	// column.
	TimePeriodIndex *int32 `protobuf:"varint,4,opt,name=time_period_index,json=timePeriodIndex,proto3,oneof" json:"time_period_index,omitempty"`
	// Optional. Use to specify which metric value type to sort on. Defaults to
	// PRIMARY.
	MetricValueType *Report_MetricValueType `protobuf:"varint,5,opt,name=metric_value_type,json=metricValueType,proto3,enum=google.ads.admanager.v1.Report_MetricValueType,oneof" json:"metric_value_type,omitempty"`
}

func (x *Report_Sort) Reset() {
	*x = Report_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Sort) ProtoMessage() {}

func (x *Report_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Sort.ProtoReflect.Descriptor instead.
func (*Report_Sort) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Report_Sort) GetField() *Report_Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Report_Sort) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *Report_Sort) GetSlice() *Report_Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *Report_Sort) GetTimePeriodIndex() int32 {
	if x != nil && x.TimePeriodIndex != nil {
		return *x.TimePeriodIndex
	}
	return 0
}

func (x *Report_Sort) GetMetricValueType() Report_MetricValueType {
	if x != nil && x.MetricValueType != nil {
		return *x.MetricValueType
	}
	return Report_PRIMARY
}

// A table containing report data including dimension and metric values.
type Report_DataTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Report_DataTable) Reset() {
	*x = Report_DataTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_DataTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_DataTable) ProtoMessage() {}

func (x *Report_DataTable) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_DataTable.ProtoReflect.Descriptor instead.
func (*Report_DataTable) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 2}
}

// A dimension or a metric in a report.
type Report_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either a dimension or a metric.
	//
	// Types that are assignable to Field:
	//
	//	*Report_Field_Dimension
	//	*Report_Field_Metric
	Field isReport_Field_Field `protobuf_oneof:"field"`
}

func (x *Report_Field) Reset() {
	*x = Report_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Field) ProtoMessage() {}

func (x *Report_Field) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Field.ProtoReflect.Descriptor instead.
func (*Report_Field) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Report_Field) GetField() isReport_Field_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Report_Field) GetDimension() Report_Dimension {
	if x, ok := x.GetField().(*Report_Field_Dimension); ok {
		return x.Dimension
	}
	return Report_DIMENSION_UNSPECIFIED
}

func (x *Report_Field) GetMetric() Report_Metric {
	if x, ok := x.GetField().(*Report_Field_Metric); ok {
		return x.Metric
	}
	return Report_METRIC_UNSPECIFIED
}

type isReport_Field_Field interface {
	isReport_Field_Field()
}

type Report_Field_Dimension struct {
	// The dimension this field represents.
	Dimension Report_Dimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.admanager.v1.Report_Dimension,oneof"`
}

type Report_Field_Metric struct {
	// The metric this field represents.
	Metric Report_Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=google.ads.admanager.v1.Report_Metric,oneof"`
}

func (*Report_Field_Dimension) isReport_Field_Field() {}

func (*Report_Field_Metric) isReport_Field_Field() {}

// Use to specify a slice of data.
//
// For example, in a report, to focus on just data from the US, specify
// `COUNTRY_NAME` for dimension and value: `"United States"`.
type Report_Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The dimension to slice on.
	Dimension Report_Dimension `protobuf:"varint,1,opt,name=dimension,proto3,enum=google.ads.admanager.v1.Report_Dimension" json:"dimension,omitempty"`
	// Required. The value of the dimension.
	Value *Report_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Report_Slice) Reset() {
	*x = Report_Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Slice) ProtoMessage() {}

func (x *Report_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Slice.ProtoReflect.Descriptor instead.
func (*Report_Slice) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Report_Slice) GetDimension() Report_Dimension {
	if x != nil {
		return x.Dimension
	}
	return Report_DIMENSION_UNSPECIFIED
}

func (x *Report_Slice) GetValue() *Report_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// A filter over one or more fields.
type Report_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type determines how the underlying filters are combined.
	//
	// Types that are assignable to Type:
	//
	//	*Report_Filter_FieldFilter_
	//	*Report_Filter_NotFilter
	//	*Report_Filter_AndFilter
	//	*Report_Filter_OrFilter
	Type isReport_Filter_Type `protobuf_oneof:"type"`
}

func (x *Report_Filter) Reset() {
	*x = Report_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Filter) ProtoMessage() {}

func (x *Report_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Filter.ProtoReflect.Descriptor instead.
func (*Report_Filter) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 5}
}

func (m *Report_Filter) GetType() isReport_Filter_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Report_Filter) GetFieldFilter() *Report_Filter_FieldFilter {
	if x, ok := x.GetType().(*Report_Filter_FieldFilter_); ok {
		return x.FieldFilter
	}
	return nil
}

func (x *Report_Filter) GetNotFilter() *Report_Filter {
	if x, ok := x.GetType().(*Report_Filter_NotFilter); ok {
		return x.NotFilter
	}
	return nil
}

func (x *Report_Filter) GetAndFilter() *Report_Filter_FilterList {
	if x, ok := x.GetType().(*Report_Filter_AndFilter); ok {
		return x.AndFilter
	}
	return nil
}

func (x *Report_Filter) GetOrFilter() *Report_Filter_FilterList {
	if x, ok := x.GetType().(*Report_Filter_OrFilter); ok {
		return x.OrFilter
	}
	return nil
}

type isReport_Filter_Type interface {
	isReport_Filter_Type()
}

type Report_Filter_FieldFilter_ struct {
	// A filter on a single field.
	FieldFilter *Report_Filter_FieldFilter `protobuf:"bytes,1,opt,name=field_filter,json=fieldFilter,proto3,oneof"`
}

type Report_Filter_NotFilter struct {
	// A filter whose result is negated.
	NotFilter *Report_Filter `protobuf:"bytes,2,opt,name=not_filter,json=notFilter,proto3,oneof"`
}

type Report_Filter_AndFilter struct {
	// A list of filters whose results are AND-ed.
	AndFilter *Report_Filter_FilterList `protobuf:"bytes,3,opt,name=and_filter,json=andFilter,proto3,oneof"`
}

type Report_Filter_OrFilter struct {
	// A list of filters whose results are OR-ed.
	OrFilter *Report_Filter_FilterList `protobuf:"bytes,4,opt,name=or_filter,json=orFilter,proto3,oneof"`
}

func (*Report_Filter_FieldFilter_) isReport_Filter_Type() {}

func (*Report_Filter_NotFilter) isReport_Filter_Type() {}

func (*Report_Filter_AndFilter) isReport_Filter_Type() {}

func (*Report_Filter_OrFilter) isReport_Filter_Type() {}

// A flag for a report. Flags are used show if certain thresholds are met.
// Result rows that match the filter will have the corresponding
// [MetricValueGroup.flagValues][MetricValueGroup] index set to true.
// For more information about flags see:
// https://support.google.com/admanager/answer/15079975
type Report_Flag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Filters to apply for the flag.
	Filters []*Report_Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	// Optional. Name of the flag.
	// The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
	// the colored flags that appear in the UI. The UI will not display flags
	// with other names, but they are available for use by API clients.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Report_Flag) Reset() {
	*x = Report_Flag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Flag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Flag) ProtoMessage() {}

func (x *Report_Flag) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Flag.ProtoReflect.Descriptor instead.
func (*Report_Flag) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Report_Flag) GetFilters() []*Report_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *Report_Flag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A date range for a report.
type Report_DateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either a fixed or relative date range.
	//
	// Types that are assignable to DateRangeType:
	//
	//	*Report_DateRange_Fixed
	//	*Report_DateRange_Relative
	DateRangeType isReport_DateRange_DateRangeType `protobuf_oneof:"date_range_type"`
}

func (x *Report_DateRange) Reset() {
	*x = Report_DateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_DateRange) ProtoMessage() {}

func (x *Report_DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_DateRange.ProtoReflect.Descriptor instead.
func (*Report_DateRange) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 7}
}

func (m *Report_DateRange) GetDateRangeType() isReport_DateRange_DateRangeType {
	if m != nil {
		return m.DateRangeType
	}
	return nil
}

func (x *Report_DateRange) GetFixed() *Report_DateRange_FixedDateRange {
	if x, ok := x.GetDateRangeType().(*Report_DateRange_Fixed); ok {
		return x.Fixed
	}
	return nil
}

func (x *Report_DateRange) GetRelative() Report_DateRange_RelativeDateRange {
	if x, ok := x.GetDateRangeType().(*Report_DateRange_Relative); ok {
		return x.Relative
	}
	return Report_DateRange_RELATIVE_DATE_RANGE_UNSPECIFIED
}

type isReport_DateRange_DateRangeType interface {
	isReport_DateRange_DateRangeType()
}

type Report_DateRange_Fixed struct {
	// A fixed date range.
	Fixed *Report_DateRange_FixedDateRange `protobuf:"bytes,1,opt,name=fixed,proto3,oneof"`
}

type Report_DateRange_Relative struct {
	// A relative date range.
	Relative Report_DateRange_RelativeDateRange `protobuf:"varint,2,opt,name=relative,proto3,enum=google.ads.admanager.v1.Report_DateRange_RelativeDateRange,oneof"`
}

func (*Report_DateRange_Fixed) isReport_DateRange_DateRangeType() {}

func (*Report_DateRange_Relative) isReport_DateRange_DateRangeType() {}

// A list of integer values.
type Report_Value_IntList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The values
	Values []int64 `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Report_Value_IntList) Reset() {
	*x = Report_Value_IntList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Value_IntList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Value_IntList) ProtoMessage() {}

func (x *Report_Value_IntList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Value_IntList.ProtoReflect.Descriptor instead.
func (*Report_Value_IntList) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Report_Value_IntList) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// A list of string values.
type Report_Value_StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The values
	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Report_Value_StringList) Reset() {
	*x = Report_Value_StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Value_StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Value_StringList) ProtoMessage() {}

func (x *Report_Value_StringList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Value_StringList.ProtoReflect.Descriptor instead.
func (*Report_Value_StringList) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Report_Value_StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// A row of report data.
type Report_DataTable_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The order of the dimension values is the same as the order of the
	// dimensions specified in the request.
	DimensionValues []*Report_Value `protobuf:"bytes,1,rep,name=dimension_values,json=dimensionValues,proto3" json:"dimension_values,omitempty"`
	// The length of the metric_value_groups
	// field will be equal to the length of the date_ranges field in the
	// fetch response. The metric_value_groups field is
	// ordered such that each index corresponds to the date_range at the same
	// index. For example, given date_ranges [x, y], metric_value_groups will
	// have a length of two. The first entry in metric_value_groups represents
	// the metrics for date x and the second entry in metric_value_groups
	// represents the metrics for date y.
	MetricValueGroups []*Report_DataTable_MetricValueGroup `protobuf:"bytes,2,rep,name=metric_value_groups,json=metricValueGroups,proto3" json:"metric_value_groups,omitempty"`
}

func (x *Report_DataTable_Row) Reset() {
	*x = Report_DataTable_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_DataTable_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_DataTable_Row) ProtoMessage() {}

func (x *Report_DataTable_Row) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_DataTable_Row.ProtoReflect.Descriptor instead.
func (*Report_DataTable_Row) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Report_DataTable_Row) GetDimensionValues() []*Report_Value {
	if x != nil {
		return x.DimensionValues
	}
	return nil
}

func (x *Report_DataTable_Row) GetMetricValueGroups() []*Report_DataTable_MetricValueGroup {
	if x != nil {
		return x.MetricValueGroups
	}
	return nil
}

// Contains all metric values requested for a single date range and set of
// column dimension values (returned in the columns field of the response).
// The order of the metrics in each field corresponds to the order of the
// metrics specified in the request.
type Report_DataTable_MetricValueGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data for the PRIMARY MetricValueType.
	PrimaryValues []*Report_Value `protobuf:"bytes,1,rep,name=primary_values,json=primaryValues,proto3" json:"primary_values,omitempty"`
	// Data for the PRIMARY_PERCENT_OF_TOTAL MetricValueType.
	PrimaryPercentOfTotalValues []*Report_Value `protobuf:"bytes,2,rep,name=primary_percent_of_total_values,json=primaryPercentOfTotalValues,proto3" json:"primary_percent_of_total_values,omitempty"`
	// Data for the COMPARISON MetricValueType.
	ComparisonValues []*Report_Value `protobuf:"bytes,3,rep,name=comparison_values,json=comparisonValues,proto3" json:"comparison_values,omitempty"`
	// Data for the COMPARISON_PERCENT_OF_TOTAL MetricValueType.
	ComparisonPercentOfTotalValues []*Report_Value `protobuf:"bytes,4,rep,name=comparison_percent_of_total_values,json=comparisonPercentOfTotalValues,proto3" json:"comparison_percent_of_total_values,omitempty"`
	// Data for the ABSOLUTE_CHANGE MetricValueType.
	AbsoluteChangeValues []*Report_Value `protobuf:"bytes,5,rep,name=absolute_change_values,json=absoluteChangeValues,proto3" json:"absolute_change_values,omitempty"`
	// Data for the RELATIVE_CHANGE MetricValueType.
	RelativeChangeValues []*Report_Value `protobuf:"bytes,6,rep,name=relative_change_values,json=relativeChangeValues,proto3" json:"relative_change_values,omitempty"`
	// If true, the flag's conditions are met. If false, the flag's
	// conditions are not met. flag_values has the same length as
	// flags and index i of flag_values represents the flag at index i
	// of flags.
	FlagValues []bool `protobuf:"varint,7,rep,packed,name=flag_values,json=flagValues,proto3" json:"flag_values,omitempty"`
}

func (x *Report_DataTable_MetricValueGroup) Reset() {
	*x = Report_DataTable_MetricValueGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_DataTable_MetricValueGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_DataTable_MetricValueGroup) ProtoMessage() {}

func (x *Report_DataTable_MetricValueGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_DataTable_MetricValueGroup.ProtoReflect.Descriptor instead.
func (*Report_DataTable_MetricValueGroup) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *Report_DataTable_MetricValueGroup) GetPrimaryValues() []*Report_Value {
	if x != nil {
		return x.PrimaryValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetPrimaryPercentOfTotalValues() []*Report_Value {
	if x != nil {
		return x.PrimaryPercentOfTotalValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetComparisonValues() []*Report_Value {
	if x != nil {
		return x.ComparisonValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetComparisonPercentOfTotalValues() []*Report_Value {
	if x != nil {
		return x.ComparisonPercentOfTotalValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetAbsoluteChangeValues() []*Report_Value {
	if x != nil {
		return x.AbsoluteChangeValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetRelativeChangeValues() []*Report_Value {
	if x != nil {
		return x.RelativeChangeValues
	}
	return nil
}

func (x *Report_DataTable_MetricValueGroup) GetFlagValues() []bool {
	if x != nil {
		return x.FlagValues
	}
	return nil
}

// A filter on a specific field.
type Report_Filter_FieldFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The field to filter on.
	Field *Report_Field `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Required. The operation of this filter.
	Operation Report_Filter_Operation `protobuf:"varint,2,opt,name=operation,proto3,enum=google.ads.admanager.v1.Report_Filter_Operation" json:"operation,omitempty"`
	// Required. Values to filter to.
	Values []*Report_Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	// Optional. Use to filter on a specific slice of data.
	Slice *Report_Slice `protobuf:"bytes,4,opt,name=slice,proto3,oneof" json:"slice,omitempty"`
	// Optional. When using time period columns, use this to filter on a
	// specific column.
	TimePeriodIndex *int32 `protobuf:"varint,5,opt,name=time_period_index,json=timePeriodIndex,proto3,oneof" json:"time_period_index,omitempty"`
	// Optional. Use to specify which metric value type to filter on. Defaults
	// to PRIMARY.
	MetricValueType *Report_MetricValueType `protobuf:"varint,6,opt,name=metric_value_type,json=metricValueType,proto3,enum=google.ads.admanager.v1.Report_MetricValueType,oneof" json:"metric_value_type,omitempty"`
}

func (x *Report_Filter_FieldFilter) Reset() {
	*x = Report_Filter_FieldFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Filter_FieldFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Filter_FieldFilter) ProtoMessage() {}

func (x *Report_Filter_FieldFilter) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Filter_FieldFilter.ProtoReflect.Descriptor instead.
func (*Report_Filter_FieldFilter) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *Report_Filter_FieldFilter) GetField() *Report_Field {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Report_Filter_FieldFilter) GetOperation() Report_Filter_Operation {
	if x != nil {
		return x.Operation
	}
	return Report_Filter_IN
}

func (x *Report_Filter_FieldFilter) GetValues() []*Report_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Report_Filter_FieldFilter) GetSlice() *Report_Slice {
	if x != nil {
		return x.Slice
	}
	return nil
}

func (x *Report_Filter_FieldFilter) GetTimePeriodIndex() int32 {
	if x != nil && x.TimePeriodIndex != nil {
		return *x.TimePeriodIndex
	}
	return 0
}

func (x *Report_Filter_FieldFilter) GetMetricValueType() Report_MetricValueType {
	if x != nil && x.MetricValueType != nil {
		return *x.MetricValueType
	}
	return Report_PRIMARY
}

// A list of filters.
type Report_Filter_FilterList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A list of filters.
	Filters []*Report_Filter `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *Report_Filter_FilterList) Reset() {
	*x = Report_Filter_FilterList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_Filter_FilterList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_Filter_FilterList) ProtoMessage() {}

func (x *Report_Filter_FilterList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_Filter_FilterList.ProtoReflect.Descriptor instead.
func (*Report_Filter_FilterList) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 5, 1}
}

func (x *Report_Filter_FilterList) GetFilters() []*Report_Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

// A date range between two fixed dates (inclusive of end date).
type Report_DateRange_FixedDateRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The start date of this date range.
	StartDate *date.Date `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Required. The end date (inclusive) of this date range.
	EndDate *date.Date `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *Report_DateRange_FixedDateRange) Reset() {
	*x = Report_DateRange_FixedDateRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report_DateRange_FixedDateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report_DateRange_FixedDateRange) ProtoMessage() {}

func (x *Report_DateRange_FixedDateRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report_DateRange_FixedDateRange.ProtoReflect.Descriptor instead.
func (*Report_DateRange_FixedDateRange) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *Report_DateRange_FixedDateRange) GetStartDate() *date.Date {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Report_DateRange_FixedDateRange) GetEndDate() *date.Date {
	if x != nil {
		return x.EndDate
	}
	return nil
}

// Days of week to schedule report run.
type Schedule_WeeklySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies days of the week on which to run report.
	WeeklyScheduledDays []dayofweek.DayOfWeek `protobuf:"varint,1,rep,packed,name=weekly_scheduled_days,json=weeklyScheduledDays,proto3,enum=google.type.DayOfWeek" json:"weekly_scheduled_days,omitempty"`
}

func (x *Schedule_WeeklySchedule) Reset() {
	*x = Schedule_WeeklySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule_WeeklySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule_WeeklySchedule) ProtoMessage() {}

func (x *Schedule_WeeklySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule_WeeklySchedule.ProtoReflect.Descriptor instead.
func (*Schedule_WeeklySchedule) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Schedule_WeeklySchedule) GetWeeklyScheduledDays() []dayofweek.DayOfWeek {
	if x != nil {
		return x.WeeklyScheduledDays
	}
	return nil
}

// Days of Month to schedule report run.
type Schedule_MonthlySchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies days of the month to run report. Range is from 1-31.
	// Will ignore days that are not valid for the given month.
	MonthlyScheduledDays []int32 `protobuf:"varint,1,rep,packed,name=monthly_scheduled_days,json=monthlyScheduledDays,proto3" json:"monthly_scheduled_days,omitempty"`
}

func (x *Schedule_MonthlySchedule) Reset() {
	*x = Schedule_MonthlySchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule_MonthlySchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule_MonthlySchedule) ProtoMessage() {}

func (x *Schedule_MonthlySchedule) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_report_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule_MonthlySchedule.ProtoReflect.Descriptor instead.
func (*Schedule_MonthlySchedule) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_report_service_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Schedule_MonthlySchedule) GetMonthlyScheduledDays() []int32 {
	if x != nil {
		return x.MonthlyScheduledDays
	}
	return nil
}

var File_google_ads_admanager_v1_report_service_proto protoreflect.FileDescriptor

var file_google_ads_admanager_v1_report_service_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66, 0x77, 0x65, 0x65,
	0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x66, 0x64, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0xe9, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x11,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xbd, 0x03, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x55, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x21, 0x0a, 0x07, 0x49, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x24, 0x0a,
	0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x87, 0x03, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x05,
	0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a, 0x11, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xc3, 0x06, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x10,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6a,
	0x0a, 0x13, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0xef, 0x04, 0x0a, 0x10, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x4c, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6b, 0x0a,
	0x1f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x71,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x5b, 0x0a, 0x16, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x5b,
	0x0a, 0x16, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x0a, 0x66, 0x6c, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x9d, 0x01, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48, 0x00, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x97, 0x01, 0x0a,
	0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xef, 0x08, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x57, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x6e, 0x6f,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e,
	0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x09, 0x6f, 0x72, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x08, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x82, 0x04, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x65, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x53,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41,
	0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41,
	0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e,
	0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x0a,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x66, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x12, 0x45, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x1a, 0xfd, 0x06, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x7a, 0x0a, 0x0e, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x04, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x1f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x59, 0x45, 0x53, 0x54, 0x45, 0x52, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x48, 0x49, 0x53, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x48,
	0x49, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x48, 0x49, 0x53, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x1b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x59,
	0x45, 0x41, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x59, 0x45,
	0x41, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x0c, 0x12,
	0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10,
	0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x39, 0x30, 0x5f, 0x44, 0x41, 0x59,
	0x53, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x38, 0x30, 0x5f,
	0x44, 0x41, 0x59, 0x53, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33,
	0x36, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53,
	0x54, 0x5f, 0x33, 0x36, 0x35, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x12, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x36, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53,
	0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x32, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x53, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x16, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x50, 0x52,
	0x45, 0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x18, 0x42, 0x11, 0x0a,
	0x0f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45,
	0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10,
	0x04, 0x22, 0xce, 0x92, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x16, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf2, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x49, 0x44, 0x10, 0xe4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x83, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x41, 0x44, 0x56,
	0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0xe6,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xe5, 0x01, 0x12, 0x14, 0x0a, 0x0f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x84, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x10, 0xe3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x86, 0x03, 0x12, 0x15, 0x0a, 0x10, 0x41, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x87, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31,
	0x30, 0x10, 0x4a, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x31, 0x10, 0x4b, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x32, 0x10, 0x4c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x31, 0x33, 0x10, 0x4d, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x34, 0x10, 0x4e, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x35, 0x10, 0x4f, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x31, 0x36, 0x10, 0x50, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10, 0x42, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x43, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x34, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x10, 0x45, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x36, 0x10, 0x46, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x37, 0x10,
	0x47, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x38, 0x10, 0x48, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x39, 0x10, 0x49, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x19, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31,
	0x30, 0x10, 0x30, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49,
	0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x31, 0x10, 0x32, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x31, 0x32, 0x10, 0x34, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x33, 0x10, 0x36, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x31, 0x34, 0x10, 0x38, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x35, 0x10, 0x3a,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x36, 0x10, 0x3c, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x32, 0x10,
	0x20, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x34, 0x10,
	0x24, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x10, 0x26, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x36, 0x10,
	0x28, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x37, 0x10, 0x2a, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x38, 0x10,
	0x2c, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x39, 0x10, 0x2e, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x8e, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x1d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15,
	0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x31, 0x30, 0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x31,
	0x10, 0x33, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x32, 0x10, 0x35, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x31, 0x33, 0x10, 0x37, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31,
	0x34, 0x10, 0x39, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x35, 0x10, 0x3b, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x31, 0x36, 0x10, 0x3d, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x32, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x33, 0x10, 0x23, 0x12, 0x18, 0x0a,
	0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x34, 0x10, 0x25, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x35, 0x10,
	0x27, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x36, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x41,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x37, 0x10, 0x2b, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x38, 0x10, 0x2d, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x39, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x10, 0x8f, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10,
	0x3f, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x57,
	0x41, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x3e, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xce, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x50, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x88, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53,
	0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0xdd,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xda, 0x02, 0x12, 0x1f,
	0x0a, 0x1a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52,
	0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0xdf, 0x02, 0x12,
	0x22, 0x0a, 0x1d, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x53,
	0x10, 0xde, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0xdb, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x41,
	0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0xdc, 0x02, 0x12, 0x23, 0x0a, 0x1e,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xfa,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xfb, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x55,
	0x52, 0x4c, 0x10, 0xf8, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xf2, 0x02,
	0x12, 0x1b, 0x0a, 0x16, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf3, 0x02, 0x12, 0x29, 0x0a,
	0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0xf9, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xf6, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf7, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x96, 0x02, 0x12, 0x31, 0x0a, 0x2c, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x82, 0x02, 0x12, 0x36, 0x0a, 0x31,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x83, 0x02, 0x12, 0x27, 0x0a, 0x22, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xa8, 0x02, 0x12, 0x2c, 0x0a,
	0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xa9, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x98, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x90, 0x02, 0x12,
	0x21, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x88, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x89, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0xfd, 0x02, 0x12, 0x2e, 0x0a, 0x29, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xa2, 0x02, 0x12, 0x33, 0x0a, 0x2e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xa3, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0xfc, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xa0, 0x02, 0x12, 0x2a,
	0x0a, 0x25, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e,
	0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x92, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0xa4, 0x02, 0x12, 0x2f, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0xa5, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10,
	0xa6, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0xa7, 0x02, 0x12,
	0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8b,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x8d, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45,
	0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xae, 0x02, 0x12, 0x2d, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x81,
	0x02, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x9d, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x91, 0x02,
	0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x41, 0x50, 0x10, 0xaf, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44,
	0x10, 0xaa, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x10, 0xa1,
	0x02, 0x12, 0x27, 0x0a, 0x22, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x9b, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x9a, 0x02, 0x12, 0x35, 0x0a, 0x30, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x9c, 0x02, 0x12,
	0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x47, 0x4f, 0x4f, 0x44, 0x10, 0x94,
	0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xab, 0x02, 0x12,
	0x2e, 0x0a, 0x29, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x44, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x9e, 0x02, 0x12,
	0x23, 0x0a, 0x1e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x95, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x86, 0x02, 0x12,
	0x2e, 0x0a, 0x29, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x87, 0x02, 0x12,
	0x2e, 0x0a, 0x29, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x84, 0x02, 0x12,
	0x33, 0x0a, 0x2e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x85, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x10, 0x8a, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0xb2, 0x02, 0x12, 0x2f, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xb3, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x8c, 0x02, 0x12, 0x27, 0x0a, 0x22, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x8e, 0x02,
	0x12, 0x1c, 0x0a, 0x17, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xac, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xad,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x8f, 0x02, 0x12, 0x2b, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x49, 0x54, 0x10, 0x93, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x9f, 0x02,
	0x12, 0x2a, 0x0a, 0x25, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xf4, 0x02, 0x12, 0x2c, 0x0a, 0x27,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf5, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45,
	0x4e, 0x43, 0x59, 0x10, 0xb9, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x49, 0x44, 0x10, 0xba, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x43,
	0x50, 0x43, 0x10, 0xbb, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x43,
	0x50, 0x4d, 0x10, 0xbc, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xd4, 0x02, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0xd5, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10,
	0xbd, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0xbf, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x49, 0x44, 0x10, 0xc0, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xd2, 0x02, 0x12, 0x1a,
	0x0a, 0x15, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0xce, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42,
	0x45, 0x4c, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xcf, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0xc2, 0x02, 0x12, 0x28,
	0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xc3, 0x02, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0xd3, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xc4,
	0x02, 0x12, 0x20, 0x0a, 0x1b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43,
	0x10, 0xc1, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0xc5, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x4f, 0x50, 0x4c, 0x45, 0x10, 0xc9, 0x02, 0x12,
	0x2c, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x4c, 0x45,
	0x53, 0x50, 0x45, 0x4f, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xc8, 0x02, 0x12, 0x29, 0x0a,
	0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x4b, 0x45, 0x52, 0x53, 0x10, 0xcb, 0x02, 0x12, 0x2c, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x53,
	0x5f, 0x49, 0x44, 0x10, 0xca, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0xcc, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xcd, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0xc6, 0x02, 0x12, 0x21, 0x0a, 0x1c, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xc7, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xbe,
	0x02, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0xd0, 0x02, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd1, 0x02, 0x12, 0x12, 0x0a,
	0x0d, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xff,
	0x02, 0x12, 0x17, 0x0a, 0x12, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x80, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x77,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x78, 0x12, 0x0f, 0x0a, 0x0a, 0x42,
	0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xeb, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x42, 0x52, 0x4f, 0x57, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xec, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xf1, 0x02,
	0x12, 0x11, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xf0, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10,
	0x85, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x86, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x44, 0x10, 0xf3, 0x01, 0x12, 0x1a, 0x0a,
	0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e,
	0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf4, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xf6, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf7, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0c, 0x12,
	0x1a, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xee, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xef, 0x02, 0x12, 0x1f, 0x0a, 0x1a,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54,
	0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0xae, 0x01, 0x12, 0x10, 0x0a,
	0x0b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x8a, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x8b, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x94, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f,
	0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x95, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x59, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0xe9, 0x02, 0x12, 0x12,
	0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xd8, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd9, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x59, 0x5f, 0x4f, 0x46, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x55,
	0x42, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x10, 0xe2, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0x10, 0x12, 0x10, 0x0a, 0x0b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0xe1, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x5f, 0x49, 0x44, 0x10, 0xb9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0xba, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0xf8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x4f,
	0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xf9, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x64,
	0x12, 0x15, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0xdf, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xe0, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x56, 0x45,
	0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x14, 0x12, 0x12, 0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x41, 0x44, 0x58, 0x5f, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x10, 0xfe, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x91, 0x03, 0x12, 0x12,
	0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x49, 0x44, 0x10,
	0xd6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd7, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0xbc,
	0x01, 0x12, 0x28, 0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcc, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xcd, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xfa, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xfb, 0x01, 0x12,
	0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x10, 0x5c, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x55, 0x12,
	0x18, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xd4, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd5, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x45,
	0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb0, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xbd,
	0x01, 0x12, 0x2a, 0x0a, 0x25, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xbe, 0x01, 0x12, 0x22, 0x0a,
	0x1d, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0xaf,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xb4, 0x01, 0x12,
	0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x57, 0x12, 0x21, 0x0a, 0x1c, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0xbf, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc0, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0xc3, 0x01, 0x12, 0x22,
	0x0a, 0x1d, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10,
	0xc4, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x53, 0x12, 0x1f, 0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xca, 0x01, 0x12, 0x1e,
	0x0a, 0x1a, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x61, 0x12, 0x19,
	0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x56, 0x12, 0x1c, 0x0a, 0x17, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x41, 0x50, 0x10, 0x80, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x10, 0xb5, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x5f, 0x12, 0x22, 0x0a,
	0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x5e, 0x12, 0x2b, 0x0a, 0x27, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4c,
	0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x60, 0x12, 0x16,
	0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4d, 0x41, 0x4b, 0x45,
	0x47, 0x4f, 0x4f, 0x44, 0x10, 0x59, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x50, 0x44, 0x5f,
	0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x62,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4d, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x5a, 0x12, 0x20, 0x0a, 0x1b, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xd2, 0x01, 0x12, 0x25, 0x0a,
	0x20, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0xd3, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x53, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x5d, 0x12,
	0x2c, 0x0a, 0x27, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49,
	0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x8c, 0x03, 0x12, 0x25, 0x0a,
	0x20, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0xd0, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd1, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x50, 0x52,
	0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x18, 0x12, 0x21, 0x0a, 0x1c, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xb0, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xb1, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x52, 0x12, 0x1d, 0x0a,
	0x19, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0e,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc1,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xc2, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xbb, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x58, 0x12, 0x20, 0x0a, 0x1b,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xb3, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x8c,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x8d, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x80, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x81, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x7b, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x7f, 0x12, 0x20,
	0x0a, 0x1b, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4f, 0x57, 0x4e,
	0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xb7, 0x02,
	0x12, 0x25, 0x0a, 0x20, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x10, 0xb8, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x7d, 0x12, 0x1a, 0x0a,
	0x15, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf5, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x42,
	0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x63, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x17, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x5f, 0x53,
	0x44, 0x4b, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x82, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x59, 0x45, 0x41, 0x52,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x13, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x44, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x44, 0x10, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xfe, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4e, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xfd, 0x01, 0x12, 0x16,
	0x0a, 0x11, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0xfc, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47,
	0x4f, 0x52, 0x59, 0x10, 0x75, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f,
	0x52, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x76, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xee, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xed, 0x01, 0x12,
	0x11, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10,
	0x96, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x97, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x50, 0x43, 0x10, 0x98, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x5f,
	0x43, 0x50, 0x4d, 0x10, 0x99, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10,
	0xe7, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x10, 0xef, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x9a, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x9b, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x9c, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0xaa, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xab,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x9e, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x9f, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x14,
	0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0xa0, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x9d, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x52, 0x53,
	0x4f, 0x4e, 0x10, 0xa1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x50, 0x45,
	0x4f, 0x50, 0x4c, 0x45, 0x10, 0xa4, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53,
	0x50, 0x45, 0x4f, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa5, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f,
	0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x53, 0x10, 0xa6, 0x01, 0x12, 0x23,
	0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52,
	0x59, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x44,
	0x10, 0xa7, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0xa8, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0xa9, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0xa2, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x4b, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0xa3, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xcb,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x44, 0x10, 0x71, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x90, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x72, 0x12, 0x17,
	0x0a, 0x12, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x91, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0xea, 0x02, 0x12, 0x19,
	0x0a, 0x14, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xeb, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x10, 0xec, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0xed, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xf0,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49,
	0x43, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xf1, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x16, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0xd7, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x53, 0x10, 0xe0, 0x02, 0x12, 0x11,
	0x0a, 0x0c, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x92,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x93, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x49, 0x54,
	0x45, 0x10, 0x83, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x44, 0x10, 0xe8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xe9, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x81,
	0x03, 0x12, 0x18, 0x0a, 0x13, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x82, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x54,
	0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x84, 0x03,
	0x12, 0x18, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x85, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x4e,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x89, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x4e, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x8a, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x50, 0x4c, 0x43, 0x4d, 0x54, 0x10, 0xac, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x50, 0x4c, 0x43, 0x4d, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xad,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x59,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x55, 0x59, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xb8, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x59, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x44, 0x10, 0xb6, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0xb7, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x90, 0x4e, 0x12, 0x27, 0x0a,
	0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x91, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x92, 0x4e, 0x12,
	0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x93, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x94,
	0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x95, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0x96, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x97, 0x4e, 0x12, 0x27, 0x0a, 0x22,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0x98, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x99, 0x4e, 0x12, 0x28,
	0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x9a, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x9b, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x9c, 0x4e, 0x12, 0x28, 0x0a, 0x23,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x9d, 0x4e, 0x12, 0x28, 0x0a, 0x23, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x9e, 0x4e,
	0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0xf8, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf9, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xfa, 0x55, 0x12,
	0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0xfb, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xfc, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xfd, 0x55, 0x12, 0x23,
	0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xfe, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xff, 0x55, 0x12, 0x23, 0x0a, 0x1e, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x80, 0x56, 0x12, 0x23, 0x0a,
	0x1e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x81, 0x56, 0x12, 0x24, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x82, 0x56, 0x12, 0x24, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x83, 0x56, 0x12, 0x24,
	0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x84, 0x56, 0x12, 0x24, 0x0a, 0x1f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x85, 0x56, 0x12, 0x24, 0x0a, 0x1f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x86, 0x56,
	0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0xe0, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe1, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe2, 0x5d, 0x12,
	0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xe3, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe4, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x35, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe5, 0x5d, 0x12, 0x23,
	0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0xe6, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe7, 0x5d, 0x12, 0x23, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xe8, 0x5d, 0x12, 0x23, 0x0a,
	0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0xe9, 0x5d, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xea, 0x5d, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xeb, 0x5d, 0x12, 0x24,
	0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xec, 0x5d, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xed, 0x5d, 0x12, 0x24, 0x0a, 0x1f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xee, 0x5d,
	0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xc8,
	0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xc9, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xca, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0xcb, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0xcc, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0xcd, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xce, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xcf, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xd0, 0x65, 0x12, 0x1f, 0x0a, 0x1a, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xd1, 0x65, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xd2, 0x65, 0x12, 0x20, 0x0a, 0x1b,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xd3, 0x65, 0x12, 0x20,
	0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xd4, 0x65,
	0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xd5, 0x65, 0x12, 0x20, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0xd6, 0x65, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xb0, 0x6d, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xb1, 0x6d, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xb2, 0x6d, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xb3, 0x6d, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xb4, 0x6d, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xb5, 0x6d, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xb6, 0x6d, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xb7, 0x6d, 0x12, 0x26, 0x0a, 0x21, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xb8, 0x6d, 0x12, 0x26, 0x0a, 0x21,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xb9, 0x6d, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xba, 0x6d, 0x12, 0x27, 0x0a,
	0x22, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0xbb, 0x6d, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x31, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xbc, 0x6d, 0x12,
	0x27, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xbd, 0x6d, 0x12, 0x27, 0x0a, 0x22, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x31, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xbe,
	0x6d, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x98, 0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x99, 0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9a, 0x75, 0x12, 0x22, 0x0a,
	0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9b,
	0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x9c, 0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9d, 0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9e, 0x75, 0x12, 0x22, 0x0a,
	0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x9f,
	0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0xa0, 0x75, 0x12, 0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x39,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xa1, 0x75, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xa2, 0x75, 0x12, 0x23,
	0x0a, 0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xa3, 0x75, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xa4, 0x75, 0x12, 0x23, 0x0a, 0x1e, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x31, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xa5, 0x75, 0x12, 0x23, 0x0a,
	0x1e, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xa6, 0x75, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0x80, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x81, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x82, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x83, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x84, 0x7d, 0x12, 0x30, 0x0a, 0x2b,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x35, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x85, 0x7d, 0x12, 0x30,
	0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x36, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x86, 0x7d,
	0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x87, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0x88, 0x7d, 0x12, 0x30, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x89, 0x7d, 0x12, 0x31, 0x0a, 0x2c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x8a, 0x7d, 0x12, 0x31, 0x0a, 0x2c, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x8b, 0x7d, 0x12, 0x31, 0x0a, 0x2c,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x31, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x8c, 0x7d, 0x12,
	0x31, 0x0a, 0x2c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x8d, 0x7d, 0x12, 0x31, 0x0a, 0x2c, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0x8e, 0x7d, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xe8, 0x84, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xe9, 0x84, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xea,
	0x84, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xeb, 0x84,
	0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xec, 0x84, 0x01,
	0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xed, 0x84, 0x01, 0x12,
	0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xee, 0x84, 0x01, 0x12, 0x2d,
	0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x37, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xef, 0x84, 0x01, 0x12, 0x2d, 0x0a,
	0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf0, 0x84, 0x01, 0x12, 0x2d, 0x0a, 0x27,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf1, 0x84, 0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf2, 0x84, 0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf3, 0x84, 0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf4, 0x84, 0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf5, 0x84, 0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf6, 0x84, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xd0, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xd1, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x10, 0xd2, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0xd3, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x44, 0x10, 0xd4, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xd5, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44,
	0x10, 0xd6, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0xd7, 0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xd8,
	0x8c, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xd9, 0x8c,
	0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xda, 0x8c,
	0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xdb, 0x8c,
	0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xdc, 0x8c,
	0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xdd, 0x8c,
	0x01, 0x12, 0x2e, 0x0a, 0x28, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x31, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xde, 0x8c,
	0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xb8, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0xb9, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xba,
	0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xbb, 0x94, 0x01, 0x12, 0x29, 0x0a,
	0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0xbc, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xbd, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xbe, 0x94, 0x01, 0x12, 0x29,
	0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xbf, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0xc0, 0x94, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xc1, 0x94, 0x01, 0x12,
	0x2a, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xc2, 0x94, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0xc3, 0x94, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0xc4, 0x94, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xc5, 0x94, 0x01, 0x12,
	0x2a, 0x0a, 0x24, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xc6, 0x94, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x30, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa0, 0x9c, 0x01, 0x12, 0x30, 0x0a,
	0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa1, 0x9c, 0x01, 0x12,
	0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa2, 0x9c,
	0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0xa3, 0x9c, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xa4, 0x9c, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0xa5, 0x9c, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa6, 0x9c, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa7, 0x9c, 0x01, 0x12, 0x30, 0x0a, 0x2a, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x38, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa8, 0x9c, 0x01, 0x12, 0x30, 0x0a,
	0x2a, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f,
	0x39, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xa9, 0x9c, 0x01, 0x12,
	0x31, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x5f, 0x31, 0x30, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xaa,
	0x9c, 0x01, 0x12, 0x31, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x44, 0x10, 0xab, 0x9c, 0x01, 0x12, 0x31, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x49, 0x44, 0x10, 0xac, 0x9c, 0x01, 0x12, 0x31, 0x0a, 0x2b, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xad, 0x9c, 0x01, 0x12, 0x31, 0x0a, 0x2b, 0x42,
	0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0xae, 0x9c, 0x01, 0x12, 0x2c,
	0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x88, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x89, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x32, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x8a, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x8b, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x8c, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x8d,
	0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x8e, 0xa4, 0x01,
	0x12, 0x2c, 0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45,
	0x4c, 0x44, 0x5f, 0x37, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x8f, 0xa4, 0x01, 0x12, 0x2c,
	0x0a, 0x26, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x90, 0xa4, 0x01, 0x12, 0x2c, 0x0a, 0x26,
	0x42, 0x41, 0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x39,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x91, 0xa4, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41,
	0x43, 0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x30, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x92, 0xa4, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43,
	0x4b, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x31, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x93, 0xa4, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x32, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x94, 0xa4, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x33, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x95, 0xa4, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x42, 0x41, 0x43, 0x4b, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x31, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x10, 0x96, 0xa4, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x49, 0x44, 0x10, 0xa0, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa1, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa2, 0x8d, 0x06, 0x12, 0x21,
	0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa3, 0x8d,
	0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0xa4, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44,
	0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x49, 0x44, 0x10, 0xa5, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa6, 0x8d, 0x06, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x37,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa7, 0x8d, 0x06, 0x12, 0x21, 0x0a,
	0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10, 0xa8, 0x8d, 0x06,
	0x12, 0x21, 0x0a, 0x1b, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0xa9, 0x8d, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x30, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x88, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x89, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8a, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x33, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8b, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x34, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8c, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x35, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8d, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x36, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8e, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x37, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x8f, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x38, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x90, 0x95, 0x06, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x44, 0x49,
	0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x39, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x91, 0x95, 0x06, 0x22, 0xeb, 0x2d, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3d, 0x12, 0x24, 0x0a,
	0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x3a, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x39, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x38, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x3b, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x44, 0x53,
	0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x49, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x44, 0x53, 0x45,
	0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x46, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x45, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x48, 0x12, 0x2c, 0x0a, 0x28, 0x41,
	0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x44, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x44, 0x53,
	0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x47, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x43, 0x50, 0x4d, 0x10, 0x1a, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x17, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44,
	0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x43, 0x54, 0x52, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x41,
	0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f,
	0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x1c,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x1b, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x1d, 0x12, 0x27,
	0x0a, 0x23, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x50, 0x44, 0x10, 0x1e, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x53, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x44, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x53, 0x45, 0x4e, 0x53, 0x45,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x19, 0x12, 0x31, 0x0a, 0x2d, 0x41, 0x44,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x4f, 0x12, 0x30, 0x0a,
	0x2c, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x4c, 0x12,
	0x32, 0x0a, 0x2e, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x4b, 0x12, 0x37, 0x0a, 0x33, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x4e, 0x12, 0x30, 0x0a, 0x2c,
	0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x4a, 0x12, 0x35,
	0x0a, 0x31, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x4d, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x43, 0x50,
	0x4d, 0x10, 0x12, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x54, 0x52, 0x10, 0x10,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0e, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x14, 0x12, 0x23, 0x0a,
	0x1f, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x13, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55,
	0x45, 0x10, 0x15, 0x12, 0x2b, 0x0a, 0x27, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e,
	0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x50, 0x44, 0x10, 0x1f,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44,
	0x10, 0x2a, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x26, 0x12, 0x2f, 0x0a, 0x2b,
	0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x43, 0x12, 0x2e, 0x0a,
	0x2a, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f,
	0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x40, 0x12, 0x30, 0x0a,
	0x2c, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3f, 0x12,
	0x35, 0x0a, 0x31, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x42, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x3e, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x41, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x43, 0x50, 0x4d, 0x10, 0x22, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x43, 0x50,
	0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x50, 0x44, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x49,
	0x43, 0x4b, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x43, 0x50, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x20,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x54,
	0x52, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x06, 0x12, 0x1c,
	0x0a, 0x18, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x0b, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x23, 0x12, 0x29,
	0x0a, 0x25, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x43,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x4f, 0x55, 0x54, 0x5f, 0x43, 0x50, 0x44, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x21,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x50,
	0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x57, 0x4f, 0x4e, 0x10, 0x50, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x45, 0x43, 0x50, 0x4d, 0x10, 0x25, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x45, 0x43, 0x50, 0x4d, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x50, 0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x49, 0x44, 0x53, 0x10, 0x51, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x49, 0x44, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x52, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4c, 0x4c, 0x4f, 0x55, 0x54, 0x53,
	0x10, 0x53, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x54, 0x52, 0x10, 0x03, 0x12, 0x2d,
	0x0a, 0x28, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x5f, 0x49,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x81, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0x80, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x4f,
	0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x83, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x82, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x47, 0x4f, 0x4f, 0x47,
	0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x7f, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x4f,
	0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x7e, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x53, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f,
	0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x53, 0x10, 0x87, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x46, 0x49,
	0x4c, 0x4c, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x88, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x4e, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x89,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c,
	0x45, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x84, 0x01, 0x12, 0x27, 0x0a,
	0x22, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x55,
	0x4e, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x85, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45,
	0x52, 0x5f, 0x53, 0x41, 0x4c, 0x45, 0x53, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x86, 0x01, 0x12, 0x1c, 0x0a, 0x18,
	0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x7d, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x56, 0x49, 0x45,
	0x57, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x7c, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x4c,
	0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x7b, 0x12,
	0x26, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x53, 0x10, 0xb1, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0xb2, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d,
	0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0xb0, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x27, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x56, 0x45, 0x4e, 0x55, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f,
	0x43, 0x50, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x46, 0x55, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x53, 0x10, 0x54, 0x12,
	0x18, 0x0a, 0x14, 0x55, 0x4e, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x53, 0x10, 0x2b, 0x12, 0x2a, 0x0a, 0x26, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x57, 0x41, 0x4c, 0x4c, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x4e, 0x10, 0x79,
	0x12, 0x32, 0x0a, 0x2e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x53, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x57, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0x7a, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x5c, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x50,
	0x53, 0x45, 0x53, 0x10, 0x5d, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e,
	0x44, 0x53, 0x10, 0x5f, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53,
	0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x10, 0x60, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x55,
	0x54, 0x45, 0x53, 0x10, 0x61, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x53, 0x10, 0x62, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x53,
	0x10, 0x63, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x49, 0x4e, 0x44, 0x53, 0x10,
	0x64, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4d, 0x55, 0x54, 0x45, 0x53, 0x10, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x50,
	0x53, 0x10, 0x66, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x53, 0x10, 0x8b, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x31, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8f, 0x01, 0x12,
	0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x31, 0x30, 0x31, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x90, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x31,
	0x30, 0x32, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x91, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x92,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x31, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x93, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x32, 0x30, 0x32, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x94, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x32, 0x30, 0x33, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x95, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x33, 0x30, 0x30,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x96, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x33, 0x30, 0x31, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x97, 0x01, 0x12,
	0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x33, 0x30, 0x32, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x98, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x33,
	0x30, 0x33, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x99, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9a,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x31, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9b, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x34, 0x30, 0x32, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9c, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x33, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0x9d, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x35,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9e, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x34, 0x30, 0x36, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x9f, 0x01, 0x12,
	0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x37, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0xa0, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34,
	0x30, 0x38, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa1, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x30, 0x39, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa2,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x34, 0x31, 0x30, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa3, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x35, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa4, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x35, 0x30, 0x31, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0xa5, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x35, 0x30, 0x32,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa6, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x35, 0x30, 0x33, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa7, 0x01, 0x12,
	0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x36, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0xa8, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x36,
	0x30, 0x31, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xa9, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x36, 0x30, 0x32, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xaa,
	0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x36, 0x30, 0x33, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0xab, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x36, 0x30, 0x34, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xac, 0x01, 0x12, 0x24, 0x0a,
	0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x39, 0x30, 0x30, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x10, 0xad, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x39, 0x30, 0x31,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xae, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x8a, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x8c,
	0x01, 0x12, 0x26, 0x0a, 0x21, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xaf, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x54,
	0x41, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x8e, 0x01, 0x12, 0x26, 0x0a,
	0x21, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49,
	0x45, 0x53, 0x10, 0x8d, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50,
	0x4c, 0x41, 0x59, 0x53, 0x10, 0x67, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x68, 0x12, 0x26,
	0x0a, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x69, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b,
	0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x53, 0x10, 0x6a, 0x12, 0x1e, 0x0a, 0x1a, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x10, 0x6b, 0x12, 0x24, 0x0a, 0x20, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x6c, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x45, 0x4e, 0x47, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x53, 0x10, 0x6d, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x51, 0x55, 0x41, 0x52, 0x54, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x4d, 0x49, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x6f, 0x12, 0x27, 0x0a, 0x23, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x53, 0x4b, 0x49, 0x50, 0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x48, 0x4f,
	0x57, 0x4e, 0x10, 0x70, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x53, 0x10,
	0x71, 0x12, 0x24, 0x0a, 0x20, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x52,
	0x54, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x72, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x54, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x73, 0x12,
	0x25, 0x0a, 0x21, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x5e, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f,
	0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x74, 0x12, 0x26, 0x0a, 0x22, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10,
	0x75, 0x12, 0x1d, 0x0a, 0x19, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x50, 0x4d, 0x10, 0x58,
	0x12, 0x21, 0x0a, 0x1d, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x4e, 0x55,
	0x45, 0x10, 0x57, 0x12, 0x1b, 0x0a, 0x17, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x55,
	0x12, 0x23, 0x0a, 0x1f, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x59, 0x12, 0x29, 0x0a, 0x25, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x56,
	0x12, 0x23, 0x0a, 0x1f, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x42, 0x41,
	0x43, 0x4b, 0x53, 0x10, 0x76, 0x12, 0x2a, 0x0a, 0x26, 0x59, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x45, 0x43, 0x50, 0x4d, 0x10,
	0x5a, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x22, 0x39, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x22, 0x2e, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x41, 0x56, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x5f, 0xea, 0x41, 0x5c, 0x0a, 0x1f, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x7d, 0x2a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x32,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4f, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x21, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x38, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21, 0x0a, 0x1f, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xf2, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22,
	0x0a, 0x20, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x17, 0x0a,
	0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x21,
	0x12, 0x1f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x78, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb4, 0x03, 0x0a, 0x1d, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x35,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x6e, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xc0, 0x08, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x45, 0x0a, 0x07,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x67,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x15,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x1a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16,
	0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x16, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x3e, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x50, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x73, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x22, 0x48, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4d, 0x45, 0x54, 0x10, 0x02, 0x22, 0x81, 0x06, 0x0a,
	0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x0f, 0x77, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5c, 0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x77, 0x65,
	0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65,
	0x6b, 0x52, 0x13, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x1a, 0x47, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x79, 0x73, 0x22,
	0x98, 0x01, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x4f, 0x55, 0x52,
	0x4c, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x57, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x48, 0x52,
	0x45, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x5f, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x07, 0x42, 0x14, 0x0a, 0x12, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x32, 0xa6, 0x08, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2e, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9a, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3f, 0xda, 0x41, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x29, 0x3a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x4b, 0xda, 0x41, 0x12, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32,
	0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb5, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5e, 0xca, 0x41, 0x26, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x11, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x75, 0x6e, 0x12,
	0xca, 0x01, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0x1b, 0xca, 0x41,
	0x18, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42, 0xc6, 0x01, 0x0a, 0x1b, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0xaa, 0x02, 0x17, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x41,
	0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x1a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x41, 0x64, 0x73, 0x3a, 0x3a, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_admanager_v1_report_service_proto_rawDescOnce sync.Once
	file_google_ads_admanager_v1_report_service_proto_rawDescData = file_google_ads_admanager_v1_report_service_proto_rawDesc
)

func file_google_ads_admanager_v1_report_service_proto_rawDescGZIP() []byte {
	file_google_ads_admanager_v1_report_service_proto_rawDescOnce.Do(func() {
		file_google_ads_admanager_v1_report_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_admanager_v1_report_service_proto_rawDescData)
	})
	return file_google_ads_admanager_v1_report_service_proto_rawDescData
}

var file_google_ads_admanager_v1_report_service_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_google_ads_admanager_v1_report_service_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_google_ads_admanager_v1_report_service_proto_goTypes = []any{
	(Report_TimePeriodColumn)(0),              // 0: google.ads.admanager.v1.Report.TimePeriodColumn
	(Report_Dimension)(0),                     // 1: google.ads.admanager.v1.Report.Dimension
	(Report_Metric)(0),                        // 2: google.ads.admanager.v1.Report.Metric
	(Report_MetricValueType)(0),               // 3: google.ads.admanager.v1.Report.MetricValueType
	(Report_ReportType)(0),                    // 4: google.ads.admanager.v1.Report.ReportType
	(Report_Visibility)(0),                    // 5: google.ads.admanager.v1.Report.Visibility
	(Report_Filter_Operation)(0),              // 6: google.ads.admanager.v1.Report.Filter.Operation
	(Report_DateRange_RelativeDateRange)(0),   // 7: google.ads.admanager.v1.Report.DateRange.RelativeDateRange
	(ScheduleOptions_DeliveryCondition)(0),    // 8: google.ads.admanager.v1.ScheduleOptions.DeliveryCondition
	(Schedule_Frequency)(0),                   // 9: google.ads.admanager.v1.Schedule.Frequency
	(*Report)(nil),                            // 10: google.ads.admanager.v1.Report
	(*RunReportRequest)(nil),                  // 11: google.ads.admanager.v1.RunReportRequest
	(*RunReportMetadata)(nil),                 // 12: google.ads.admanager.v1.RunReportMetadata
	(*RunReportResponse)(nil),                 // 13: google.ads.admanager.v1.RunReportResponse
	(*GetReportRequest)(nil),                  // 14: google.ads.admanager.v1.GetReportRequest
	(*ListReportsRequest)(nil),                // 15: google.ads.admanager.v1.ListReportsRequest
	(*ListReportsResponse)(nil),               // 16: google.ads.admanager.v1.ListReportsResponse
	(*CreateReportRequest)(nil),               // 17: google.ads.admanager.v1.CreateReportRequest
	(*UpdateReportRequest)(nil),               // 18: google.ads.admanager.v1.UpdateReportRequest
	(*FetchReportResultRowsRequest)(nil),      // 19: google.ads.admanager.v1.FetchReportResultRowsRequest
	(*FetchReportResultRowsResponse)(nil),     // 20: google.ads.admanager.v1.FetchReportResultRowsResponse
	(*ReportDefinition)(nil),                  // 21: google.ads.admanager.v1.ReportDefinition
	(*ScheduleOptions)(nil),                   // 22: google.ads.admanager.v1.ScheduleOptions
	(*Schedule)(nil),                          // 23: google.ads.admanager.v1.Schedule
	(*Report_Value)(nil),                      // 24: google.ads.admanager.v1.Report.Value
	(*Report_Sort)(nil),                       // 25: google.ads.admanager.v1.Report.Sort
	(*Report_DataTable)(nil),                  // 26: google.ads.admanager.v1.Report.DataTable
	(*Report_Field)(nil),                      // 27: google.ads.admanager.v1.Report.Field
	(*Report_Slice)(nil),                      // 28: google.ads.admanager.v1.Report.Slice
	(*Report_Filter)(nil),                     // 29: google.ads.admanager.v1.Report.Filter
	(*Report_Flag)(nil),                       // 30: google.ads.admanager.v1.Report.Flag
	(*Report_DateRange)(nil),                  // 31: google.ads.admanager.v1.Report.DateRange
	(*Report_Value_IntList)(nil),              // 32: google.ads.admanager.v1.Report.Value.IntList
	(*Report_Value_StringList)(nil),           // 33: google.ads.admanager.v1.Report.Value.StringList
	(*Report_DataTable_Row)(nil),              // 34: google.ads.admanager.v1.Report.DataTable.Row
	(*Report_DataTable_MetricValueGroup)(nil), // 35: google.ads.admanager.v1.Report.DataTable.MetricValueGroup
	(*Report_Filter_FieldFilter)(nil),         // 36: google.ads.admanager.v1.Report.Filter.FieldFilter
	(*Report_Filter_FilterList)(nil),          // 37: google.ads.admanager.v1.Report.Filter.FilterList
	(*Report_DateRange_FixedDateRange)(nil),   // 38: google.ads.admanager.v1.Report.DateRange.FixedDateRange
	(*Schedule_WeeklySchedule)(nil),           // 39: google.ads.admanager.v1.Schedule.WeeklySchedule
	(*Schedule_MonthlySchedule)(nil),          // 40: google.ads.admanager.v1.Schedule.MonthlySchedule
	(*timestamppb.Timestamp)(nil),             // 41: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),             // 42: google.protobuf.FieldMask
	(*date.Date)(nil),                         // 43: google.type.Date
	(*timeofday.TimeOfDay)(nil),               // 44: google.type.TimeOfDay
	(dayofweek.DayOfWeek)(0),                  // 45: google.type.DayOfWeek
	(*longrunningpb.Operation)(nil),           // 46: google.longrunning.Operation
}
var file_google_ads_admanager_v1_report_service_proto_depIdxs = []int32{
	5,  // 0: google.ads.admanager.v1.Report.visibility:type_name -> google.ads.admanager.v1.Report.Visibility
	21, // 1: google.ads.admanager.v1.Report.report_definition:type_name -> google.ads.admanager.v1.ReportDefinition
	41, // 2: google.ads.admanager.v1.Report.update_time:type_name -> google.protobuf.Timestamp
	41, // 3: google.ads.admanager.v1.Report.create_time:type_name -> google.protobuf.Timestamp
	22, // 4: google.ads.admanager.v1.Report.schedule_options:type_name -> google.ads.admanager.v1.ScheduleOptions
	10, // 5: google.ads.admanager.v1.ListReportsResponse.reports:type_name -> google.ads.admanager.v1.Report
	10, // 6: google.ads.admanager.v1.CreateReportRequest.report:type_name -> google.ads.admanager.v1.Report
	10, // 7: google.ads.admanager.v1.UpdateReportRequest.report:type_name -> google.ads.admanager.v1.Report
	42, // 8: google.ads.admanager.v1.UpdateReportRequest.update_mask:type_name -> google.protobuf.FieldMask
	34, // 9: google.ads.admanager.v1.FetchReportResultRowsResponse.rows:type_name -> google.ads.admanager.v1.Report.DataTable.Row
	41, // 10: google.ads.admanager.v1.FetchReportResultRowsResponse.run_time:type_name -> google.protobuf.Timestamp
	38, // 11: google.ads.admanager.v1.FetchReportResultRowsResponse.date_ranges:type_name -> google.ads.admanager.v1.Report.DateRange.FixedDateRange
	38, // 12: google.ads.admanager.v1.FetchReportResultRowsResponse.comparison_date_ranges:type_name -> google.ads.admanager.v1.Report.DateRange.FixedDateRange
	1,  // 13: google.ads.admanager.v1.ReportDefinition.dimensions:type_name -> google.ads.admanager.v1.Report.Dimension
	2,  // 14: google.ads.admanager.v1.ReportDefinition.metrics:type_name -> google.ads.admanager.v1.Report.Metric
	29, // 15: google.ads.admanager.v1.ReportDefinition.filters:type_name -> google.ads.admanager.v1.Report.Filter
	31, // 16: google.ads.admanager.v1.ReportDefinition.date_range:type_name -> google.ads.admanager.v1.Report.DateRange
	31, // 17: google.ads.admanager.v1.ReportDefinition.comparison_date_range:type_name -> google.ads.admanager.v1.Report.DateRange
	4,  // 18: google.ads.admanager.v1.ReportDefinition.report_type:type_name -> google.ads.admanager.v1.Report.ReportType
	0,  // 19: google.ads.admanager.v1.ReportDefinition.time_period_column:type_name -> google.ads.admanager.v1.Report.TimePeriodColumn
	30, // 20: google.ads.admanager.v1.ReportDefinition.flags:type_name -> google.ads.admanager.v1.Report.Flag
	25, // 21: google.ads.admanager.v1.ReportDefinition.sorts:type_name -> google.ads.admanager.v1.Report.Sort
	23, // 22: google.ads.admanager.v1.ScheduleOptions.schedule:type_name -> google.ads.admanager.v1.Schedule
	8,  // 23: google.ads.admanager.v1.ScheduleOptions.delivery_condition:type_name -> google.ads.admanager.v1.ScheduleOptions.DeliveryCondition
	30, // 24: google.ads.admanager.v1.ScheduleOptions.flags:type_name -> google.ads.admanager.v1.Report.Flag
	39, // 25: google.ads.admanager.v1.Schedule.weekly_schedule:type_name -> google.ads.admanager.v1.Schedule.WeeklySchedule
	40, // 26: google.ads.admanager.v1.Schedule.monthly_schedule:type_name -> google.ads.admanager.v1.Schedule.MonthlySchedule
	43, // 27: google.ads.admanager.v1.Schedule.start_date:type_name -> google.type.Date
	43, // 28: google.ads.admanager.v1.Schedule.end_date:type_name -> google.type.Date
	9,  // 29: google.ads.admanager.v1.Schedule.frequency:type_name -> google.ads.admanager.v1.Schedule.Frequency
	44, // 30: google.ads.admanager.v1.Schedule.start_time:type_name -> google.type.TimeOfDay
	32, // 31: google.ads.admanager.v1.Report.Value.int_list_value:type_name -> google.ads.admanager.v1.Report.Value.IntList
	33, // 32: google.ads.admanager.v1.Report.Value.string_list_value:type_name -> google.ads.admanager.v1.Report.Value.StringList
	27, // 33: google.ads.admanager.v1.Report.Sort.field:type_name -> google.ads.admanager.v1.Report.Field
	28, // 34: google.ads.admanager.v1.Report.Sort.slice:type_name -> google.ads.admanager.v1.Report.Slice
	3,  // 35: google.ads.admanager.v1.Report.Sort.metric_value_type:type_name -> google.ads.admanager.v1.Report.MetricValueType
	1,  // 36: google.ads.admanager.v1.Report.Field.dimension:type_name -> google.ads.admanager.v1.Report.Dimension
	2,  // 37: google.ads.admanager.v1.Report.Field.metric:type_name -> google.ads.admanager.v1.Report.Metric
	1,  // 38: google.ads.admanager.v1.Report.Slice.dimension:type_name -> google.ads.admanager.v1.Report.Dimension
	24, // 39: google.ads.admanager.v1.Report.Slice.value:type_name -> google.ads.admanager.v1.Report.Value
	36, // 40: google.ads.admanager.v1.Report.Filter.field_filter:type_name -> google.ads.admanager.v1.Report.Filter.FieldFilter
	29, // 41: google.ads.admanager.v1.Report.Filter.not_filter:type_name -> google.ads.admanager.v1.Report.Filter
	37, // 42: google.ads.admanager.v1.Report.Filter.and_filter:type_name -> google.ads.admanager.v1.Report.Filter.FilterList
	37, // 43: google.ads.admanager.v1.Report.Filter.or_filter:type_name -> google.ads.admanager.v1.Report.Filter.FilterList
	29, // 44: google.ads.admanager.v1.Report.Flag.filters:type_name -> google.ads.admanager.v1.Report.Filter
	38, // 45: google.ads.admanager.v1.Report.DateRange.fixed:type_name -> google.ads.admanager.v1.Report.DateRange.FixedDateRange
	7,  // 46: google.ads.admanager.v1.Report.DateRange.relative:type_name -> google.ads.admanager.v1.Report.DateRange.RelativeDateRange
	24, // 47: google.ads.admanager.v1.Report.DataTable.Row.dimension_values:type_name -> google.ads.admanager.v1.Report.Value
	35, // 48: google.ads.admanager.v1.Report.DataTable.Row.metric_value_groups:type_name -> google.ads.admanager.v1.Report.DataTable.MetricValueGroup
	24, // 49: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.primary_values:type_name -> google.ads.admanager.v1.Report.Value
	24, // 50: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.primary_percent_of_total_values:type_name -> google.ads.admanager.v1.Report.Value
	24, // 51: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.comparison_values:type_name -> google.ads.admanager.v1.Report.Value
	24, // 52: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.comparison_percent_of_total_values:type_name -> google.ads.admanager.v1.Report.Value
	24, // 53: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.absolute_change_values:type_name -> google.ads.admanager.v1.Report.Value
	24, // 54: google.ads.admanager.v1.Report.DataTable.MetricValueGroup.relative_change_values:type_name -> google.ads.admanager.v1.Report.Value
	27, // 55: google.ads.admanager.v1.Report.Filter.FieldFilter.field:type_name -> google.ads.admanager.v1.Report.Field
	6,  // 56: google.ads.admanager.v1.Report.Filter.FieldFilter.operation:type_name -> google.ads.admanager.v1.Report.Filter.Operation
	24, // 57: google.ads.admanager.v1.Report.Filter.FieldFilter.values:type_name -> google.ads.admanager.v1.Report.Value
	28, // 58: google.ads.admanager.v1.Report.Filter.FieldFilter.slice:type_name -> google.ads.admanager.v1.Report.Slice
	3,  // 59: google.ads.admanager.v1.Report.Filter.FieldFilter.metric_value_type:type_name -> google.ads.admanager.v1.Report.MetricValueType
	29, // 60: google.ads.admanager.v1.Report.Filter.FilterList.filters:type_name -> google.ads.admanager.v1.Report.Filter
	43, // 61: google.ads.admanager.v1.Report.DateRange.FixedDateRange.start_date:type_name -> google.type.Date
	43, // 62: google.ads.admanager.v1.Report.DateRange.FixedDateRange.end_date:type_name -> google.type.Date
	45, // 63: google.ads.admanager.v1.Schedule.WeeklySchedule.weekly_scheduled_days:type_name -> google.type.DayOfWeek
	14, // 64: google.ads.admanager.v1.ReportService.GetReport:input_type -> google.ads.admanager.v1.GetReportRequest
	15, // 65: google.ads.admanager.v1.ReportService.ListReports:input_type -> google.ads.admanager.v1.ListReportsRequest
	17, // 66: google.ads.admanager.v1.ReportService.CreateReport:input_type -> google.ads.admanager.v1.CreateReportRequest
	18, // 67: google.ads.admanager.v1.ReportService.UpdateReport:input_type -> google.ads.admanager.v1.UpdateReportRequest
	11, // 68: google.ads.admanager.v1.ReportService.RunReport:input_type -> google.ads.admanager.v1.RunReportRequest
	19, // 69: google.ads.admanager.v1.ReportService.FetchReportResultRows:input_type -> google.ads.admanager.v1.FetchReportResultRowsRequest
	10, // 70: google.ads.admanager.v1.ReportService.GetReport:output_type -> google.ads.admanager.v1.Report
	16, // 71: google.ads.admanager.v1.ReportService.ListReports:output_type -> google.ads.admanager.v1.ListReportsResponse
	10, // 72: google.ads.admanager.v1.ReportService.CreateReport:output_type -> google.ads.admanager.v1.Report
	10, // 73: google.ads.admanager.v1.ReportService.UpdateReport:output_type -> google.ads.admanager.v1.Report
	46, // 74: google.ads.admanager.v1.ReportService.RunReport:output_type -> google.longrunning.Operation
	20, // 75: google.ads.admanager.v1.ReportService.FetchReportResultRows:output_type -> google.ads.admanager.v1.FetchReportResultRowsResponse
	70, // [70:76] is the sub-list for method output_type
	64, // [64:70] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_google_ads_admanager_v1_report_service_proto_init() }
func file_google_ads_admanager_v1_report_service_proto_init() {
	if File_google_ads_admanager_v1_report_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_ads_admanager_v1_report_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RunReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RunReportMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RunReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CreateReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*FetchReportResultRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FetchReportResultRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ReportDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ScheduleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Report_DataTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Flag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Report_DateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Value_IntList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Value_StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Report_DataTable_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Report_DataTable_MetricValueGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Filter_FieldFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Report_Filter_FilterList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Report_DateRange_FixedDateRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*Schedule_WeeklySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_report_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*Schedule_MonthlySchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[13].OneofWrappers = []any{
		(*Schedule_WeeklySchedule_)(nil),
		(*Schedule_MonthlySchedule_)(nil),
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[14].OneofWrappers = []any{
		(*Report_Value_IntValue)(nil),
		(*Report_Value_DoubleValue)(nil),
		(*Report_Value_StringValue)(nil),
		(*Report_Value_BoolValue)(nil),
		(*Report_Value_IntListValue)(nil),
		(*Report_Value_StringListValue)(nil),
		(*Report_Value_BytesValue)(nil),
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[17].OneofWrappers = []any{
		(*Report_Field_Dimension)(nil),
		(*Report_Field_Metric)(nil),
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[19].OneofWrappers = []any{
		(*Report_Filter_FieldFilter_)(nil),
		(*Report_Filter_NotFilter)(nil),
		(*Report_Filter_AndFilter)(nil),
		(*Report_Filter_OrFilter)(nil),
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[21].OneofWrappers = []any{
		(*Report_DateRange_Fixed)(nil),
		(*Report_DateRange_Relative)(nil),
	}
	file_google_ads_admanager_v1_report_service_proto_msgTypes[26].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_admanager_v1_report_service_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_ads_admanager_v1_report_service_proto_goTypes,
		DependencyIndexes: file_google_ads_admanager_v1_report_service_proto_depIdxs,
		EnumInfos:         file_google_ads_admanager_v1_report_service_proto_enumTypes,
		MessageInfos:      file_google_ads_admanager_v1_report_service_proto_msgTypes,
	}.Build()
	File_google_ads_admanager_v1_report_service_proto = out.File
	file_google_ads_admanager_v1_report_service_proto_rawDesc = nil
	file_google_ads_admanager_v1_report_service_proto_goTypes = nil
	file_google_ads_admanager_v1_report_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReportServiceClient is the client API for ReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReportServiceClient interface {
	// API to retrieve a `Report` object.
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*Report, error)
	// API to retrieve a list of `Report` objects.
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
	// API to create a `Report` object.
	CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*Report, error)
	// API to update a `Report` object.
	UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*Report, error)
	// Initiates the execution of an existing report asynchronously. Users can
	// get the report by polling this operation via
	// `OperationsService.GetOperation`.
	// Poll every 5 seconds initially, with an exponential
	// backoff. Once a report is complete, the operation will contain a
	// `RunReportResponse` in its response field containing a report_result that
	// can be passed to the `FetchReportResultRows` method to retrieve the report
	// data.
	RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Returns the result rows from a completed report.
	// The caller must have previously called `RunReport` and waited for that
	// operation to complete. The rows will be returned according to the order
	// specified by the `sorts` member of the report definition.
	FetchReportResultRows(ctx context.Context, in *FetchReportResultRowsRequest, opts ...grpc.CallOption) (*FetchReportResultRowsResponse, error)
}

type reportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportServiceClient(cc grpc.ClientConnInterface) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/GetReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/ListReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) CreateReport(ctx context.Context, in *CreateReportRequest, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/CreateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) UpdateReport(ctx context.Context, in *UpdateReportRequest, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/UpdateReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) RunReport(ctx context.Context, in *RunReportRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/RunReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) FetchReportResultRows(ctx context.Context, in *FetchReportResultRowsRequest, opts ...grpc.CallOption) (*FetchReportResultRowsResponse, error) {
	out := new(FetchReportResultRowsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.ReportService/FetchReportResultRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportServiceServer is the server API for ReportService service.
type ReportServiceServer interface {
	// API to retrieve a `Report` object.
	GetReport(context.Context, *GetReportRequest) (*Report, error)
	// API to retrieve a list of `Report` objects.
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	// API to create a `Report` object.
	CreateReport(context.Context, *CreateReportRequest) (*Report, error)
	// API to update a `Report` object.
	UpdateReport(context.Context, *UpdateReportRequest) (*Report, error)
	// Initiates the execution of an existing report asynchronously. Users can
	// get the report by polling this operation via
	// `OperationsService.GetOperation`.
	// Poll every 5 seconds initially, with an exponential
	// backoff. Once a report is complete, the operation will contain a
	// `RunReportResponse` in its response field containing a report_result that
	// can be passed to the `FetchReportResultRows` method to retrieve the report
	// data.
	RunReport(context.Context, *RunReportRequest) (*longrunningpb.Operation, error)
	// Returns the result rows from a completed report.
	// The caller must have previously called `RunReport` and waited for that
	// operation to complete. The rows will be returned according to the order
	// specified by the `sorts` member of the report definition.
	FetchReportResultRows(context.Context, *FetchReportResultRowsRequest) (*FetchReportResultRowsResponse, error)
}

// UnimplementedReportServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReportServiceServer struct {
}

func (*UnimplementedReportServiceServer) GetReport(context.Context, *GetReportRequest) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (*UnimplementedReportServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (*UnimplementedReportServiceServer) CreateReport(context.Context, *CreateReportRequest) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReport not implemented")
}
func (*UnimplementedReportServiceServer) UpdateReport(context.Context, *UpdateReportRequest) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReport not implemented")
}
func (*UnimplementedReportServiceServer) RunReport(context.Context, *RunReportRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunReport not implemented")
}
func (*UnimplementedReportServiceServer) FetchReportResultRows(context.Context, *FetchReportResultRowsRequest) (*FetchReportResultRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchReportResultRows not implemented")
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/GetReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/ListReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_CreateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).CreateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/CreateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).CreateReport(ctx, req.(*CreateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_UpdateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).UpdateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/UpdateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).UpdateReport(ctx, req.(*UpdateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_RunReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).RunReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/RunReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).RunReport(ctx, req.(*RunReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_FetchReportResultRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReportResultRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).FetchReportResultRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.ReportService/FetchReportResultRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).FetchReportResultRows(ctx, req.(*FetchReportResultRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.admanager.v1.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReport",
			Handler:    _ReportService_GetReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _ReportService_ListReports_Handler,
		},
		{
			MethodName: "CreateReport",
			Handler:    _ReportService_CreateReport_Handler,
		},
		{
			MethodName: "UpdateReport",
			Handler:    _ReportService_UpdateReport_Handler,
		},
		{
			MethodName: "RunReport",
			Handler:    _ReportService_RunReport_Handler,
		},
		{
			MethodName: "FetchReportResultRows",
			Handler:    _ReportService_FetchReportResultRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/admanager/v1/report_service.proto",
}
