// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/ads/admanager/v1/entity_signals_mapping_service.proto

package admanager

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request object for `GetEntitySignalsMapping` method.
type GetEntitySignalsMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The resource name of the EntitySignalsMapping.
	// Format:
	// `networks/{network_code}/entitySignalsMappings/{entity_signals_mapping_id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetEntitySignalsMappingRequest) Reset() {
	*x = GetEntitySignalsMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEntitySignalsMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEntitySignalsMappingRequest) ProtoMessage() {}

func (x *GetEntitySignalsMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEntitySignalsMappingRequest.ProtoReflect.Descriptor instead.
func (*GetEntitySignalsMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetEntitySignalsMappingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request object for `ListEntitySignalsMappings` method.
type ListEntitySignalsMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent, which owns this collection of EntitySignalsMappings.
	// Format: `networks/{network_code}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of `EntitySignalsMappings` to return. The
	// service may return fewer than this value. If unspecified, at most 50
	// `EntitySignalsMappings` will be returned. The maximum value is 1000; values
	// above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous
	// `ListEntitySignalsMappings` call. Provide this to retrieve the subsequent
	// page.
	//
	// When paginating, all other parameters provided to
	// `ListEntitySignalsMappings` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Expression to filter the response.
	// See syntax details at
	// https://developers.google.com/ad-manager/api/beta/filters
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Expression to specify sorting order.
	// See syntax details at
	// https://developers.google.com/ad-manager/api/beta/filters#order
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Optional. Number of individual resources to skip while paginating.
	Skip int32 `protobuf:"varint,6,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *ListEntitySignalsMappingsRequest) Reset() {
	*x = ListEntitySignalsMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitySignalsMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitySignalsMappingsRequest) ProtoMessage() {}

func (x *ListEntitySignalsMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitySignalsMappingsRequest.ProtoReflect.Descriptor instead.
func (*ListEntitySignalsMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListEntitySignalsMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListEntitySignalsMappingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListEntitySignalsMappingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListEntitySignalsMappingsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListEntitySignalsMappingsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListEntitySignalsMappingsRequest) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

// Request object for 'CreateEntitySignalsMapping' method.
type CreateEntitySignalsMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this EntitySignalsMapping will be
	// created. Format: `networks/{network_code}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The EntitySignalsMapping object to create.
	EntitySignalsMapping *EntitySignalsMapping `protobuf:"bytes,2,opt,name=entity_signals_mapping,json=entitySignalsMapping,proto3" json:"entity_signals_mapping,omitempty"`
}

func (x *CreateEntitySignalsMappingRequest) Reset() {
	*x = CreateEntitySignalsMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEntitySignalsMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntitySignalsMappingRequest) ProtoMessage() {}

func (x *CreateEntitySignalsMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntitySignalsMappingRequest.ProtoReflect.Descriptor instead.
func (*CreateEntitySignalsMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateEntitySignalsMappingRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateEntitySignalsMappingRequest) GetEntitySignalsMapping() *EntitySignalsMapping {
	if x != nil {
		return x.EntitySignalsMapping
	}
	return nil
}

// Request object for 'UpdateEntitySignalsMapping' method.
type UpdateEntitySignalsMappingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The `EntitySignalsMapping` to update.
	//
	// The EntitySignalsMapping's name is used to identify the
	// EntitySignalsMapping to update.
	// Format:
	// `networks/{network_code}/entitySignalsMappings/{entity_signals_mapping}`
	EntitySignalsMapping *EntitySignalsMapping `protobuf:"bytes,1,opt,name=entity_signals_mapping,json=entitySignalsMapping,proto3" json:"entity_signals_mapping,omitempty"`
	// Required. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateEntitySignalsMappingRequest) Reset() {
	*x = UpdateEntitySignalsMappingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEntitySignalsMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEntitySignalsMappingRequest) ProtoMessage() {}

func (x *UpdateEntitySignalsMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEntitySignalsMappingRequest.ProtoReflect.Descriptor instead.
func (*UpdateEntitySignalsMappingRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateEntitySignalsMappingRequest) GetEntitySignalsMapping() *EntitySignalsMapping {
	if x != nil {
		return x.EntitySignalsMapping
	}
	return nil
}

func (x *UpdateEntitySignalsMappingRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Response object for `ListEntitySignalsMappingsRequest` containing matching
// `EntitySignalsMapping` resources.
type ListEntitySignalsMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `EntitySignalsMapping` from the specified network.
	EntitySignalsMappings []*EntitySignalsMapping `protobuf:"bytes,1,rep,name=entity_signals_mappings,json=entitySignalsMappings,proto3" json:"entity_signals_mappings,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of `EntitySignalsMappings`.
	// If a filter was included in the request, this reflects the total number
	// after the filtering is applied.
	//
	// `total_size` will not be calculated in the response unless it has been
	// included in a response field mask. The response field mask can be provided
	// to the method by using the URL parameter `$fields` or `fields`, or by using
	// the HTTP/gRPC header `X-Goog-FieldMask`.
	//
	// For more information, see
	// https://developers.google.com/ad-manager/api/beta/field-masks
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListEntitySignalsMappingsResponse) Reset() {
	*x = ListEntitySignalsMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEntitySignalsMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEntitySignalsMappingsResponse) ProtoMessage() {}

func (x *ListEntitySignalsMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEntitySignalsMappingsResponse.ProtoReflect.Descriptor instead.
func (*ListEntitySignalsMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListEntitySignalsMappingsResponse) GetEntitySignalsMappings() []*EntitySignalsMapping {
	if x != nil {
		return x.EntitySignalsMappings
	}
	return nil
}

func (x *ListEntitySignalsMappingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListEntitySignalsMappingsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// Request object for `BatchCreateEntitySignalsMappings` method.
type BatchCreateEntitySignalsMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where `EntitySignalsMappings` will be
	// created. Format: `networks/{network_code}` The parent field in the
	// CreateEntitySignalsMappingRequest must match this field.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The `EntitySignalsMapping` objects to create.
	// A maximum of 100 objects can be created in a batch.
	Requests []*CreateEntitySignalsMappingRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchCreateEntitySignalsMappingsRequest) Reset() {
	*x = BatchCreateEntitySignalsMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEntitySignalsMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEntitySignalsMappingsRequest) ProtoMessage() {}

func (x *BatchCreateEntitySignalsMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEntitySignalsMappingsRequest.ProtoReflect.Descriptor instead.
func (*BatchCreateEntitySignalsMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{5}
}

func (x *BatchCreateEntitySignalsMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchCreateEntitySignalsMappingsRequest) GetRequests() []*CreateEntitySignalsMappingRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response object for `BatchCreateEntitySignalsMappings` method.
type BatchCreateEntitySignalsMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `EntitySignalsMapping` objects created.
	EntitySignalsMappings []*EntitySignalsMapping `protobuf:"bytes,1,rep,name=entity_signals_mappings,json=entitySignalsMappings,proto3" json:"entity_signals_mappings,omitempty"`
}

func (x *BatchCreateEntitySignalsMappingsResponse) Reset() {
	*x = BatchCreateEntitySignalsMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCreateEntitySignalsMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCreateEntitySignalsMappingsResponse) ProtoMessage() {}

func (x *BatchCreateEntitySignalsMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCreateEntitySignalsMappingsResponse.ProtoReflect.Descriptor instead.
func (*BatchCreateEntitySignalsMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{6}
}

func (x *BatchCreateEntitySignalsMappingsResponse) GetEntitySignalsMappings() []*EntitySignalsMapping {
	if x != nil {
		return x.EntitySignalsMappings
	}
	return nil
}

// Request object for `BatchUpdateEntitySignalsMappings` method.
type BatchUpdateEntitySignalsMappingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where `EntitySignalsMappings` will be
	// updated. Format: `networks/{network_code}` The parent field in the
	// UpdateEntitySignalsMappingRequest must match this field.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The `EntitySignalsMapping` objects to update.
	// A maximum of 100 objects can be updated in a batch.
	Requests []*UpdateEntitySignalsMappingRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BatchUpdateEntitySignalsMappingsRequest) Reset() {
	*x = BatchUpdateEntitySignalsMappingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateEntitySignalsMappingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateEntitySignalsMappingsRequest) ProtoMessage() {}

func (x *BatchUpdateEntitySignalsMappingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateEntitySignalsMappingsRequest.ProtoReflect.Descriptor instead.
func (*BatchUpdateEntitySignalsMappingsRequest) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{7}
}

func (x *BatchUpdateEntitySignalsMappingsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchUpdateEntitySignalsMappingsRequest) GetRequests() []*UpdateEntitySignalsMappingRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// Response object for `BatchUpdateEntitySignalsMappings` method.
type BatchUpdateEntitySignalsMappingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The `EntitySignalsMapping` objects updated.
	EntitySignalsMappings []*EntitySignalsMapping `protobuf:"bytes,1,rep,name=entity_signals_mappings,json=entitySignalsMappings,proto3" json:"entity_signals_mappings,omitempty"`
}

func (x *BatchUpdateEntitySignalsMappingsResponse) Reset() {
	*x = BatchUpdateEntitySignalsMappingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchUpdateEntitySignalsMappingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUpdateEntitySignalsMappingsResponse) ProtoMessage() {}

func (x *BatchUpdateEntitySignalsMappingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUpdateEntitySignalsMappingsResponse.ProtoReflect.Descriptor instead.
func (*BatchUpdateEntitySignalsMappingsResponse) Descriptor() ([]byte, []int) {
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP(), []int{8}
}

func (x *BatchUpdateEntitySignalsMappingsResponse) GetEntitySignalsMappings() []*EntitySignalsMapping {
	if x != nil {
		return x.EntitySignalsMappings
	}
	return nil
}

var File_google_ads_admanager_v1_entity_signals_mapping_service_proto protoreflect.FileDescriptor

var file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x73, 0x2f, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x2f, 0x0a, 0x2d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x22, 0xdc, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x35, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2f, 0x12, 0x2d, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x68, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0xcf, 0x01, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x68, 0x0a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xd1, 0x01, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x27, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x2f, 0x12, 0x2d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd5, 0x01, 0x0a,
	0x27, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2f,
	0x12, 0x2d, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x28, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e,
	0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x32, 0xe4, 0x0b, 0x0a, 0x1b, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64,
	0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x3c, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xd2, 0x01, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x3e, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f,
	0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0xf6, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0xda, 0x41, 0x1d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x47, 0x3a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x93, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x22, 0x89, 0x01, 0xda, 0x41, 0x22, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5e,
	0x3a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x32, 0x44, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xff,
	0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xda, 0x41, 0x0f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0xff, 0x01, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0xda, 0x41, 0x0f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3e, 0x3a, 0x01, 0x2a, 0x22, 0x39, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x1a, 0x1b, 0xca, 0x41, 0x18, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x42,
	0xd4, 0x01, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x64, 0x73, 0x2e, 0x61, 0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42,
	0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x64, 0x73, 0x2f, 0x61,
	0x64, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0xaa, 0x02, 0x17, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41,
	0x64, 0x73, 0x2e, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x17, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x41, 0x64, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x1a, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x3a, 0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x41, 0x64, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescOnce sync.Once
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescData = file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDesc
)

func file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescGZIP() []byte {
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescOnce.Do(func() {
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescData)
	})
	return file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDescData
}

var file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_google_ads_admanager_v1_entity_signals_mapping_service_proto_goTypes = []any{
	(*GetEntitySignalsMappingRequest)(nil),           // 0: google.ads.admanager.v1.GetEntitySignalsMappingRequest
	(*ListEntitySignalsMappingsRequest)(nil),         // 1: google.ads.admanager.v1.ListEntitySignalsMappingsRequest
	(*CreateEntitySignalsMappingRequest)(nil),        // 2: google.ads.admanager.v1.CreateEntitySignalsMappingRequest
	(*UpdateEntitySignalsMappingRequest)(nil),        // 3: google.ads.admanager.v1.UpdateEntitySignalsMappingRequest
	(*ListEntitySignalsMappingsResponse)(nil),        // 4: google.ads.admanager.v1.ListEntitySignalsMappingsResponse
	(*BatchCreateEntitySignalsMappingsRequest)(nil),  // 5: google.ads.admanager.v1.BatchCreateEntitySignalsMappingsRequest
	(*BatchCreateEntitySignalsMappingsResponse)(nil), // 6: google.ads.admanager.v1.BatchCreateEntitySignalsMappingsResponse
	(*BatchUpdateEntitySignalsMappingsRequest)(nil),  // 7: google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsRequest
	(*BatchUpdateEntitySignalsMappingsResponse)(nil), // 8: google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsResponse
	(*EntitySignalsMapping)(nil),                     // 9: google.ads.admanager.v1.EntitySignalsMapping
	(*fieldmaskpb.FieldMask)(nil),                    // 10: google.protobuf.FieldMask
}
var file_google_ads_admanager_v1_entity_signals_mapping_service_proto_depIdxs = []int32{
	9,  // 0: google.ads.admanager.v1.CreateEntitySignalsMappingRequest.entity_signals_mapping:type_name -> google.ads.admanager.v1.EntitySignalsMapping
	9,  // 1: google.ads.admanager.v1.UpdateEntitySignalsMappingRequest.entity_signals_mapping:type_name -> google.ads.admanager.v1.EntitySignalsMapping
	10, // 2: google.ads.admanager.v1.UpdateEntitySignalsMappingRequest.update_mask:type_name -> google.protobuf.FieldMask
	9,  // 3: google.ads.admanager.v1.ListEntitySignalsMappingsResponse.entity_signals_mappings:type_name -> google.ads.admanager.v1.EntitySignalsMapping
	2,  // 4: google.ads.admanager.v1.BatchCreateEntitySignalsMappingsRequest.requests:type_name -> google.ads.admanager.v1.CreateEntitySignalsMappingRequest
	9,  // 5: google.ads.admanager.v1.BatchCreateEntitySignalsMappingsResponse.entity_signals_mappings:type_name -> google.ads.admanager.v1.EntitySignalsMapping
	3,  // 6: google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsRequest.requests:type_name -> google.ads.admanager.v1.UpdateEntitySignalsMappingRequest
	9,  // 7: google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsResponse.entity_signals_mappings:type_name -> google.ads.admanager.v1.EntitySignalsMapping
	0,  // 8: google.ads.admanager.v1.EntitySignalsMappingService.GetEntitySignalsMapping:input_type -> google.ads.admanager.v1.GetEntitySignalsMappingRequest
	1,  // 9: google.ads.admanager.v1.EntitySignalsMappingService.ListEntitySignalsMappings:input_type -> google.ads.admanager.v1.ListEntitySignalsMappingsRequest
	2,  // 10: google.ads.admanager.v1.EntitySignalsMappingService.CreateEntitySignalsMapping:input_type -> google.ads.admanager.v1.CreateEntitySignalsMappingRequest
	3,  // 11: google.ads.admanager.v1.EntitySignalsMappingService.UpdateEntitySignalsMapping:input_type -> google.ads.admanager.v1.UpdateEntitySignalsMappingRequest
	5,  // 12: google.ads.admanager.v1.EntitySignalsMappingService.BatchCreateEntitySignalsMappings:input_type -> google.ads.admanager.v1.BatchCreateEntitySignalsMappingsRequest
	7,  // 13: google.ads.admanager.v1.EntitySignalsMappingService.BatchUpdateEntitySignalsMappings:input_type -> google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsRequest
	9,  // 14: google.ads.admanager.v1.EntitySignalsMappingService.GetEntitySignalsMapping:output_type -> google.ads.admanager.v1.EntitySignalsMapping
	4,  // 15: google.ads.admanager.v1.EntitySignalsMappingService.ListEntitySignalsMappings:output_type -> google.ads.admanager.v1.ListEntitySignalsMappingsResponse
	9,  // 16: google.ads.admanager.v1.EntitySignalsMappingService.CreateEntitySignalsMapping:output_type -> google.ads.admanager.v1.EntitySignalsMapping
	9,  // 17: google.ads.admanager.v1.EntitySignalsMappingService.UpdateEntitySignalsMapping:output_type -> google.ads.admanager.v1.EntitySignalsMapping
	6,  // 18: google.ads.admanager.v1.EntitySignalsMappingService.BatchCreateEntitySignalsMappings:output_type -> google.ads.admanager.v1.BatchCreateEntitySignalsMappingsResponse
	8,  // 19: google.ads.admanager.v1.EntitySignalsMappingService.BatchUpdateEntitySignalsMappings:output_type -> google.ads.admanager.v1.BatchUpdateEntitySignalsMappingsResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_google_ads_admanager_v1_entity_signals_mapping_service_proto_init() }
func file_google_ads_admanager_v1_entity_signals_mapping_service_proto_init() {
	if File_google_ads_admanager_v1_entity_signals_mapping_service_proto != nil {
		return
	}
	file_google_ads_admanager_v1_entity_signals_mapping_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetEntitySignalsMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListEntitySignalsMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateEntitySignalsMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateEntitySignalsMappingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListEntitySignalsMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateEntitySignalsMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BatchCreateEntitySignalsMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpdateEntitySignalsMappingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BatchUpdateEntitySignalsMappingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_ads_admanager_v1_entity_signals_mapping_service_proto_goTypes,
		DependencyIndexes: file_google_ads_admanager_v1_entity_signals_mapping_service_proto_depIdxs,
		MessageInfos:      file_google_ads_admanager_v1_entity_signals_mapping_service_proto_msgTypes,
	}.Build()
	File_google_ads_admanager_v1_entity_signals_mapping_service_proto = out.File
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_rawDesc = nil
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_goTypes = nil
	file_google_ads_admanager_v1_entity_signals_mapping_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EntitySignalsMappingServiceClient is the client API for EntitySignalsMappingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EntitySignalsMappingServiceClient interface {
	// API to retrieve a `EntitySignalsMapping` object.
	GetEntitySignalsMapping(ctx context.Context, in *GetEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error)
	// API to retrieve a list of `EntitySignalsMapping` objects.
	ListEntitySignalsMappings(ctx context.Context, in *ListEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*ListEntitySignalsMappingsResponse, error)
	// API to create an `EntitySignalsMapping` object.
	CreateEntitySignalsMapping(ctx context.Context, in *CreateEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error)
	// API to update an `EntitySignalsMapping` object.
	UpdateEntitySignalsMapping(ctx context.Context, in *UpdateEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error)
	// API to batch create `EntitySignalsMapping` objects.
	BatchCreateEntitySignalsMappings(ctx context.Context, in *BatchCreateEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*BatchCreateEntitySignalsMappingsResponse, error)
	// API to batch update `EntitySignalsMapping` objects.
	BatchUpdateEntitySignalsMappings(ctx context.Context, in *BatchUpdateEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*BatchUpdateEntitySignalsMappingsResponse, error)
}

type entitySignalsMappingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntitySignalsMappingServiceClient(cc grpc.ClientConnInterface) EntitySignalsMappingServiceClient {
	return &entitySignalsMappingServiceClient{cc}
}

func (c *entitySignalsMappingServiceClient) GetEntitySignalsMapping(ctx context.Context, in *GetEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error) {
	out := new(EntitySignalsMapping)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/GetEntitySignalsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitySignalsMappingServiceClient) ListEntitySignalsMappings(ctx context.Context, in *ListEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*ListEntitySignalsMappingsResponse, error) {
	out := new(ListEntitySignalsMappingsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/ListEntitySignalsMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitySignalsMappingServiceClient) CreateEntitySignalsMapping(ctx context.Context, in *CreateEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error) {
	out := new(EntitySignalsMapping)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/CreateEntitySignalsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitySignalsMappingServiceClient) UpdateEntitySignalsMapping(ctx context.Context, in *UpdateEntitySignalsMappingRequest, opts ...grpc.CallOption) (*EntitySignalsMapping, error) {
	out := new(EntitySignalsMapping)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/UpdateEntitySignalsMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitySignalsMappingServiceClient) BatchCreateEntitySignalsMappings(ctx context.Context, in *BatchCreateEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*BatchCreateEntitySignalsMappingsResponse, error) {
	out := new(BatchCreateEntitySignalsMappingsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/BatchCreateEntitySignalsMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entitySignalsMappingServiceClient) BatchUpdateEntitySignalsMappings(ctx context.Context, in *BatchUpdateEntitySignalsMappingsRequest, opts ...grpc.CallOption) (*BatchUpdateEntitySignalsMappingsResponse, error) {
	out := new(BatchUpdateEntitySignalsMappingsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.admanager.v1.EntitySignalsMappingService/BatchUpdateEntitySignalsMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntitySignalsMappingServiceServer is the server API for EntitySignalsMappingService service.
type EntitySignalsMappingServiceServer interface {
	// API to retrieve a `EntitySignalsMapping` object.
	GetEntitySignalsMapping(context.Context, *GetEntitySignalsMappingRequest) (*EntitySignalsMapping, error)
	// API to retrieve a list of `EntitySignalsMapping` objects.
	ListEntitySignalsMappings(context.Context, *ListEntitySignalsMappingsRequest) (*ListEntitySignalsMappingsResponse, error)
	// API to create an `EntitySignalsMapping` object.
	CreateEntitySignalsMapping(context.Context, *CreateEntitySignalsMappingRequest) (*EntitySignalsMapping, error)
	// API to update an `EntitySignalsMapping` object.
	UpdateEntitySignalsMapping(context.Context, *UpdateEntitySignalsMappingRequest) (*EntitySignalsMapping, error)
	// API to batch create `EntitySignalsMapping` objects.
	BatchCreateEntitySignalsMappings(context.Context, *BatchCreateEntitySignalsMappingsRequest) (*BatchCreateEntitySignalsMappingsResponse, error)
	// API to batch update `EntitySignalsMapping` objects.
	BatchUpdateEntitySignalsMappings(context.Context, *BatchUpdateEntitySignalsMappingsRequest) (*BatchUpdateEntitySignalsMappingsResponse, error)
}

// UnimplementedEntitySignalsMappingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEntitySignalsMappingServiceServer struct {
}

func (*UnimplementedEntitySignalsMappingServiceServer) GetEntitySignalsMapping(context.Context, *GetEntitySignalsMappingRequest) (*EntitySignalsMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitySignalsMapping not implemented")
}
func (*UnimplementedEntitySignalsMappingServiceServer) ListEntitySignalsMappings(context.Context, *ListEntitySignalsMappingsRequest) (*ListEntitySignalsMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntitySignalsMappings not implemented")
}
func (*UnimplementedEntitySignalsMappingServiceServer) CreateEntitySignalsMapping(context.Context, *CreateEntitySignalsMappingRequest) (*EntitySignalsMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntitySignalsMapping not implemented")
}
func (*UnimplementedEntitySignalsMappingServiceServer) UpdateEntitySignalsMapping(context.Context, *UpdateEntitySignalsMappingRequest) (*EntitySignalsMapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntitySignalsMapping not implemented")
}
func (*UnimplementedEntitySignalsMappingServiceServer) BatchCreateEntitySignalsMappings(context.Context, *BatchCreateEntitySignalsMappingsRequest) (*BatchCreateEntitySignalsMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateEntitySignalsMappings not implemented")
}
func (*UnimplementedEntitySignalsMappingServiceServer) BatchUpdateEntitySignalsMappings(context.Context, *BatchUpdateEntitySignalsMappingsRequest) (*BatchUpdateEntitySignalsMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateEntitySignalsMappings not implemented")
}

func RegisterEntitySignalsMappingServiceServer(s *grpc.Server, srv EntitySignalsMappingServiceServer) {
	s.RegisterService(&_EntitySignalsMappingService_serviceDesc, srv)
}

func _EntitySignalsMappingService_GetEntitySignalsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitySignalsMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).GetEntitySignalsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/GetEntitySignalsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).GetEntitySignalsMapping(ctx, req.(*GetEntitySignalsMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitySignalsMappingService_ListEntitySignalsMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntitySignalsMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).ListEntitySignalsMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/ListEntitySignalsMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).ListEntitySignalsMappings(ctx, req.(*ListEntitySignalsMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitySignalsMappingService_CreateEntitySignalsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntitySignalsMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).CreateEntitySignalsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/CreateEntitySignalsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).CreateEntitySignalsMapping(ctx, req.(*CreateEntitySignalsMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitySignalsMappingService_UpdateEntitySignalsMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntitySignalsMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).UpdateEntitySignalsMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/UpdateEntitySignalsMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).UpdateEntitySignalsMapping(ctx, req.(*UpdateEntitySignalsMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitySignalsMappingService_BatchCreateEntitySignalsMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateEntitySignalsMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).BatchCreateEntitySignalsMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/BatchCreateEntitySignalsMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).BatchCreateEntitySignalsMappings(ctx, req.(*BatchCreateEntitySignalsMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntitySignalsMappingService_BatchUpdateEntitySignalsMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateEntitySignalsMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntitySignalsMappingServiceServer).BatchUpdateEntitySignalsMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.admanager.v1.EntitySignalsMappingService/BatchUpdateEntitySignalsMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntitySignalsMappingServiceServer).BatchUpdateEntitySignalsMappings(ctx, req.(*BatchUpdateEntitySignalsMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntitySignalsMappingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.admanager.v1.EntitySignalsMappingService",
	HandlerType: (*EntitySignalsMappingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntitySignalsMapping",
			Handler:    _EntitySignalsMappingService_GetEntitySignalsMapping_Handler,
		},
		{
			MethodName: "ListEntitySignalsMappings",
			Handler:    _EntitySignalsMappingService_ListEntitySignalsMappings_Handler,
		},
		{
			MethodName: "CreateEntitySignalsMapping",
			Handler:    _EntitySignalsMappingService_CreateEntitySignalsMapping_Handler,
		},
		{
			MethodName: "UpdateEntitySignalsMapping",
			Handler:    _EntitySignalsMappingService_UpdateEntitySignalsMapping_Handler,
		},
		{
			MethodName: "BatchCreateEntitySignalsMappings",
			Handler:    _EntitySignalsMappingService_BatchCreateEntitySignalsMappings_Handler,
		},
		{
			MethodName: "BatchUpdateEntitySignalsMappings",
			Handler:    _EntitySignalsMappingService_BatchUpdateEntitySignalsMappings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/admanager/v1/entity_signals_mapping_service.proto",
}
