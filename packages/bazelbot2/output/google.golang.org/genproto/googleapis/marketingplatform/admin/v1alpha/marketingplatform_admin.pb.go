// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/marketingplatform/admin/v1alpha/marketingplatform_admin.proto

package admin

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Various levels of service for Google Analytics.
type AnalyticsServiceLevel int32

const (
	// Service level unspecified.
	AnalyticsServiceLevel_ANALYTICS_SERVICE_LEVEL_UNSPECIFIED AnalyticsServiceLevel = 0
	// The standard version of Google Analytics.
	AnalyticsServiceLevel_ANALYTICS_SERVICE_LEVEL_STANDARD AnalyticsServiceLevel = 1
	// The premium version of Google Analytics.
	AnalyticsServiceLevel_ANALYTICS_SERVICE_LEVEL_360 AnalyticsServiceLevel = 2
)

// Enum value maps for AnalyticsServiceLevel.
var (
	AnalyticsServiceLevel_name = map[int32]string{
		0: "ANALYTICS_SERVICE_LEVEL_UNSPECIFIED",
		1: "ANALYTICS_SERVICE_LEVEL_STANDARD",
		2: "ANALYTICS_SERVICE_LEVEL_360",
	}
	AnalyticsServiceLevel_value = map[string]int32{
		"ANALYTICS_SERVICE_LEVEL_UNSPECIFIED": 0,
		"ANALYTICS_SERVICE_LEVEL_STANDARD":    1,
		"ANALYTICS_SERVICE_LEVEL_360":         2,
	}
)

func (x AnalyticsServiceLevel) Enum() *AnalyticsServiceLevel {
	p := new(AnalyticsServiceLevel)
	*p = x
	return p
}

func (x AnalyticsServiceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyticsServiceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_enumTypes[0].Descriptor()
}

func (AnalyticsServiceLevel) Type() protoreflect.EnumType {
	return &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_enumTypes[0]
}

func (x AnalyticsServiceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyticsServiceLevel.Descriptor instead.
func (AnalyticsServiceLevel) EnumDescriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{0}
}

// Request message for GetOrganization RPC.
type GetOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Organization to retrieve.
	// Format: organizations/{org_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOrganizationRequest) Reset() {
	*x = GetOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationRequest) ProtoMessage() {}

func (x *GetOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{0}
}

func (x *GetOrganizationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for ListAnalyticsAccountLinks RPC.
type ListAnalyticsAccountLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent organization, which owns this collection of Analytics
	// account links. Format: organizations/{org_id}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of Analytics account links to return in one
	// call. The service may return fewer than this value.
	//
	// If unspecified, at most 50 Analytics account links will be returned. The
	// maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous ListAnalyticsAccountLinks
	// call. Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to
	// `ListAnalyticsAccountLinks` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAnalyticsAccountLinksRequest) Reset() {
	*x = ListAnalyticsAccountLinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnalyticsAccountLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnalyticsAccountLinksRequest) ProtoMessage() {}

func (x *ListAnalyticsAccountLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnalyticsAccountLinksRequest.ProtoReflect.Descriptor instead.
func (*ListAnalyticsAccountLinksRequest) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{1}
}

func (x *ListAnalyticsAccountLinksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAnalyticsAccountLinksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAnalyticsAccountLinksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// Response message for ListAnalyticsAccountLinks RPC.
type ListAnalyticsAccountLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Analytics account links in this organization.
	AnalyticsAccountLinks []*AnalyticsAccountLink `protobuf:"bytes,1,rep,name=analytics_account_links,json=analyticsAccountLinks,proto3" json:"analytics_account_links,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListAnalyticsAccountLinksResponse) Reset() {
	*x = ListAnalyticsAccountLinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAnalyticsAccountLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAnalyticsAccountLinksResponse) ProtoMessage() {}

func (x *ListAnalyticsAccountLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAnalyticsAccountLinksResponse.ProtoReflect.Descriptor instead.
func (*ListAnalyticsAccountLinksResponse) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ListAnalyticsAccountLinksResponse) GetAnalyticsAccountLinks() []*AnalyticsAccountLink {
	if x != nil {
		return x.AnalyticsAccountLinks
	}
	return nil
}

func (x *ListAnalyticsAccountLinksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request message for CreateAnalyticsAccountLink RPC.
type CreateAnalyticsAccountLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this Analytics account link will be
	// created. Format: organizations/{org_id}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The Analytics account link to create.
	AnalyticsAccountLink *AnalyticsAccountLink `protobuf:"bytes,2,opt,name=analytics_account_link,json=analyticsAccountLink,proto3" json:"analytics_account_link,omitempty"`
}

func (x *CreateAnalyticsAccountLinkRequest) Reset() {
	*x = CreateAnalyticsAccountLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAnalyticsAccountLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAnalyticsAccountLinkRequest) ProtoMessage() {}

func (x *CreateAnalyticsAccountLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAnalyticsAccountLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateAnalyticsAccountLinkRequest) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAnalyticsAccountLinkRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateAnalyticsAccountLinkRequest) GetAnalyticsAccountLink() *AnalyticsAccountLink {
	if x != nil {
		return x.AnalyticsAccountLink
	}
	return nil
}

// Request message for DeleteAnalyticsAccountLink RPC.
type DeleteAnalyticsAccountLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the Analytics account link to delete.
	// Format:
	// organizations/{org_id}/analyticsAccountLinks/{analytics_account_link_id}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteAnalyticsAccountLinkRequest) Reset() {
	*x = DeleteAnalyticsAccountLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAnalyticsAccountLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAnalyticsAccountLinkRequest) ProtoMessage() {}

func (x *DeleteAnalyticsAccountLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAnalyticsAccountLinkRequest.ProtoReflect.Descriptor instead.
func (*DeleteAnalyticsAccountLinkRequest) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteAnalyticsAccountLinkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request message for SetPropertyServiceLevel RPC.
type SetPropertyServiceLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent AnalyticsAccountLink scope where this property is in.
	// Format:
	// organizations/{org_id}/analyticsAccountLinks/{analytics_account_link_id}
	AnalyticsAccountLink string `protobuf:"bytes,1,opt,name=analytics_account_link,json=analyticsAccountLink,proto3" json:"analytics_account_link,omitempty"`
	// Required. The Analytics property to change the ServiceLevel setting. This
	// field is the name of the Google Analytics Admin API property resource.
	//
	// Format: analyticsadmin.googleapis.com/properties/{property_id}
	AnalyticsProperty string `protobuf:"bytes,2,opt,name=analytics_property,json=analyticsProperty,proto3" json:"analytics_property,omitempty"`
	// Required. The service level to set for this property.
	ServiceLevel AnalyticsServiceLevel `protobuf:"varint,3,opt,name=service_level,json=serviceLevel,proto3,enum=google.marketingplatform.admin.v1alpha.AnalyticsServiceLevel" json:"service_level,omitempty"`
}

func (x *SetPropertyServiceLevelRequest) Reset() {
	*x = SetPropertyServiceLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPropertyServiceLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPropertyServiceLevelRequest) ProtoMessage() {}

func (x *SetPropertyServiceLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPropertyServiceLevelRequest.ProtoReflect.Descriptor instead.
func (*SetPropertyServiceLevelRequest) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{5}
}

func (x *SetPropertyServiceLevelRequest) GetAnalyticsAccountLink() string {
	if x != nil {
		return x.AnalyticsAccountLink
	}
	return ""
}

func (x *SetPropertyServiceLevelRequest) GetAnalyticsProperty() string {
	if x != nil {
		return x.AnalyticsProperty
	}
	return ""
}

func (x *SetPropertyServiceLevelRequest) GetServiceLevel() AnalyticsServiceLevel {
	if x != nil {
		return x.ServiceLevel
	}
	return AnalyticsServiceLevel_ANALYTICS_SERVICE_LEVEL_UNSPECIFIED
}

// Response message for SetPropertyServiceLevel RPC.
type SetPropertyServiceLevelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetPropertyServiceLevelResponse) Reset() {
	*x = SetPropertyServiceLevelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPropertyServiceLevelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPropertyServiceLevelResponse) ProtoMessage() {}

func (x *SetPropertyServiceLevelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPropertyServiceLevelResponse.ProtoReflect.Descriptor instead.
func (*SetPropertyServiceLevelResponse) Descriptor() ([]byte, []int) {
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP(), []int{6}
}

var File_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto protoreflect.FileDescriptor

var file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x0a, 0x32, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xc4, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x3c, 0x12, 0x3a, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a,
	0x17, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x15, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x21,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x42, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x3c, 0x12, 0x3a, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x77, 0x0a,
	0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x14, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x7b, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x3c, 0x0a, 0x3a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x28, 0x0a, 0x26, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x11, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x67, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x87, 0x01, 0x0a,
	0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x33, 0x36, 0x30, 0x10, 0x02, 0x32, 0xb2, 0x0b, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2e, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xfa, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x9e, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x49,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x77, 0xda, 0x41, 0x1d, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x2c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x51, 0x3a,
	0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0xc7, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x46, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x39, 0x2a, 0x37, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x2a, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb2, 0x02, 0x0a, 0x17, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0xda, 0x41, 0x16, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x3a, 0x01, 0x2a, 0x22, 0x61, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x3d, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a,
	0xb9, 0x01, 0xca, 0x41, 0x25, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x8d, 0x01, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x72,
	0x65, 0x61, 0x64, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0xe9, 0x02, 0xea, 0x41,
	0x3f, 0x0a, 0x26, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x7d,
	0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x64, 0x73,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x42, 0x1b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x4b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0xaa, 0x02, 0x2a, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5c, 0x41, 0x64, 0x73, 0x5c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xea, 0x02, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x41, 0x64, 0x73, 0x3a, 0x3a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescOnce sync.Once
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescData = file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDesc
)

func file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescGZIP() []byte {
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescOnce.Do(func() {
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescData)
	})
	return file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDescData
}

var file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_goTypes = []any{
	(AnalyticsServiceLevel)(0),                // 0: google.marketingplatform.admin.v1alpha.AnalyticsServiceLevel
	(*GetOrganizationRequest)(nil),            // 1: google.marketingplatform.admin.v1alpha.GetOrganizationRequest
	(*ListAnalyticsAccountLinksRequest)(nil),  // 2: google.marketingplatform.admin.v1alpha.ListAnalyticsAccountLinksRequest
	(*ListAnalyticsAccountLinksResponse)(nil), // 3: google.marketingplatform.admin.v1alpha.ListAnalyticsAccountLinksResponse
	(*CreateAnalyticsAccountLinkRequest)(nil), // 4: google.marketingplatform.admin.v1alpha.CreateAnalyticsAccountLinkRequest
	(*DeleteAnalyticsAccountLinkRequest)(nil), // 5: google.marketingplatform.admin.v1alpha.DeleteAnalyticsAccountLinkRequest
	(*SetPropertyServiceLevelRequest)(nil),    // 6: google.marketingplatform.admin.v1alpha.SetPropertyServiceLevelRequest
	(*SetPropertyServiceLevelResponse)(nil),   // 7: google.marketingplatform.admin.v1alpha.SetPropertyServiceLevelResponse
	(*AnalyticsAccountLink)(nil),              // 8: google.marketingplatform.admin.v1alpha.AnalyticsAccountLink
	(*Organization)(nil),                      // 9: google.marketingplatform.admin.v1alpha.Organization
	(*emptypb.Empty)(nil),                     // 10: google.protobuf.Empty
}
var file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_depIdxs = []int32{
	8,  // 0: google.marketingplatform.admin.v1alpha.ListAnalyticsAccountLinksResponse.analytics_account_links:type_name -> google.marketingplatform.admin.v1alpha.AnalyticsAccountLink
	8,  // 1: google.marketingplatform.admin.v1alpha.CreateAnalyticsAccountLinkRequest.analytics_account_link:type_name -> google.marketingplatform.admin.v1alpha.AnalyticsAccountLink
	0,  // 2: google.marketingplatform.admin.v1alpha.SetPropertyServiceLevelRequest.service_level:type_name -> google.marketingplatform.admin.v1alpha.AnalyticsServiceLevel
	1,  // 3: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.GetOrganization:input_type -> google.marketingplatform.admin.v1alpha.GetOrganizationRequest
	2,  // 4: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.ListAnalyticsAccountLinks:input_type -> google.marketingplatform.admin.v1alpha.ListAnalyticsAccountLinksRequest
	4,  // 5: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.CreateAnalyticsAccountLink:input_type -> google.marketingplatform.admin.v1alpha.CreateAnalyticsAccountLinkRequest
	5,  // 6: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.DeleteAnalyticsAccountLink:input_type -> google.marketingplatform.admin.v1alpha.DeleteAnalyticsAccountLinkRequest
	6,  // 7: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.SetPropertyServiceLevel:input_type -> google.marketingplatform.admin.v1alpha.SetPropertyServiceLevelRequest
	9,  // 8: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.GetOrganization:output_type -> google.marketingplatform.admin.v1alpha.Organization
	3,  // 9: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.ListAnalyticsAccountLinks:output_type -> google.marketingplatform.admin.v1alpha.ListAnalyticsAccountLinksResponse
	8,  // 10: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.CreateAnalyticsAccountLink:output_type -> google.marketingplatform.admin.v1alpha.AnalyticsAccountLink
	10, // 11: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.DeleteAnalyticsAccountLink:output_type -> google.protobuf.Empty
	7,  // 12: google.marketingplatform.admin.v1alpha.MarketingplatformAdminService.SetPropertyServiceLevel:output_type -> google.marketingplatform.admin.v1alpha.SetPropertyServiceLevelResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_init() }
func file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_init() {
	if File_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto != nil {
		return
	}
	file_google_marketingplatform_admin_v1alpha_resources_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListAnalyticsAccountLinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListAnalyticsAccountLinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAnalyticsAccountLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteAnalyticsAccountLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*SetPropertyServiceLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*SetPropertyServiceLevelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_goTypes,
		DependencyIndexes: file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_depIdxs,
		EnumInfos:         file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_enumTypes,
		MessageInfos:      file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_msgTypes,
	}.Build()
	File_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto = out.File
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_rawDesc = nil
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_goTypes = nil
	file_google_marketingplatform_admin_v1alpha_marketingplatform_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MarketingplatformAdminServiceClient is the client API for MarketingplatformAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketingplatformAdminServiceClient interface {
	// Lookup for a single organization.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error)
	// Lists the Google Analytics accounts link to the specified Google Marketing
	// Platform organization.
	ListAnalyticsAccountLinks(ctx context.Context, in *ListAnalyticsAccountLinksRequest, opts ...grpc.CallOption) (*ListAnalyticsAccountLinksResponse, error)
	// Creates the link between the Analytics account and the Google Marketing
	// Platform organization.
	//
	// User needs to be an org user, and admin on the Analytics account to create
	// the link. If the account is already linked to an organization, user needs
	// to unlink the account from the current organization, then try link again.
	CreateAnalyticsAccountLink(ctx context.Context, in *CreateAnalyticsAccountLinkRequest, opts ...grpc.CallOption) (*AnalyticsAccountLink, error)
	// Deletes the AnalyticsAccountLink, which detaches the Analytics account from
	// the Google Marketing Platform organization.
	//
	// User needs to be an org user, and admin on the Analytics account in order
	// to delete the link.
	DeleteAnalyticsAccountLink(ctx context.Context, in *DeleteAnalyticsAccountLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Updates the service level for an Analytics property.
	SetPropertyServiceLevel(ctx context.Context, in *SetPropertyServiceLevelRequest, opts ...grpc.CallOption) (*SetPropertyServiceLevelResponse, error)
}

type marketingplatformAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingplatformAdminServiceClient(cc grpc.ClientConnInterface) MarketingplatformAdminServiceClient {
	return &marketingplatformAdminServiceClient{cc}
}

func (c *marketingplatformAdminServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingplatformAdminServiceClient) ListAnalyticsAccountLinks(ctx context.Context, in *ListAnalyticsAccountLinksRequest, opts ...grpc.CallOption) (*ListAnalyticsAccountLinksResponse, error) {
	out := new(ListAnalyticsAccountLinksResponse)
	err := c.cc.Invoke(ctx, "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/ListAnalyticsAccountLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingplatformAdminServiceClient) CreateAnalyticsAccountLink(ctx context.Context, in *CreateAnalyticsAccountLinkRequest, opts ...grpc.CallOption) (*AnalyticsAccountLink, error) {
	out := new(AnalyticsAccountLink)
	err := c.cc.Invoke(ctx, "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/CreateAnalyticsAccountLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingplatformAdminServiceClient) DeleteAnalyticsAccountLink(ctx context.Context, in *DeleteAnalyticsAccountLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/DeleteAnalyticsAccountLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingplatformAdminServiceClient) SetPropertyServiceLevel(ctx context.Context, in *SetPropertyServiceLevelRequest, opts ...grpc.CallOption) (*SetPropertyServiceLevelResponse, error) {
	out := new(SetPropertyServiceLevelResponse)
	err := c.cc.Invoke(ctx, "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/SetPropertyServiceLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingplatformAdminServiceServer is the server API for MarketingplatformAdminService service.
type MarketingplatformAdminServiceServer interface {
	// Lookup for a single organization.
	GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error)
	// Lists the Google Analytics accounts link to the specified Google Marketing
	// Platform organization.
	ListAnalyticsAccountLinks(context.Context, *ListAnalyticsAccountLinksRequest) (*ListAnalyticsAccountLinksResponse, error)
	// Creates the link between the Analytics account and the Google Marketing
	// Platform organization.
	//
	// User needs to be an org user, and admin on the Analytics account to create
	// the link. If the account is already linked to an organization, user needs
	// to unlink the account from the current organization, then try link again.
	CreateAnalyticsAccountLink(context.Context, *CreateAnalyticsAccountLinkRequest) (*AnalyticsAccountLink, error)
	// Deletes the AnalyticsAccountLink, which detaches the Analytics account from
	// the Google Marketing Platform organization.
	//
	// User needs to be an org user, and admin on the Analytics account in order
	// to delete the link.
	DeleteAnalyticsAccountLink(context.Context, *DeleteAnalyticsAccountLinkRequest) (*emptypb.Empty, error)
	// Updates the service level for an Analytics property.
	SetPropertyServiceLevel(context.Context, *SetPropertyServiceLevelRequest) (*SetPropertyServiceLevelResponse, error)
}

// UnimplementedMarketingplatformAdminServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMarketingplatformAdminServiceServer struct {
}

func (*UnimplementedMarketingplatformAdminServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedMarketingplatformAdminServiceServer) ListAnalyticsAccountLinks(context.Context, *ListAnalyticsAccountLinksRequest) (*ListAnalyticsAccountLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAnalyticsAccountLinks not implemented")
}
func (*UnimplementedMarketingplatformAdminServiceServer) CreateAnalyticsAccountLink(context.Context, *CreateAnalyticsAccountLinkRequest) (*AnalyticsAccountLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnalyticsAccountLink not implemented")
}
func (*UnimplementedMarketingplatformAdminServiceServer) DeleteAnalyticsAccountLink(context.Context, *DeleteAnalyticsAccountLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnalyticsAccountLink not implemented")
}
func (*UnimplementedMarketingplatformAdminServiceServer) SetPropertyServiceLevel(context.Context, *SetPropertyServiceLevelRequest) (*SetPropertyServiceLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPropertyServiceLevel not implemented")
}

func RegisterMarketingplatformAdminServiceServer(s *grpc.Server, srv MarketingplatformAdminServiceServer) {
	s.RegisterService(&_MarketingplatformAdminService_serviceDesc, srv)
}

func _MarketingplatformAdminService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingplatformAdminServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingplatformAdminServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingplatformAdminService_ListAnalyticsAccountLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAnalyticsAccountLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingplatformAdminServiceServer).ListAnalyticsAccountLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/ListAnalyticsAccountLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingplatformAdminServiceServer).ListAnalyticsAccountLinks(ctx, req.(*ListAnalyticsAccountLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingplatformAdminService_CreateAnalyticsAccountLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnalyticsAccountLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingplatformAdminServiceServer).CreateAnalyticsAccountLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/CreateAnalyticsAccountLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingplatformAdminServiceServer).CreateAnalyticsAccountLink(ctx, req.(*CreateAnalyticsAccountLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingplatformAdminService_DeleteAnalyticsAccountLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnalyticsAccountLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingplatformAdminServiceServer).DeleteAnalyticsAccountLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/DeleteAnalyticsAccountLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingplatformAdminServiceServer).DeleteAnalyticsAccountLink(ctx, req.(*DeleteAnalyticsAccountLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingplatformAdminService_SetPropertyServiceLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPropertyServiceLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingplatformAdminServiceServer).SetPropertyServiceLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.marketingplatform.admin.v1alpha.MarketingplatformAdminService/SetPropertyServiceLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingplatformAdminServiceServer).SetPropertyServiceLevel(ctx, req.(*SetPropertyServiceLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MarketingplatformAdminService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.marketingplatform.admin.v1alpha.MarketingplatformAdminService",
	HandlerType: (*MarketingplatformAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganization",
			Handler:    _MarketingplatformAdminService_GetOrganization_Handler,
		},
		{
			MethodName: "ListAnalyticsAccountLinks",
			Handler:    _MarketingplatformAdminService_ListAnalyticsAccountLinks_Handler,
		},
		{
			MethodName: "CreateAnalyticsAccountLink",
			Handler:    _MarketingplatformAdminService_CreateAnalyticsAccountLink_Handler,
		},
		{
			MethodName: "DeleteAnalyticsAccountLink",
			Handler:    _MarketingplatformAdminService_DeleteAnalyticsAccountLink_Handler,
		},
		{
			MethodName: "SetPropertyServiceLevel",
			Handler:    _MarketingplatformAdminService_SetPropertyServiceLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/marketingplatform/admin/v1alpha/marketingplatform_admin.proto",
}
