// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/analytics/data/v1alpha/analytics_data_api.proto

package data

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The AudienceList currently exists in this state.
type AudienceList_State int32

const (
	// Unspecified state will never be used.
	AudienceList_STATE_UNSPECIFIED AudienceList_State = 0
	// The AudienceList is currently creating and will be available in the
	// future. Creating occurs immediately after the CreateAudienceList call.
	AudienceList_CREATING AudienceList_State = 1
	// The AudienceList is fully created and ready for querying. An AudienceList
	// is updated to active asynchronously from a request; this occurs some
	// time (for example 15 minutes) after the initial create call.
	AudienceList_ACTIVE AudienceList_State = 2
	// The AudienceList failed to be created. It is possible that re-requesting
	// this audience list will succeed.
	AudienceList_FAILED AudienceList_State = 3
)

// Enum value maps for AudienceList_State.
var (
	AudienceList_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "FAILED",
	}
	AudienceList_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"FAILED":            3,
	}
)

func (x AudienceList_State) Enum() *AudienceList_State {
	p := new(AudienceList_State)
	*p = x
	return p
}

func (x AudienceList_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudienceList_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[0].Descriptor()
}

func (AudienceList_State) Type() protoreflect.EnumType {
	return &file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[0]
}

func (x AudienceList_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudienceList_State.Descriptor instead.
func (AudienceList_State) EnumDescriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{12, 0}
}

// Controls the dimensions present in the funnel visualization sub report
// response.
type RunFunnelReportRequest_FunnelVisualizationType int32

const (
	// Unspecified type.
	RunFunnelReportRequest_FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED RunFunnelReportRequest_FunnelVisualizationType = 0
	// A standard (stepped) funnel. The funnel visualization sub report in the
	// response will not contain date.
	RunFunnelReportRequest_STANDARD_FUNNEL RunFunnelReportRequest_FunnelVisualizationType = 1
	// A trended (line chart) funnel. The funnel visualization sub report in the
	// response will contain the date dimension.
	RunFunnelReportRequest_TRENDED_FUNNEL RunFunnelReportRequest_FunnelVisualizationType = 2
)

// Enum value maps for RunFunnelReportRequest_FunnelVisualizationType.
var (
	RunFunnelReportRequest_FunnelVisualizationType_name = map[int32]string{
		0: "FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED",
		1: "STANDARD_FUNNEL",
		2: "TRENDED_FUNNEL",
	}
	RunFunnelReportRequest_FunnelVisualizationType_value = map[string]int32{
		"FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED": 0,
		"STANDARD_FUNNEL":                       1,
		"TRENDED_FUNNEL":                        2,
	}
)

func (x RunFunnelReportRequest_FunnelVisualizationType) Enum() *RunFunnelReportRequest_FunnelVisualizationType {
	p := new(RunFunnelReportRequest_FunnelVisualizationType)
	*p = x
	return p
}

func (x RunFunnelReportRequest_FunnelVisualizationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunFunnelReportRequest_FunnelVisualizationType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[1].Descriptor()
}

func (RunFunnelReportRequest_FunnelVisualizationType) Type() protoreflect.EnumType {
	return &file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[1]
}

func (x RunFunnelReportRequest_FunnelVisualizationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunFunnelReportRequest_FunnelVisualizationType.Descriptor instead.
func (RunFunnelReportRequest_FunnelVisualizationType) EnumDescriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{21, 0}
}

// The processing state.
type ReportTask_ReportMetadata_State int32

const (
	// Unspecified state will never be used.
	ReportTask_ReportMetadata_STATE_UNSPECIFIED ReportTask_ReportMetadata_State = 0
	// The report is currently creating and will be available in the
	// future. Creating occurs immediately after the CreateReport call.
	ReportTask_ReportMetadata_CREATING ReportTask_ReportMetadata_State = 1
	// The report is fully created and ready for querying.
	ReportTask_ReportMetadata_ACTIVE ReportTask_ReportMetadata_State = 2
	// The report failed to be created.
	ReportTask_ReportMetadata_FAILED ReportTask_ReportMetadata_State = 3
)

// Enum value maps for ReportTask_ReportMetadata_State.
var (
	ReportTask_ReportMetadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "ACTIVE",
		3: "FAILED",
	}
	ReportTask_ReportMetadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"ACTIVE":            2,
		"FAILED":            3,
	}
)

func (x ReportTask_ReportMetadata_State) Enum() *ReportTask_ReportMetadata_State {
	p := new(ReportTask_ReportMetadata_State)
	*p = x
	return p
}

func (x ReportTask_ReportMetadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportTask_ReportMetadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[2].Descriptor()
}

func (ReportTask_ReportMetadata_State) Type() protoreflect.EnumType {
	return &file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes[2]
}

func (x ReportTask_ReportMetadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportTask_ReportMetadata_State.Descriptor instead.
func (ReportTask_ReportMetadata_State) EnumDescriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{23, 1, 0}
}

// A request to create a new recurring audience list.
type CreateRecurringAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this recurring audience list will be
	// created. Format: `properties/{property}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The recurring audience list to create.
	RecurringAudienceList *RecurringAudienceList `protobuf:"bytes,2,opt,name=recurring_audience_list,json=recurringAudienceList,proto3" json:"recurring_audience_list,omitempty"`
}

func (x *CreateRecurringAudienceListRequest) Reset() {
	*x = CreateRecurringAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRecurringAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecurringAudienceListRequest) ProtoMessage() {}

func (x *CreateRecurringAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecurringAudienceListRequest.ProtoReflect.Descriptor instead.
func (*CreateRecurringAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRecurringAudienceListRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRecurringAudienceListRequest) GetRecurringAudienceList() *RecurringAudienceList {
	if x != nil {
		return x.RecurringAudienceList
	}
	return nil
}

// A recurring audience list produces new audience lists each day. Audience
// lists are users in an audience at the time of the list's creation. A
// recurring audience list ensures that you have audience list based on the most
// recent data available for use each day.
type RecurringAudienceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Identifier. The recurring audience list resource name assigned
	// during creation. This resource name identifies this
	// `RecurringAudienceList`.
	//
	// Format:
	// `properties/{property}/recurringAudienceLists/{recurring_audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The audience resource name. This resource name identifies the
	// audience being listed and is shared between the Analytics Data & Admin
	// APIs.
	//
	// Format: `properties/{property}/audiences/{audience}`
	Audience string `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	// Output only. The descriptive display name for this audience. For example,
	// "Purchasers".
	AudienceDisplayName string `protobuf:"bytes,3,opt,name=audience_display_name,json=audienceDisplayName,proto3" json:"audience_display_name,omitempty"`
	// Required. The dimensions requested and displayed in the audience list
	// response.
	Dimensions []*AudienceDimension `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Optional. The number of remaining days that a recurring audience export
	// will produce an audience list instance. This counter decreases by one each
	// day, and when it reaches zero, no new audience lists will be created.
	//
	// Recurring audience list request for Analytics 360 properties default to 180
	// days and have a maximum of 365 days. Requests for standard Analytics
	// properties default to 14 days and have a maximum of 30 days.
	//
	// The minimum value allowed during creation is 1. Requests above their
	// respective maximum will be coerced to their maximum.
	ActiveDaysRemaining *int32 `protobuf:"varint,5,opt,name=active_days_remaining,json=activeDaysRemaining,proto3,oneof" json:"active_days_remaining,omitempty"`
	// Output only. Audience list resource names for audience list instances
	// created for this recurring audience list. One audience list is created for
	// each day, and the audience list will be listed here.
	//
	// This list is ordered with the most recently created audience list first.
	AudienceLists []string `protobuf:"bytes,6,rep,name=audience_lists,json=audienceLists,proto3" json:"audience_lists,omitempty"`
	// Optional. Configures webhook notifications to be sent from the Google
	// Analytics Data API to your webhook server. Use of webhooks is optional. If
	// unused, you'll need to poll this API to determine when a recurring audience
	// list creates new audience lists. Webhooks allow a notification to be sent
	// to your servers & avoid the need for polling.
	//
	// Two POST requests will be sent each time a recurring audience list creates
	// an audience list. This happens once per day until a recurring audience list
	// reaches 0 active days remaining. The first request will be sent showing a
	// newly created audience list in its CREATING state. The second request will
	// be sent after the audience list completes creation (either the ACTIVE or
	// FAILED state).
	WebhookNotification *WebhookNotification `protobuf:"bytes,8,opt,name=webhook_notification,json=webhookNotification,proto3,oneof" json:"webhook_notification,omitempty"`
}

func (x *RecurringAudienceList) Reset() {
	*x = RecurringAudienceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurringAudienceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurringAudienceList) ProtoMessage() {}

func (x *RecurringAudienceList) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurringAudienceList.ProtoReflect.Descriptor instead.
func (*RecurringAudienceList) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{1}
}

func (x *RecurringAudienceList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecurringAudienceList) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *RecurringAudienceList) GetAudienceDisplayName() string {
	if x != nil {
		return x.AudienceDisplayName
	}
	return ""
}

func (x *RecurringAudienceList) GetDimensions() []*AudienceDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *RecurringAudienceList) GetActiveDaysRemaining() int32 {
	if x != nil && x.ActiveDaysRemaining != nil {
		return *x.ActiveDaysRemaining
	}
	return 0
}

func (x *RecurringAudienceList) GetAudienceLists() []string {
	if x != nil {
		return x.AudienceLists
	}
	return nil
}

func (x *RecurringAudienceList) GetWebhookNotification() *WebhookNotification {
	if x != nil {
		return x.WebhookNotification
	}
	return nil
}

// Configures a long-running operation resource to send a webhook notification
// from the Google Analytics Data API to your webhook server when the resource
// updates.
//
// Notification configurations contain private values & are only visible to your
// GCP project. Different GCP projects may attach different webhook
// notifications to the same long-running operation resource.
type WebhookNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The web address that will receive the webhook notification. This
	// address will receive POST requests as the state of the long running
	// operation resource changes. The POST request will contain both a JSON
	// version of the long running operation resource in the body and a
	// `sentTimestamp` field. The sent timestamp will specify the unix
	// microseconds since the epoch that the request was sent; this lets you
	// identify replayed notifications.
	//
	// An example URI is
	// `https://us-central1-example-project-id.cloudfunctions.net/example-function-1`.
	//
	// The URI must use HTTPS and point to a site with a valid SSL certificate on
	// the web server. The URI must have a maximum string length of 128 characters
	// & use only the allowlisted characters from [RFC
	// 1738](https://www.rfc-editor.org/rfc/rfc1738).
	//
	// When your webhook server receives a notification, it is expected to reply
	// with an HTTP response status code of 200 within 5 seconds.
	//
	// A URI is required to use webhook notifications.
	//
	// Requests to this webhook server will contain an ID token authenticating the
	// service account
	// `google-analytics-audience-export@system.gserviceaccount.com`. To learn
	// more about ID tokens, see
	// https://cloud.google.com/docs/authentication/token-types#id. For Google
	// Cloud Functions, this lets you configure your function to require
	// authentication. In Cloud IAM, you will need to grant the service account
	// permissions to the Cloud Run Invoker (`roles/run.invoker`) & Cloud
	// Functions Invoker (`roles/cloudfunctions.invoker`) roles for the webhook
	// post request to pass Google Cloud Functions authentication. This API can
	// send webhook notifications to arbitrary URIs; for webhook servers other
	// than Google Cloud Functions, this ID token in the authorization bearer
	// header should be ignored if it is not needed.
	Uri *string `protobuf:"bytes,1,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	// Optional. The channel token is an arbitrary string value and must have a
	// maximum string length of 64 characters. Channel tokens allow you to verify
	// the source of a webhook notification. This guards against the message being
	// spoofed. The channel token will be specified in the `X-Goog-Channel-Token`
	// HTTP header of the webhook POST request.
	//
	// A channel token is not required to use webhook notifications.
	ChannelToken *string `protobuf:"bytes,2,opt,name=channel_token,json=channelToken,proto3,oneof" json:"channel_token,omitempty"`
}

func (x *WebhookNotification) Reset() {
	*x = WebhookNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookNotification) ProtoMessage() {}

func (x *WebhookNotification) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookNotification.ProtoReflect.Descriptor instead.
func (*WebhookNotification) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{2}
}

func (x *WebhookNotification) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *WebhookNotification) GetChannelToken() string {
	if x != nil && x.ChannelToken != nil {
		return *x.ChannelToken
	}
	return ""
}

// A request to retrieve configuration metadata about a specific recurring
// audience list.
type GetRecurringAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The recurring audience list resource name.
	// Format:
	// `properties/{property}/recurringAudienceLists/{recurring_audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetRecurringAudienceListRequest) Reset() {
	*x = GetRecurringAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecurringAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecurringAudienceListRequest) ProtoMessage() {}

func (x *GetRecurringAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecurringAudienceListRequest.ProtoReflect.Descriptor instead.
func (*GetRecurringAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecurringAudienceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request to list all recurring audience lists for a property.
type ListRecurringAudienceListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. All recurring audience lists for this property will be listed in
	// the response. Format: `properties/{property}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of recurring audience lists to return. The
	// service may return fewer than this value. If unspecified, at most 200
	// recurring audience lists will be returned. The maximum value is 1000
	// (higher values will be coerced to the maximum).
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous
	// `ListRecurringAudienceLists` call. Provide this to retrieve the subsequent
	// page.
	//
	// When paginating, all other parameters provided to
	// `ListRecurringAudienceLists` must match the call that provided the page
	// token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRecurringAudienceListsRequest) Reset() {
	*x = ListRecurringAudienceListsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecurringAudienceListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecurringAudienceListsRequest) ProtoMessage() {}

func (x *ListRecurringAudienceListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecurringAudienceListsRequest.ProtoReflect.Descriptor instead.
func (*ListRecurringAudienceListsRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{4}
}

func (x *ListRecurringAudienceListsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRecurringAudienceListsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRecurringAudienceListsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A list of all recurring audience lists for a property.
type ListRecurringAudienceListsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each recurring audience list for a property.
	RecurringAudienceLists []*RecurringAudienceList `protobuf:"bytes,1,rep,name=recurring_audience_lists,json=recurringAudienceLists,proto3" json:"recurring_audience_lists,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
}

func (x *ListRecurringAudienceListsResponse) Reset() {
	*x = ListRecurringAudienceListsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRecurringAudienceListsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecurringAudienceListsResponse) ProtoMessage() {}

func (x *ListRecurringAudienceListsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecurringAudienceListsResponse.ProtoReflect.Descriptor instead.
func (*ListRecurringAudienceListsResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{5}
}

func (x *ListRecurringAudienceListsResponse) GetRecurringAudienceLists() []*RecurringAudienceList {
	if x != nil {
		return x.RecurringAudienceLists
	}
	return nil
}

func (x *ListRecurringAudienceListsResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// A request to return the PropertyQuotasSnapshot for a given category.
type GetPropertyQuotasSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Quotas from this property will be listed in the response.
	// Format: `properties/{property}/propertyQuotasSnapshot`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPropertyQuotasSnapshotRequest) Reset() {
	*x = GetPropertyQuotasSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPropertyQuotasSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPropertyQuotasSnapshotRequest) ProtoMessage() {}

func (x *GetPropertyQuotasSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPropertyQuotasSnapshotRequest.ProtoReflect.Descriptor instead.
func (*GetPropertyQuotasSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{6}
}

func (x *GetPropertyQuotasSnapshotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Current state of all Property Quotas organized by quota category.
type PropertyQuotasSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. The property quota snapshot resource name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Property Quota for core property tokens
	CorePropertyQuota *PropertyQuota `protobuf:"bytes,1,opt,name=core_property_quota,json=corePropertyQuota,proto3" json:"core_property_quota,omitempty"`
	// Property Quota for realtime property tokens
	RealtimePropertyQuota *PropertyQuota `protobuf:"bytes,2,opt,name=realtime_property_quota,json=realtimePropertyQuota,proto3" json:"realtime_property_quota,omitempty"`
	// Property Quota for funnel property tokens
	FunnelPropertyQuota *PropertyQuota `protobuf:"bytes,3,opt,name=funnel_property_quota,json=funnelPropertyQuota,proto3" json:"funnel_property_quota,omitempty"`
}

func (x *PropertyQuotasSnapshot) Reset() {
	*x = PropertyQuotasSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyQuotasSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyQuotasSnapshot) ProtoMessage() {}

func (x *PropertyQuotasSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyQuotasSnapshot.ProtoReflect.Descriptor instead.
func (*PropertyQuotasSnapshot) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{7}
}

func (x *PropertyQuotasSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PropertyQuotasSnapshot) GetCorePropertyQuota() *PropertyQuota {
	if x != nil {
		return x.CorePropertyQuota
	}
	return nil
}

func (x *PropertyQuotasSnapshot) GetRealtimePropertyQuota() *PropertyQuota {
	if x != nil {
		return x.RealtimePropertyQuota
	}
	return nil
}

func (x *PropertyQuotasSnapshot) GetFunnelPropertyQuota() *PropertyQuota {
	if x != nil {
		return x.FunnelPropertyQuota
	}
	return nil
}

// A request to retrieve configuration metadata about a specific audience list.
type GetAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The audience list resource name.
	// Format: `properties/{property}/audienceLists/{audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetAudienceListRequest) Reset() {
	*x = GetAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudienceListRequest) ProtoMessage() {}

func (x *GetAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudienceListRequest.ProtoReflect.Descriptor instead.
func (*GetAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetAudienceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request to list all audience lists for a property.
type ListAudienceListsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. All audience lists for this property will be listed in the
	// response. Format: `properties/{property}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of audience lists to return. The service may
	// return fewer than this value. If unspecified, at most 200 audience lists
	// will be returned. The maximum value is 1000 (higher values will be coerced
	// to the maximum).
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListAudienceLists` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListAudienceLists` must
	// match the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListAudienceListsRequest) Reset() {
	*x = ListAudienceListsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAudienceListsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceListsRequest) ProtoMessage() {}

func (x *ListAudienceListsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceListsRequest.ProtoReflect.Descriptor instead.
func (*ListAudienceListsRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{9}
}

func (x *ListAudienceListsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListAudienceListsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListAudienceListsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A list of all audience lists for a property.
type ListAudienceListsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each audience list for a property.
	AudienceLists []*AudienceList `protobuf:"bytes,1,rep,name=audience_lists,json=audienceLists,proto3" json:"audience_lists,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
}

func (x *ListAudienceListsResponse) Reset() {
	*x = ListAudienceListsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAudienceListsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAudienceListsResponse) ProtoMessage() {}

func (x *ListAudienceListsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAudienceListsResponse.ProtoReflect.Descriptor instead.
func (*ListAudienceListsResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListAudienceListsResponse) GetAudienceLists() []*AudienceList {
	if x != nil {
		return x.AudienceLists
	}
	return nil
}

func (x *ListAudienceListsResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// A request to create a new audience list.
type CreateAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this audience list will be created.
	// Format: `properties/{property}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The audience list to create.
	AudienceList *AudienceList `protobuf:"bytes,2,opt,name=audience_list,json=audienceList,proto3" json:"audience_list,omitempty"`
}

func (x *CreateAudienceListRequest) Reset() {
	*x = CreateAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAudienceListRequest) ProtoMessage() {}

func (x *CreateAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAudienceListRequest.ProtoReflect.Descriptor instead.
func (*CreateAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{11}
}

func (x *CreateAudienceListRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateAudienceListRequest) GetAudienceList() *AudienceList {
	if x != nil {
		return x.AudienceList
	}
	return nil
}

// An audience list is a list of users in an audience at the time of the list's
// creation. One audience may have multiple audience lists created for different
// days.
type AudienceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Identifier. The audience list resource name assigned during
	// creation. This resource name identifies this `AudienceList`.
	//
	// Format: `properties/{property}/audienceLists/{audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Required. The audience resource name. This resource name identifies the
	// audience being listed and is shared between the Analytics Data & Admin
	// APIs.
	//
	// Format: `properties/{property}/audiences/{audience}`
	Audience string `protobuf:"bytes,2,opt,name=audience,proto3" json:"audience,omitempty"`
	// Output only. The descriptive display name for this audience. For example,
	// "Purchasers".
	AudienceDisplayName string `protobuf:"bytes,3,opt,name=audience_display_name,json=audienceDisplayName,proto3" json:"audience_display_name,omitempty"`
	// Required. The dimensions requested and displayed in the query response.
	Dimensions []*AudienceDimension `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Output only. The current state for this AudienceList.
	State *AudienceList_State `protobuf:"varint,5,opt,name=state,proto3,enum=google.analytics.data.v1alpha.AudienceList_State,oneof" json:"state,omitempty"`
	// Output only. The time when CreateAudienceList was called and the
	// AudienceList began the `CREATING` state.
	BeginCreatingTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=begin_creating_time,json=beginCreatingTime,proto3,oneof" json:"begin_creating_time,omitempty"`
	// Output only. The total quota tokens charged during creation of the
	// AudienceList. Because this token count is based on activity from the
	// `CREATING` state, this tokens charged will be fixed once an AudienceList
	// enters the `ACTIVE` or `FAILED` states.
	CreationQuotaTokensCharged int32 `protobuf:"varint,7,opt,name=creation_quota_tokens_charged,json=creationQuotaTokensCharged,proto3" json:"creation_quota_tokens_charged,omitempty"`
	// Output only. The total number of rows in the AudienceList result.
	RowCount *int32 `protobuf:"varint,8,opt,name=row_count,json=rowCount,proto3,oneof" json:"row_count,omitempty"`
	// Output only. Error message is populated when an audience list fails during
	// creation. A common reason for such a failure is quota exhaustion.
	ErrorMessage *string `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	// Output only. The percentage completed for this audience export ranging
	// between 0 to 100.
	PercentageCompleted *float64 `protobuf:"fixed64,11,opt,name=percentage_completed,json=percentageCompleted,proto3,oneof" json:"percentage_completed,omitempty"`
	// Output only. The recurring audience list that created this audience list.
	// Recurring audience lists create audience lists daily.
	//
	// If audience lists are created directly, they will have no associated
	// recurring audience list, and this field will be blank.
	RecurringAudienceList *string `protobuf:"bytes,12,opt,name=recurring_audience_list,json=recurringAudienceList,proto3,oneof" json:"recurring_audience_list,omitempty"`
	// Optional. Configures webhook notifications to be sent from the Google
	// Analytics Data API to your webhook server. Use of webhooks is optional. If
	// unused, you'll need to poll this API to determine when an audience list is
	// ready to be used. Webhooks allow a notification to be sent to your servers
	// & avoid the need for polling.
	//
	// Either one or two POST requests will be sent to the webhook. The first POST
	// request will be sent immediately showing the newly created audience list in
	// its CREATING state. The second POST request will be sent after the audience
	// list completes creation (either the ACTIVE or FAILED state).
	//
	// If identical audience lists are requested in quick succession, the second &
	// subsequent audience lists can be served from cache. In that case, the
	// audience list create method can return an audience list is already ACTIVE.
	// In this scenario, only one POST request will be sent to the webhook.
	WebhookNotification *WebhookNotification `protobuf:"bytes,13,opt,name=webhook_notification,json=webhookNotification,proto3,oneof" json:"webhook_notification,omitempty"`
}

func (x *AudienceList) Reset() {
	*x = AudienceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceList) ProtoMessage() {}

func (x *AudienceList) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceList.ProtoReflect.Descriptor instead.
func (*AudienceList) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{12}
}

func (x *AudienceList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AudienceList) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

func (x *AudienceList) GetAudienceDisplayName() string {
	if x != nil {
		return x.AudienceDisplayName
	}
	return ""
}

func (x *AudienceList) GetDimensions() []*AudienceDimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *AudienceList) GetState() AudienceList_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return AudienceList_STATE_UNSPECIFIED
}

func (x *AudienceList) GetBeginCreatingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginCreatingTime
	}
	return nil
}

func (x *AudienceList) GetCreationQuotaTokensCharged() int32 {
	if x != nil {
		return x.CreationQuotaTokensCharged
	}
	return 0
}

func (x *AudienceList) GetRowCount() int32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *AudienceList) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *AudienceList) GetPercentageCompleted() float64 {
	if x != nil && x.PercentageCompleted != nil {
		return *x.PercentageCompleted
	}
	return 0
}

func (x *AudienceList) GetRecurringAudienceList() string {
	if x != nil && x.RecurringAudienceList != nil {
		return *x.RecurringAudienceList
	}
	return ""
}

func (x *AudienceList) GetWebhookNotification() *WebhookNotification {
	if x != nil {
		return x.WebhookNotification
	}
	return nil
}

// This metadata is currently blank.
type AudienceListMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AudienceListMetadata) Reset() {
	*x = AudienceListMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceListMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceListMetadata) ProtoMessage() {}

func (x *AudienceListMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceListMetadata.ProtoReflect.Descriptor instead.
func (*AudienceListMetadata) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{13}
}

// A request to list users in an audience list.
type QueryAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the audience list to retrieve users from.
	// Format: `properties/{property}/audienceLists/{audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The row count of the start row. The first row is counted as row
	// 0.
	//
	// When paging, the first request does not specify offset; or equivalently,
	// sets offset to 0; the first request returns the first `limit` of rows. The
	// second request sets offset to the `limit` of the first request; the second
	// request returns the second `limit` of rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional. The number of rows to return. If unspecified, 10,000 rows are
	// returned. The API returns a maximum of 250,000 rows per request, no matter
	// how many you ask for. `limit` must be positive.
	//
	// The API can also return fewer rows than the requested `limit`, if there
	// aren't as many dimension values as the `limit`.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryAudienceListRequest) Reset() {
	*x = QueryAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAudienceListRequest) ProtoMessage() {}

func (x *QueryAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAudienceListRequest.ProtoReflect.Descriptor instead.
func (*QueryAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{14}
}

func (x *QueryAudienceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryAudienceListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryAudienceListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// A list of users in an audience list.
type QueryAudienceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configuration data about AudienceList being queried. Returned to help
	// interpret the audience rows in this response. For example, the dimensions
	// in this AudienceList correspond to the columns in the AudienceRows.
	AudienceList *AudienceList `protobuf:"bytes,1,opt,name=audience_list,json=audienceList,proto3,oneof" json:"audience_list,omitempty"`
	// Rows for each user in an audience list. The number of rows in this
	// response will be less than or equal to request's page size.
	AudienceRows []*AudienceRow `protobuf:"bytes,2,rep,name=audience_rows,json=audienceRows,proto3" json:"audience_rows,omitempty"`
	// The total number of rows in the AudienceList result. `rowCount` is
	// independent of the number of rows returned in the response, the `limit`
	// request parameter, and the `offset` request parameter. For example if a
	// query returns 175 rows and includes `limit` of 50 in the API request, the
	// response will contain `rowCount` of 175 but only 50 rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	RowCount *int32 `protobuf:"varint,3,opt,name=row_count,json=rowCount,proto3,oneof" json:"row_count,omitempty"`
}

func (x *QueryAudienceListResponse) Reset() {
	*x = QueryAudienceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAudienceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAudienceListResponse) ProtoMessage() {}

func (x *QueryAudienceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAudienceListResponse.ProtoReflect.Descriptor instead.
func (*QueryAudienceListResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{15}
}

func (x *QueryAudienceListResponse) GetAudienceList() *AudienceList {
	if x != nil {
		return x.AudienceList
	}
	return nil
}

func (x *QueryAudienceListResponse) GetAudienceRows() []*AudienceRow {
	if x != nil {
		return x.AudienceRows
	}
	return nil
}

func (x *QueryAudienceListResponse) GetRowCount() int32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

// A request to export users in an audience list to a Google Sheet.
type SheetExportAudienceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The name of the audience list to retrieve users from.
	// Format: `properties/{property}/audienceLists/{audience_list}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The row count of the start row. The first row is counted as row
	// 0.
	//
	// When paging, the first request does not specify offset; or equivalently,
	// sets offset to 0; the first request returns the first `limit` of rows. The
	// second request sets offset to the `limit` of the first request; the second
	// request returns the second `limit` of rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional. The number of rows to return. If unspecified, 10,000 rows are
	// returned. The API returns a maximum of 250,000 rows per request, no matter
	// how many you ask for. `limit` must be positive.
	//
	// The API can also return fewer rows than the requested `limit`, if there
	// aren't as many dimension values as the `limit`.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *SheetExportAudienceListRequest) Reset() {
	*x = SheetExportAudienceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetExportAudienceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetExportAudienceListRequest) ProtoMessage() {}

func (x *SheetExportAudienceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetExportAudienceListRequest.ProtoReflect.Descriptor instead.
func (*SheetExportAudienceListRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{16}
}

func (x *SheetExportAudienceListRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SheetExportAudienceListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SheetExportAudienceListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// The created Google Sheet with the list of users in an audience list.
type SheetExportAudienceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A uri for you to visit in your browser to view the Google Sheet.
	SpreadsheetUri *string `protobuf:"bytes,1,opt,name=spreadsheet_uri,json=spreadsheetUri,proto3,oneof" json:"spreadsheet_uri,omitempty"`
	// An ID that identifies the created Google Sheet resource.
	SpreadsheetId *string `protobuf:"bytes,2,opt,name=spreadsheet_id,json=spreadsheetId,proto3,oneof" json:"spreadsheet_id,omitempty"`
	// The total number of rows in the AudienceList result. `rowCount` is
	// independent of the number of rows returned in the response, the `limit`
	// request parameter, and the `offset` request parameter. For example if a
	// query returns 175 rows and includes `limit` of 50 in the API request, the
	// response will contain `rowCount` of 175 but only 50 rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	RowCount *int32 `protobuf:"varint,3,opt,name=row_count,json=rowCount,proto3,oneof" json:"row_count,omitempty"`
	// Configuration data about AudienceList being exported. Returned to help
	// interpret the AudienceList in the Google Sheet of this response.
	//
	// For example, the AudienceList may have more rows than are present in the
	// Google Sheet, and in that case, you may want to send an additional sheet
	// export request with a different `offset` value to retrieve the next page of
	// rows in an additional Google Sheet.
	AudienceList *AudienceList `protobuf:"bytes,4,opt,name=audience_list,json=audienceList,proto3,oneof" json:"audience_list,omitempty"`
}

func (x *SheetExportAudienceListResponse) Reset() {
	*x = SheetExportAudienceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SheetExportAudienceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SheetExportAudienceListResponse) ProtoMessage() {}

func (x *SheetExportAudienceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SheetExportAudienceListResponse.ProtoReflect.Descriptor instead.
func (*SheetExportAudienceListResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{17}
}

func (x *SheetExportAudienceListResponse) GetSpreadsheetUri() string {
	if x != nil && x.SpreadsheetUri != nil {
		return *x.SpreadsheetUri
	}
	return ""
}

func (x *SheetExportAudienceListResponse) GetSpreadsheetId() string {
	if x != nil && x.SpreadsheetId != nil {
		return *x.SpreadsheetId
	}
	return ""
}

func (x *SheetExportAudienceListResponse) GetRowCount() int32 {
	if x != nil && x.RowCount != nil {
		return *x.RowCount
	}
	return 0
}

func (x *SheetExportAudienceListResponse) GetAudienceList() *AudienceList {
	if x != nil {
		return x.AudienceList
	}
	return nil
}

// Dimension value attributes for the audience user row.
type AudienceRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each dimension value attribute for an audience user. One dimension value
	// will be added for each dimension column requested.
	DimensionValues []*AudienceDimensionValue `protobuf:"bytes,1,rep,name=dimension_values,json=dimensionValues,proto3" json:"dimension_values,omitempty"`
}

func (x *AudienceRow) Reset() {
	*x = AudienceRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceRow) ProtoMessage() {}

func (x *AudienceRow) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceRow.ProtoReflect.Descriptor instead.
func (*AudienceRow) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{18}
}

func (x *AudienceRow) GetDimensionValues() []*AudienceDimensionValue {
	if x != nil {
		return x.DimensionValues
	}
	return nil
}

// An audience dimension is a user attribute. Specific user attributed are
// requested and then later returned in the `QueryAudienceListResponse`.
type AudienceDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The API name of the dimension. See the [API
	// Dimensions](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-api-schema#dimensions)
	// for the list of dimension names.
	DimensionName string `protobuf:"bytes,1,opt,name=dimension_name,json=dimensionName,proto3" json:"dimension_name,omitempty"`
}

func (x *AudienceDimension) Reset() {
	*x = AudienceDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceDimension) ProtoMessage() {}

func (x *AudienceDimension) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceDimension.ProtoReflect.Descriptor instead.
func (*AudienceDimension) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{19}
}

func (x *AudienceDimension) GetDimensionName() string {
	if x != nil {
		return x.DimensionName
	}
	return ""
}

// The value of a dimension.
type AudienceDimensionValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One kind of dimension value.
	//
	// Types that are assignable to OneValue:
	//
	//	*AudienceDimensionValue_Value
	OneValue isAudienceDimensionValue_OneValue `protobuf_oneof:"one_value"`
}

func (x *AudienceDimensionValue) Reset() {
	*x = AudienceDimensionValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudienceDimensionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudienceDimensionValue) ProtoMessage() {}

func (x *AudienceDimensionValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudienceDimensionValue.ProtoReflect.Descriptor instead.
func (*AudienceDimensionValue) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{20}
}

func (m *AudienceDimensionValue) GetOneValue() isAudienceDimensionValue_OneValue {
	if m != nil {
		return m.OneValue
	}
	return nil
}

func (x *AudienceDimensionValue) GetValue() string {
	if x, ok := x.GetOneValue().(*AudienceDimensionValue_Value); ok {
		return x.Value
	}
	return ""
}

type isAudienceDimensionValue_OneValue interface {
	isAudienceDimensionValue_OneValue()
}

type AudienceDimensionValue_Value struct {
	// Value as a string if the dimension type is a string.
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

func (*AudienceDimensionValue_Value) isAudienceDimensionValue_OneValue() {}

// The request for a funnel report.
type RunFunnelReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A Google Analytics property identifier whose events are tracked.
	// Specified in the URL path and not the body. To learn more, see [where to
	// find your Property
	// ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id).
	// Within a batch request, this property should either be unspecified or
	// consistent with the batch-level property.
	//
	// Example: properties/1234
	Property string `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	// Optional. Date ranges of data to read. If multiple date ranges are
	// requested, each response row will contain a zero based date range index. If
	// two date ranges overlap, the event data for the overlapping days is
	// included in the response rows for both date ranges.
	DateRanges []*DateRange `protobuf:"bytes,2,rep,name=date_ranges,json=dateRanges,proto3" json:"date_ranges,omitempty"`
	// Optional. The configuration of this request's funnel. This funnel
	// configuration is required.
	Funnel *Funnel `protobuf:"bytes,3,opt,name=funnel,proto3" json:"funnel,omitempty"`
	// Optional. If specified, this breakdown adds a dimension to the funnel table
	// sub report response. This breakdown dimension expands each funnel step to
	// the unique values of the breakdown dimension. For example, a breakdown by
	// the `deviceCategory` dimension will create rows for `mobile`, `tablet`,
	// `desktop`, and the total.
	FunnelBreakdown *FunnelBreakdown `protobuf:"bytes,4,opt,name=funnel_breakdown,json=funnelBreakdown,proto3" json:"funnel_breakdown,omitempty"`
	// Optional. If specified, next action adds a dimension to the funnel
	// visualization sub report response. This next action dimension expands each
	// funnel step to the unique values of the next action. For example a next
	// action of the `eventName` dimension will create rows for several events
	// (for example `session_start` & `click`) and the total.
	//
	// Next action only supports `eventName` and most Page / Screen dimensions
	// like `pageTitle` and `pagePath`.
	FunnelNextAction *FunnelNextAction `protobuf:"bytes,5,opt,name=funnel_next_action,json=funnelNextAction,proto3" json:"funnel_next_action,omitempty"`
	// Optional. The funnel visualization type controls the dimensions present in
	// the funnel visualization sub report response. If not specified,
	// `STANDARD_FUNNEL` is used.
	FunnelVisualizationType RunFunnelReportRequest_FunnelVisualizationType `protobuf:"varint,6,opt,name=funnel_visualization_type,json=funnelVisualizationType,proto3,enum=google.analytics.data.v1alpha.RunFunnelReportRequest_FunnelVisualizationType" json:"funnel_visualization_type,omitempty"`
	// Optional. The configurations of segments. Segments are subsets of a
	// property's data. In a funnel report with segments, the funnel is evaluated
	// in each segment.
	//
	// Each segment specified in this request
	// produces a separate row in the response; in the response, each segment
	// identified by its name.
	//
	// The segments parameter is optional. Requests are limited to 4 segments.
	Segments []*Segment `protobuf:"bytes,7,rep,name=segments,proto3" json:"segments,omitempty"`
	// Optional. The number of rows to return. If unspecified, 10,000 rows are
	// returned. The API returns a maximum of 250,000 rows per request, no matter
	// how many you ask for. `limit` must be positive.
	//
	// The API can also return fewer rows than the requested `limit`, if there
	// aren't as many dimension values as the `limit`.
	Limit int64 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	// Optional. Dimension filters allow you to ask for only specific dimension
	// values in the report. To learn more, see [Creating a Report: Dimension
	// Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
	// for examples. Metrics cannot be used in this filter.
	DimensionFilter *FilterExpression `protobuf:"bytes,10,opt,name=dimension_filter,json=dimensionFilter,proto3" json:"dimension_filter,omitempty"`
	// Optional. Toggles whether to return the current state of this Analytics
	// Property's quota. Quota is returned in [PropertyQuota](#PropertyQuota).
	ReturnPropertyQuota bool `protobuf:"varint,12,opt,name=return_property_quota,json=returnPropertyQuota,proto3" json:"return_property_quota,omitempty"`
}

func (x *RunFunnelReportRequest) Reset() {
	*x = RunFunnelReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFunnelReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFunnelReportRequest) ProtoMessage() {}

func (x *RunFunnelReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFunnelReportRequest.ProtoReflect.Descriptor instead.
func (*RunFunnelReportRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{21}
}

func (x *RunFunnelReportRequest) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *RunFunnelReportRequest) GetDateRanges() []*DateRange {
	if x != nil {
		return x.DateRanges
	}
	return nil
}

func (x *RunFunnelReportRequest) GetFunnel() *Funnel {
	if x != nil {
		return x.Funnel
	}
	return nil
}

func (x *RunFunnelReportRequest) GetFunnelBreakdown() *FunnelBreakdown {
	if x != nil {
		return x.FunnelBreakdown
	}
	return nil
}

func (x *RunFunnelReportRequest) GetFunnelNextAction() *FunnelNextAction {
	if x != nil {
		return x.FunnelNextAction
	}
	return nil
}

func (x *RunFunnelReportRequest) GetFunnelVisualizationType() RunFunnelReportRequest_FunnelVisualizationType {
	if x != nil {
		return x.FunnelVisualizationType
	}
	return RunFunnelReportRequest_FUNNEL_VISUALIZATION_TYPE_UNSPECIFIED
}

func (x *RunFunnelReportRequest) GetSegments() []*Segment {
	if x != nil {
		return x.Segments
	}
	return nil
}

func (x *RunFunnelReportRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RunFunnelReportRequest) GetDimensionFilter() *FilterExpression {
	if x != nil {
		return x.DimensionFilter
	}
	return nil
}

func (x *RunFunnelReportRequest) GetReturnPropertyQuota() bool {
	if x != nil {
		return x.ReturnPropertyQuota
	}
	return false
}

// The funnel report response contains two sub reports. The two sub reports are
// different combinations of dimensions and metrics.
type RunFunnelReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The funnel table is a report with the funnel step, segment, breakdown
	// dimension, active users, completion rate, abandonments, and abandonments
	// rate.
	//
	// The segment dimension is only present in this response if a segment was
	// requested. The breakdown dimension is only present in this response if it
	// was requested.
	FunnelTable *FunnelSubReport `protobuf:"bytes,1,opt,name=funnel_table,json=funnelTable,proto3" json:"funnel_table,omitempty"`
	// The funnel visualization is a report with the funnel step, segment, date,
	// next action dimension, and active users.
	//
	// The segment dimension is only present in this response if a segment was
	// requested. The date dimension is only present in this response if it was
	// requested through the `TRENDED_FUNNEL` funnel type. The next action
	// dimension is only present in the response if it was requested.
	FunnelVisualization *FunnelSubReport `protobuf:"bytes,2,opt,name=funnel_visualization,json=funnelVisualization,proto3" json:"funnel_visualization,omitempty"`
	// This Analytics Property's quota state including this request.
	PropertyQuota *PropertyQuota `protobuf:"bytes,3,opt,name=property_quota,json=propertyQuota,proto3" json:"property_quota,omitempty"`
	// Identifies what kind of resource this message is. This `kind` is always the
	// fixed string "analyticsData#runFunnelReport". Useful to distinguish between
	// response types in JSON.
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *RunFunnelReportResponse) Reset() {
	*x = RunFunnelReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunFunnelReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFunnelReportResponse) ProtoMessage() {}

func (x *RunFunnelReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFunnelReportResponse.ProtoReflect.Descriptor instead.
func (*RunFunnelReportResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{22}
}

func (x *RunFunnelReportResponse) GetFunnelTable() *FunnelSubReport {
	if x != nil {
		return x.FunnelTable
	}
	return nil
}

func (x *RunFunnelReportResponse) GetFunnelVisualization() *FunnelSubReport {
	if x != nil {
		return x.FunnelVisualization
	}
	return nil
}

func (x *RunFunnelReportResponse) GetPropertyQuota() *PropertyQuota {
	if x != nil {
		return x.PropertyQuota
	}
	return nil
}

func (x *RunFunnelReportResponse) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// A specific report task configuration.
type ReportTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Identifier. The report task resource name assigned during
	// creation. Format: "properties/{property}/reportTasks/{report_task}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. A report definition to fetch report data, which describes the
	// structure of a report. It typically includes the fields that will be
	// included in the report and the criteria that will be used to filter the
	// data.
	ReportDefinition *ReportTask_ReportDefinition `protobuf:"bytes,2,opt,name=report_definition,json=reportDefinition,proto3" json:"report_definition,omitempty"`
	// Output only. The report metadata for a specific report task, which provides
	// information about a report.  It typically includes the following
	// information: the resource name of the report, the state of the report, the
	// timestamp the report was created, etc,
	ReportMetadata *ReportTask_ReportMetadata `protobuf:"bytes,3,opt,name=report_metadata,json=reportMetadata,proto3" json:"report_metadata,omitempty"`
}

func (x *ReportTask) Reset() {
	*x = ReportTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTask) ProtoMessage() {}

func (x *ReportTask) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTask.ProtoReflect.Descriptor instead.
func (*ReportTask) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{23}
}

func (x *ReportTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportTask) GetReportDefinition() *ReportTask_ReportDefinition {
	if x != nil {
		return x.ReportDefinition
	}
	return nil
}

func (x *ReportTask) GetReportMetadata() *ReportTask_ReportMetadata {
	if x != nil {
		return x.ReportMetadata
	}
	return nil
}

// A request to create a report task.
type CreateReportTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource where this report task will be created.
	// Format: `properties/{propertyId}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The report task configuration to create.
	ReportTask *ReportTask `protobuf:"bytes,2,opt,name=report_task,json=reportTask,proto3" json:"report_task,omitempty"`
}

func (x *CreateReportTaskRequest) Reset() {
	*x = CreateReportTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReportTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReportTaskRequest) ProtoMessage() {}

func (x *CreateReportTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReportTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateReportTaskRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{24}
}

func (x *CreateReportTaskRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateReportTaskRequest) GetReportTask() *ReportTask {
	if x != nil {
		return x.ReportTask
	}
	return nil
}

// Represents the metadata of a long-running operation. Currently, this metadata
// is blank.
type ReportTaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportTaskMetadata) Reset() {
	*x = ReportTaskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTaskMetadata) ProtoMessage() {}

func (x *ReportTaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTaskMetadata.ProtoReflect.Descriptor instead.
func (*ReportTaskMetadata) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{25}
}

// A request to fetch the report content for a report task.
type QueryReportTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The report source name.
	// Format: `properties/{property}/reportTasks/{report}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. The row count of the start row in the report. The first row is
	// counted as row 0.
	//
	// When paging, the first request does not specify offset; or equivalently,
	// sets offset to 0; the first request returns the first `limit` of rows. The
	// second request sets offset to the `limit` of the first request; the second
	// request returns the second `limit` of rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional. The number of rows to return from the report. If unspecified,
	// 10,000 rows are returned. The API returns a maximum of 250,000 rows per
	// request, no matter how many you ask for. `limit` must be positive.
	//
	// The API can also return fewer rows than the requested `limit`, if there
	// aren't as many dimension values as the `limit`. The number of rows
	// available to a QueryReportTaskRequest is further limited by the limit of
	// the associated ReportTask. A query can retrieve at most ReportTask.limit
	// rows. For example, if the ReportTask has a limit of 1,000, then a
	// QueryReportTask request with offset=900 and limit=500 will return at most
	// 100 rows.
	//
	// To learn more about this pagination parameter, see
	// [Pagination](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#pagination).
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryReportTaskRequest) Reset() {
	*x = QueryReportTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportTaskRequest) ProtoMessage() {}

func (x *QueryReportTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportTaskRequest.ProtoReflect.Descriptor instead.
func (*QueryReportTaskRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{26}
}

func (x *QueryReportTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryReportTaskRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryReportTaskRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// The report content corresponding to a report task.
type QueryReportTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes dimension columns. The number of DimensionHeaders and ordering of
	// DimensionHeaders matches the dimensions present in rows.
	DimensionHeaders []*DimensionHeader `protobuf:"bytes,1,rep,name=dimension_headers,json=dimensionHeaders,proto3" json:"dimension_headers,omitempty"`
	// Describes metric columns. The number of MetricHeaders and ordering of
	// MetricHeaders matches the metrics present in rows.
	MetricHeaders []*MetricHeader `protobuf:"bytes,2,rep,name=metric_headers,json=metricHeaders,proto3" json:"metric_headers,omitempty"`
	// Rows of dimension value combinations and metric values in the report.
	Rows []*Row `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
	// If requested, the totaled values of metrics.
	Totals []*Row `protobuf:"bytes,4,rep,name=totals,proto3" json:"totals,omitempty"`
	// If requested, the maximum values of metrics.
	Maximums []*Row `protobuf:"bytes,5,rep,name=maximums,proto3" json:"maximums,omitempty"`
	// If requested, the minimum values of metrics.
	Minimums []*Row `protobuf:"bytes,6,rep,name=minimums,proto3" json:"minimums,omitempty"`
	// The total number of rows in the query result.
	RowCount int32 `protobuf:"varint,7,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// Metadata for the report.
	Metadata *ResponseMetaData `protobuf:"bytes,8,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *QueryReportTaskResponse) Reset() {
	*x = QueryReportTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReportTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReportTaskResponse) ProtoMessage() {}

func (x *QueryReportTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReportTaskResponse.ProtoReflect.Descriptor instead.
func (*QueryReportTaskResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{27}
}

func (x *QueryReportTaskResponse) GetDimensionHeaders() []*DimensionHeader {
	if x != nil {
		return x.DimensionHeaders
	}
	return nil
}

func (x *QueryReportTaskResponse) GetMetricHeaders() []*MetricHeader {
	if x != nil {
		return x.MetricHeaders
	}
	return nil
}

func (x *QueryReportTaskResponse) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryReportTaskResponse) GetTotals() []*Row {
	if x != nil {
		return x.Totals
	}
	return nil
}

func (x *QueryReportTaskResponse) GetMaximums() []*Row {
	if x != nil {
		return x.Maximums
	}
	return nil
}

func (x *QueryReportTaskResponse) GetMinimums() []*Row {
	if x != nil {
		return x.Minimums
	}
	return nil
}

func (x *QueryReportTaskResponse) GetRowCount() int32 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *QueryReportTaskResponse) GetMetadata() *ResponseMetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A request to retrieve configuration metadata about a specific report task.
type GetReportTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The report task resource name.
	// Format: `properties/{property}/reportTasks/{report_task}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReportTaskRequest) Reset() {
	*x = GetReportTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReportTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReportTaskRequest) ProtoMessage() {}

func (x *GetReportTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReportTaskRequest.ProtoReflect.Descriptor instead.
func (*GetReportTaskRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{28}
}

func (x *GetReportTaskRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A request to list all report tasks for a property.
type ListReportTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. All report tasks for this property will be listed in the
	// response. Format: `properties/{property}`
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. The maximum number of report tasks to return.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. A page token, received from a previous `ListReportTasks` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListReportTasksRequest) Reset() {
	*x = ListReportTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportTasksRequest) ProtoMessage() {}

func (x *ListReportTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportTasksRequest.ProtoReflect.Descriptor instead.
func (*ListReportTasksRequest) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{29}
}

func (x *ListReportTasksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListReportTasksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListReportTasksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// A list of all report tasks for a property.
type ListReportTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each report task for a property.
	ReportTasks []*ReportTask `protobuf:"bytes,1,rep,name=report_tasks,json=reportTasks,proto3" json:"report_tasks,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
}

func (x *ListReportTasksResponse) Reset() {
	*x = ListReportTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListReportTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReportTasksResponse) ProtoMessage() {}

func (x *ListReportTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReportTasksResponse.ProtoReflect.Descriptor instead.
func (*ListReportTasksResponse) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{30}
}

func (x *ListReportTasksResponse) GetReportTasks() []*ReportTask {
	if x != nil {
		return x.ReportTasks
	}
	return nil
}

func (x *ListReportTasksResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

// The definition of how a report should be run.
type ReportTask_ReportDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The dimensions requested and displayed.
	Dimensions []*Dimension `protobuf:"bytes,2,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Optional. The metrics requested and displayed.
	Metrics []*Metric `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Optional. Date ranges of data to read. If multiple date ranges are
	// requested, each response row will contain a zero based date range index.
	// If two date ranges overlap, the event data for the overlapping days is
	// included in the response rows for both date ranges. In a cohort request,
	// this `dateRanges` must be unspecified.
	DateRanges []*DateRange `protobuf:"bytes,4,rep,name=date_ranges,json=dateRanges,proto3" json:"date_ranges,omitempty"`
	// Optional. Dimension filters let you ask for only specific dimension
	// values in the report. To learn more, see [Fundamentals of Dimension
	// Filters](https://developers.google.com/analytics/devguides/reporting/data/v1/basics#dimension_filters)
	// for examples. Metrics cannot be used in this filter.
	DimensionFilter *FilterExpression `protobuf:"bytes,5,opt,name=dimension_filter,json=dimensionFilter,proto3" json:"dimension_filter,omitempty"`
	// Optional. The filter clause of metrics. Applied after aggregating the
	// report's rows, similar to SQL having-clause. Dimensions cannot be used in
	// this filter.
	MetricFilter *FilterExpression `protobuf:"bytes,6,opt,name=metric_filter,json=metricFilter,proto3" json:"metric_filter,omitempty"`
	// Optional. The row count of the start row from Google Analytics Storage.
	// The first row is counted as row 0.
	//
	// When creating a report task, the `offset` and `limit` parameters define
	// the subset of data rows from Google Analytics storage to be included in
	// the generated report. For example, if there are a total of 300,000 rows
	// in Google Analytics storage, the initial report task may have the
	// first 10,000 rows with a limit of 10,000 and an offset of 0.
	// Subsequently, another report task could cover the next 10,000 rows with a
	// limit of 10,000 and an offset of 10,000.
	Offset int64 `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional. The number of rows to return in the Report. If unspecified,
	// 10,000 rows are returned. The API returns a maximum of 250,000 rows per
	// request, no matter how many you ask for. `limit` must be positive.
	//
	// The API can also return fewer rows than the requested `limit`, if there
	// aren't as many dimension values as the `limit`. For instance, there are
	// fewer than 300 possible values for the dimension `country`, so when
	// reporting on only `country`, you can't get more than 300 rows, even if
	// you set `limit` to a higher value.
	Limit int64 `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	// Optional. Aggregation of metrics. Aggregated metric values will be shown
	// in rows where the dimension_values are set to
	// "RESERVED_(MetricAggregation)".
	MetricAggregations []MetricAggregation `protobuf:"varint,9,rep,packed,name=metric_aggregations,json=metricAggregations,proto3,enum=google.analytics.data.v1alpha.MetricAggregation" json:"metric_aggregations,omitempty"`
	// Optional. Specifies how rows are ordered in the response.
	OrderBys []*OrderBy `protobuf:"bytes,10,rep,name=order_bys,json=orderBys,proto3" json:"order_bys,omitempty"`
	// Optional. A currency code in ISO4217 format, such as "AED", "USD", "JPY".
	// If the field is empty, the report uses the property's default currency.
	CurrencyCode string `protobuf:"bytes,11,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	// Optional. Cohort group associated with this request. If there is a cohort
	// group in the request the 'cohort' dimension must be present.
	CohortSpec *CohortSpec `protobuf:"bytes,12,opt,name=cohort_spec,json=cohortSpec,proto3" json:"cohort_spec,omitempty"`
	// Optional. If false or unspecified, each row with all metrics equal to 0
	// will not be returned. If true, these rows will be returned if they are
	// not separately removed by a filter.
	//
	// Regardless of this `keep_empty_rows` setting, only data recorded by the
	// Google Analytics property can be displayed in a report.
	//
	// For example if a property never logs a `purchase` event, then a query for
	// the `eventName` dimension and  `eventCount` metric will not have a row
	// containing eventName: "purchase" and eventCount: 0.
	KeepEmptyRows bool `protobuf:"varint,13,opt,name=keep_empty_rows,json=keepEmptyRows,proto3" json:"keep_empty_rows,omitempty"`
	// Optional. The report's sampling level.
	SamplingLevel *SamplingLevel `protobuf:"varint,14,opt,name=sampling_level,json=samplingLevel,proto3,enum=google.analytics.data.v1alpha.SamplingLevel,oneof" json:"sampling_level,omitempty"`
}

func (x *ReportTask_ReportDefinition) Reset() {
	*x = ReportTask_ReportDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTask_ReportDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTask_ReportDefinition) ProtoMessage() {}

func (x *ReportTask_ReportDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTask_ReportDefinition.ProtoReflect.Descriptor instead.
func (*ReportTask_ReportDefinition) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ReportTask_ReportDefinition) GetDimensions() []*Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetDateRanges() []*DateRange {
	if x != nil {
		return x.DateRanges
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetDimensionFilter() *FilterExpression {
	if x != nil {
		return x.DimensionFilter
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetMetricFilter() *FilterExpression {
	if x != nil {
		return x.MetricFilter
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ReportTask_ReportDefinition) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ReportTask_ReportDefinition) GetMetricAggregations() []MetricAggregation {
	if x != nil {
		return x.MetricAggregations
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetOrderBys() []*OrderBy {
	if x != nil {
		return x.OrderBys
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *ReportTask_ReportDefinition) GetCohortSpec() *CohortSpec {
	if x != nil {
		return x.CohortSpec
	}
	return nil
}

func (x *ReportTask_ReportDefinition) GetKeepEmptyRows() bool {
	if x != nil {
		return x.KeepEmptyRows
	}
	return false
}

func (x *ReportTask_ReportDefinition) GetSamplingLevel() SamplingLevel {
	if x != nil && x.SamplingLevel != nil {
		return *x.SamplingLevel
	}
	return SamplingLevel_SAMPLING_LEVEL_UNSPECIFIED
}

// The report metadata for a specific report task.
type ReportTask_ReportMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The current state for this report task.
	State *ReportTask_ReportMetadata_State `protobuf:"varint,1,opt,name=state,proto3,enum=google.analytics.data.v1alpha.ReportTask_ReportMetadata_State,oneof" json:"state,omitempty"`
	// Output only. The time when `CreateReportTask` was called and the report
	// began the `CREATING` state.
	BeginCreatingTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=begin_creating_time,json=beginCreatingTime,proto3,oneof" json:"begin_creating_time,omitempty"`
	// Output only. The total quota tokens charged during creation of the
	// report. Because this token count is based on activity from the `CREATING`
	// state, this tokens charge will be fixed once a report task enters the
	// `ACTIVE` or `FAILED` state.
	CreationQuotaTokensCharged int32 `protobuf:"varint,3,opt,name=creation_quota_tokens_charged,json=creationQuotaTokensCharged,proto3" json:"creation_quota_tokens_charged,omitempty"`
	// Output only. The total number of rows in the report result. This field
	// will be populated when the state is active. You can utilize
	// `task_row_count` for pagination within the confines of their existing
	// report.
	TaskRowCount *int32 `protobuf:"varint,4,opt,name=task_row_count,json=taskRowCount,proto3,oneof" json:"task_row_count,omitempty"`
	// Output only. Error message is populated if a report task fails during
	// creation.
	ErrorMessage *string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	// Output only. The total number of rows in Google Analytics storage. If you
	// want to query additional data rows beyond the current report, they can
	// initiate a new report task based on the `total_row_count`.
	//
	// The `task_row_count` represents the number of rows specifically
	// pertaining to the current report, whereas `total_row_count` encompasses
	// the total count of rows across all data retrieved from Google
	// Analytics storage.
	//
	// For example, suppose the current report's `task_row_count` is 20,
	// displaying the data from the first 20 rows. Simultaneously, the
	// `total_row_count` is 30, indicating the presence of data for all 30 rows.
	// The `task_row_count` can be utilizated to paginate through the initial 20
	// rows. To expand the report and include data from all 30 rows, a new
	// report task can be created using the total_row_count to access the full
	// set of 30 rows' worth of data.
	TotalRowCount *int32 `protobuf:"varint,6,opt,name=total_row_count,json=totalRowCount,proto3,oneof" json:"total_row_count,omitempty"`
}

func (x *ReportTask_ReportMetadata) Reset() {
	*x = ReportTask_ReportMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportTask_ReportMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportTask_ReportMetadata) ProtoMessage() {}

func (x *ReportTask_ReportMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportTask_ReportMetadata.ProtoReflect.Descriptor instead.
func (*ReportTask_ReportMetadata) Descriptor() ([]byte, []int) {
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP(), []int{23, 1}
}

func (x *ReportTask_ReportMetadata) GetState() ReportTask_ReportMetadata_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ReportTask_ReportMetadata_STATE_UNSPECIFIED
}

func (x *ReportTask_ReportMetadata) GetBeginCreatingTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginCreatingTime
	}
	return nil
}

func (x *ReportTask_ReportMetadata) GetCreationQuotaTokensCharged() int32 {
	if x != nil {
		return x.CreationQuotaTokensCharged
	}
	return 0
}

func (x *ReportTask_ReportMetadata) GetTaskRowCount() int32 {
	if x != nil && x.TaskRowCount != nil {
		return *x.TaskRowCount
	}
	return 0
}

func (x *ReportTask_ReportMetadata) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ReportTask_ReportMetadata) GetTotalRowCount() int32 {
	if x != nil && x.TotalRowCount != nil {
		return *x.TotalRowCount
	}
	return 0
}

var File_google_analytics_data_v1alpha_analytics_data_api_proto protoreflect.FileDescriptor

var file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDesc = []byte{
	0x0a, 0x36, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x28, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x12, 0x32, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x05, 0x0a, 0x15, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe0, 0x41, 0x08, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3c, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x79,
	0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x14, 0x77, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x01, 0x52, 0x13, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x3a, 0xaf, 0x01, 0xea, 0x41, 0xab,
	0x01, 0x0a, 0x32, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x7d, 0x2f, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x7d, 0x2a, 0x16, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x32, 0x15, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x7a, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x71, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x34, 0x0a, 0x32, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x12, 0x32, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x63, 0x75, 0x72,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd5,
	0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x18, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x16, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x74, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x36,
	0x0a, 0x34, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf3, 0x03, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5c, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x11, 0x63, 0x6f, 0x72,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x64,
	0x0a, 0x17, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x15, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x60, 0x0a, 0x15, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x52, 0x13, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x3a, 0x99, 0x01, 0xea, 0x41, 0x95, 0x01, 0x0a, 0x34, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x2c, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x2a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x32, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x5f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2b, 0x0a, 0x29, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x49, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x12, 0x29, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x12, 0x29, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a,
	0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x08, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x08, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x11, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x08, 0x72,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x14, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x04, 0x52, 0x13,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x05, 0x52, 0x15,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x6f, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x06, 0x52, 0x13, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x44, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x3a,
	0x80, 0x01, 0xea, 0x41, 0x7d, 0x0a, 0x29, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x33, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x7d, 0x2a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x32, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6b, 0x0a, 0x18, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0d,
	0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x9f, 0x01, 0x0a, 0x1e, 0x53, 0x68, 0x65, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0xbb, 0x02, 0x0a, 0x1f, 0x53, 0x68, 0x65, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x55, 0x72, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x73,
	0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x6f, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x60,
	0x0a, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x3f, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3d, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8f, 0x07, 0x0a, 0x16, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x06,
	0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x5e, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0f, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x62, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x10, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x19, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x17, 0x66, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5f, 0x0a, 0x10, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x15, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x25, 0x46, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x4e, 0x45, 0x4c,
	0x10, 0x02, 0x22, 0xb8, 0x02, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x61, 0x0a, 0x14, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x75,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x13, 0x66, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xf3, 0x0e,
	0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe0, 0x41, 0x08, 0xe0,
	0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb7,
	0x07, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x66, 0x0a, 0x13,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x73, 0x12, 0x28,
	0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x63, 0x6f, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f,
	0x68, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x0f, 0x6b, 0x65, 0x65,
	0x70, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0xc0, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48,
	0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x13, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x11, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x6f,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x03, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x22, 0x44, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62,
	0x65, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x76, 0xea, 0x41, 0x73,
	0x0a, 0x27, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x7d,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x7d, 0x2a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x32, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2f, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x29, 0x12, 0x27, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x69, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa8, 0x04, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x10, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12,
	0x3a, 0x0a, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x6f, 0x77, 0x52, 0x06, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x29, 0x0a, 0x27, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x29, 0x12, 0x27, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xc5, 0x19, 0x0a, 0x12, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0xbd,
	0x01, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72,
	0x75, 0x6e, 0x46, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xf1,
	0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81,
	0x01, 0xca, 0x41, 0x24, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x14, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x14, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x2c, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xda, 0x41, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x22, 0x32, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0xe4, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x65, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x68,
	0x65, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x68, 0x65,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x22, 0x38,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0xb2, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x3b, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12,
	0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xc5, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x8f, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x75,
	0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x77,
	0xda, 0x41, 0x1e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x3a, 0x17, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x35, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x44, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0xe9, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69,
	0x6e, 0x67, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0xd7, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x22, 0x42, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x7d, 0x12, 0xe2, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e,
	0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x77, 0xca, 0x41, 0x20, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x2c, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x39, 0x3a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x22,
	0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0xc4, 0x01, 0x0a, 0x0f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42,
	0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x22, 0x30, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0xaa, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x39, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x2a,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x7d, 0x12,
	0xbd, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3b, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x1a,
	0xfd, 0x01, 0xca, 0x41, 0x1c, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0xd2, 0x41, 0xda, 0x01, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c,
	0x79, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x64, 0x72, 0x69, 0x76, 0x65, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x73, 0x68, 0x65, 0x65, 0x74, 0x73, 0x42,
	0xc1, 0x01, 0xea, 0x41, 0x3f, 0x0a, 0x26, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x15, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x7d, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x41, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescOnce sync.Once
	file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescData = file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDesc
)

func file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescGZIP() []byte {
	file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescOnce.Do(func() {
		file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescData)
	})
	return file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDescData
}

var file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_google_analytics_data_v1alpha_analytics_data_api_proto_goTypes = []any{
	(AudienceList_State)(0),                             // 0: google.analytics.data.v1alpha.AudienceList.State
	(RunFunnelReportRequest_FunnelVisualizationType)(0), // 1: google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType
	(ReportTask_ReportMetadata_State)(0),                // 2: google.analytics.data.v1alpha.ReportTask.ReportMetadata.State
	(*CreateRecurringAudienceListRequest)(nil),          // 3: google.analytics.data.v1alpha.CreateRecurringAudienceListRequest
	(*RecurringAudienceList)(nil),                       // 4: google.analytics.data.v1alpha.RecurringAudienceList
	(*WebhookNotification)(nil),                         // 5: google.analytics.data.v1alpha.WebhookNotification
	(*GetRecurringAudienceListRequest)(nil),             // 6: google.analytics.data.v1alpha.GetRecurringAudienceListRequest
	(*ListRecurringAudienceListsRequest)(nil),           // 7: google.analytics.data.v1alpha.ListRecurringAudienceListsRequest
	(*ListRecurringAudienceListsResponse)(nil),          // 8: google.analytics.data.v1alpha.ListRecurringAudienceListsResponse
	(*GetPropertyQuotasSnapshotRequest)(nil),            // 9: google.analytics.data.v1alpha.GetPropertyQuotasSnapshotRequest
	(*PropertyQuotasSnapshot)(nil),                      // 10: google.analytics.data.v1alpha.PropertyQuotasSnapshot
	(*GetAudienceListRequest)(nil),                      // 11: google.analytics.data.v1alpha.GetAudienceListRequest
	(*ListAudienceListsRequest)(nil),                    // 12: google.analytics.data.v1alpha.ListAudienceListsRequest
	(*ListAudienceListsResponse)(nil),                   // 13: google.analytics.data.v1alpha.ListAudienceListsResponse
	(*CreateAudienceListRequest)(nil),                   // 14: google.analytics.data.v1alpha.CreateAudienceListRequest
	(*AudienceList)(nil),                                // 15: google.analytics.data.v1alpha.AudienceList
	(*AudienceListMetadata)(nil),                        // 16: google.analytics.data.v1alpha.AudienceListMetadata
	(*QueryAudienceListRequest)(nil),                    // 17: google.analytics.data.v1alpha.QueryAudienceListRequest
	(*QueryAudienceListResponse)(nil),                   // 18: google.analytics.data.v1alpha.QueryAudienceListResponse
	(*SheetExportAudienceListRequest)(nil),              // 19: google.analytics.data.v1alpha.SheetExportAudienceListRequest
	(*SheetExportAudienceListResponse)(nil),             // 20: google.analytics.data.v1alpha.SheetExportAudienceListResponse
	(*AudienceRow)(nil),                                 // 21: google.analytics.data.v1alpha.AudienceRow
	(*AudienceDimension)(nil),                           // 22: google.analytics.data.v1alpha.AudienceDimension
	(*AudienceDimensionValue)(nil),                      // 23: google.analytics.data.v1alpha.AudienceDimensionValue
	(*RunFunnelReportRequest)(nil),                      // 24: google.analytics.data.v1alpha.RunFunnelReportRequest
	(*RunFunnelReportResponse)(nil),                     // 25: google.analytics.data.v1alpha.RunFunnelReportResponse
	(*ReportTask)(nil),                                  // 26: google.analytics.data.v1alpha.ReportTask
	(*CreateReportTaskRequest)(nil),                     // 27: google.analytics.data.v1alpha.CreateReportTaskRequest
	(*ReportTaskMetadata)(nil),                          // 28: google.analytics.data.v1alpha.ReportTaskMetadata
	(*QueryReportTaskRequest)(nil),                      // 29: google.analytics.data.v1alpha.QueryReportTaskRequest
	(*QueryReportTaskResponse)(nil),                     // 30: google.analytics.data.v1alpha.QueryReportTaskResponse
	(*GetReportTaskRequest)(nil),                        // 31: google.analytics.data.v1alpha.GetReportTaskRequest
	(*ListReportTasksRequest)(nil),                      // 32: google.analytics.data.v1alpha.ListReportTasksRequest
	(*ListReportTasksResponse)(nil),                     // 33: google.analytics.data.v1alpha.ListReportTasksResponse
	(*ReportTask_ReportDefinition)(nil),                 // 34: google.analytics.data.v1alpha.ReportTask.ReportDefinition
	(*ReportTask_ReportMetadata)(nil),                   // 35: google.analytics.data.v1alpha.ReportTask.ReportMetadata
	(*PropertyQuota)(nil),                               // 36: google.analytics.data.v1alpha.PropertyQuota
	(*timestamppb.Timestamp)(nil),                       // 37: google.protobuf.Timestamp
	(*DateRange)(nil),                                   // 38: google.analytics.data.v1alpha.DateRange
	(*Funnel)(nil),                                      // 39: google.analytics.data.v1alpha.Funnel
	(*FunnelBreakdown)(nil),                             // 40: google.analytics.data.v1alpha.FunnelBreakdown
	(*FunnelNextAction)(nil),                            // 41: google.analytics.data.v1alpha.FunnelNextAction
	(*Segment)(nil),                                     // 42: google.analytics.data.v1alpha.Segment
	(*FilterExpression)(nil),                            // 43: google.analytics.data.v1alpha.FilterExpression
	(*FunnelSubReport)(nil),                             // 44: google.analytics.data.v1alpha.FunnelSubReport
	(*DimensionHeader)(nil),                             // 45: google.analytics.data.v1alpha.DimensionHeader
	(*MetricHeader)(nil),                                // 46: google.analytics.data.v1alpha.MetricHeader
	(*Row)(nil),                                         // 47: google.analytics.data.v1alpha.Row
	(*ResponseMetaData)(nil),                            // 48: google.analytics.data.v1alpha.ResponseMetaData
	(*Dimension)(nil),                                   // 49: google.analytics.data.v1alpha.Dimension
	(*Metric)(nil),                                      // 50: google.analytics.data.v1alpha.Metric
	(MetricAggregation)(0),                              // 51: google.analytics.data.v1alpha.MetricAggregation
	(*OrderBy)(nil),                                     // 52: google.analytics.data.v1alpha.OrderBy
	(*CohortSpec)(nil),                                  // 53: google.analytics.data.v1alpha.CohortSpec
	(SamplingLevel)(0),                                  // 54: google.analytics.data.v1alpha.SamplingLevel
	(*longrunningpb.Operation)(nil),                     // 55: google.longrunning.Operation
}
var file_google_analytics_data_v1alpha_analytics_data_api_proto_depIdxs = []int32{
	4,  // 0: google.analytics.data.v1alpha.CreateRecurringAudienceListRequest.recurring_audience_list:type_name -> google.analytics.data.v1alpha.RecurringAudienceList
	22, // 1: google.analytics.data.v1alpha.RecurringAudienceList.dimensions:type_name -> google.analytics.data.v1alpha.AudienceDimension
	5,  // 2: google.analytics.data.v1alpha.RecurringAudienceList.webhook_notification:type_name -> google.analytics.data.v1alpha.WebhookNotification
	4,  // 3: google.analytics.data.v1alpha.ListRecurringAudienceListsResponse.recurring_audience_lists:type_name -> google.analytics.data.v1alpha.RecurringAudienceList
	36, // 4: google.analytics.data.v1alpha.PropertyQuotasSnapshot.core_property_quota:type_name -> google.analytics.data.v1alpha.PropertyQuota
	36, // 5: google.analytics.data.v1alpha.PropertyQuotasSnapshot.realtime_property_quota:type_name -> google.analytics.data.v1alpha.PropertyQuota
	36, // 6: google.analytics.data.v1alpha.PropertyQuotasSnapshot.funnel_property_quota:type_name -> google.analytics.data.v1alpha.PropertyQuota
	15, // 7: google.analytics.data.v1alpha.ListAudienceListsResponse.audience_lists:type_name -> google.analytics.data.v1alpha.AudienceList
	15, // 8: google.analytics.data.v1alpha.CreateAudienceListRequest.audience_list:type_name -> google.analytics.data.v1alpha.AudienceList
	22, // 9: google.analytics.data.v1alpha.AudienceList.dimensions:type_name -> google.analytics.data.v1alpha.AudienceDimension
	0,  // 10: google.analytics.data.v1alpha.AudienceList.state:type_name -> google.analytics.data.v1alpha.AudienceList.State
	37, // 11: google.analytics.data.v1alpha.AudienceList.begin_creating_time:type_name -> google.protobuf.Timestamp
	5,  // 12: google.analytics.data.v1alpha.AudienceList.webhook_notification:type_name -> google.analytics.data.v1alpha.WebhookNotification
	15, // 13: google.analytics.data.v1alpha.QueryAudienceListResponse.audience_list:type_name -> google.analytics.data.v1alpha.AudienceList
	21, // 14: google.analytics.data.v1alpha.QueryAudienceListResponse.audience_rows:type_name -> google.analytics.data.v1alpha.AudienceRow
	15, // 15: google.analytics.data.v1alpha.SheetExportAudienceListResponse.audience_list:type_name -> google.analytics.data.v1alpha.AudienceList
	23, // 16: google.analytics.data.v1alpha.AudienceRow.dimension_values:type_name -> google.analytics.data.v1alpha.AudienceDimensionValue
	38, // 17: google.analytics.data.v1alpha.RunFunnelReportRequest.date_ranges:type_name -> google.analytics.data.v1alpha.DateRange
	39, // 18: google.analytics.data.v1alpha.RunFunnelReportRequest.funnel:type_name -> google.analytics.data.v1alpha.Funnel
	40, // 19: google.analytics.data.v1alpha.RunFunnelReportRequest.funnel_breakdown:type_name -> google.analytics.data.v1alpha.FunnelBreakdown
	41, // 20: google.analytics.data.v1alpha.RunFunnelReportRequest.funnel_next_action:type_name -> google.analytics.data.v1alpha.FunnelNextAction
	1,  // 21: google.analytics.data.v1alpha.RunFunnelReportRequest.funnel_visualization_type:type_name -> google.analytics.data.v1alpha.RunFunnelReportRequest.FunnelVisualizationType
	42, // 22: google.analytics.data.v1alpha.RunFunnelReportRequest.segments:type_name -> google.analytics.data.v1alpha.Segment
	43, // 23: google.analytics.data.v1alpha.RunFunnelReportRequest.dimension_filter:type_name -> google.analytics.data.v1alpha.FilterExpression
	44, // 24: google.analytics.data.v1alpha.RunFunnelReportResponse.funnel_table:type_name -> google.analytics.data.v1alpha.FunnelSubReport
	44, // 25: google.analytics.data.v1alpha.RunFunnelReportResponse.funnel_visualization:type_name -> google.analytics.data.v1alpha.FunnelSubReport
	36, // 26: google.analytics.data.v1alpha.RunFunnelReportResponse.property_quota:type_name -> google.analytics.data.v1alpha.PropertyQuota
	34, // 27: google.analytics.data.v1alpha.ReportTask.report_definition:type_name -> google.analytics.data.v1alpha.ReportTask.ReportDefinition
	35, // 28: google.analytics.data.v1alpha.ReportTask.report_metadata:type_name -> google.analytics.data.v1alpha.ReportTask.ReportMetadata
	26, // 29: google.analytics.data.v1alpha.CreateReportTaskRequest.report_task:type_name -> google.analytics.data.v1alpha.ReportTask
	45, // 30: google.analytics.data.v1alpha.QueryReportTaskResponse.dimension_headers:type_name -> google.analytics.data.v1alpha.DimensionHeader
	46, // 31: google.analytics.data.v1alpha.QueryReportTaskResponse.metric_headers:type_name -> google.analytics.data.v1alpha.MetricHeader
	47, // 32: google.analytics.data.v1alpha.QueryReportTaskResponse.rows:type_name -> google.analytics.data.v1alpha.Row
	47, // 33: google.analytics.data.v1alpha.QueryReportTaskResponse.totals:type_name -> google.analytics.data.v1alpha.Row
	47, // 34: google.analytics.data.v1alpha.QueryReportTaskResponse.maximums:type_name -> google.analytics.data.v1alpha.Row
	47, // 35: google.analytics.data.v1alpha.QueryReportTaskResponse.minimums:type_name -> google.analytics.data.v1alpha.Row
	48, // 36: google.analytics.data.v1alpha.QueryReportTaskResponse.metadata:type_name -> google.analytics.data.v1alpha.ResponseMetaData
	26, // 37: google.analytics.data.v1alpha.ListReportTasksResponse.report_tasks:type_name -> google.analytics.data.v1alpha.ReportTask
	49, // 38: google.analytics.data.v1alpha.ReportTask.ReportDefinition.dimensions:type_name -> google.analytics.data.v1alpha.Dimension
	50, // 39: google.analytics.data.v1alpha.ReportTask.ReportDefinition.metrics:type_name -> google.analytics.data.v1alpha.Metric
	38, // 40: google.analytics.data.v1alpha.ReportTask.ReportDefinition.date_ranges:type_name -> google.analytics.data.v1alpha.DateRange
	43, // 41: google.analytics.data.v1alpha.ReportTask.ReportDefinition.dimension_filter:type_name -> google.analytics.data.v1alpha.FilterExpression
	43, // 42: google.analytics.data.v1alpha.ReportTask.ReportDefinition.metric_filter:type_name -> google.analytics.data.v1alpha.FilterExpression
	51, // 43: google.analytics.data.v1alpha.ReportTask.ReportDefinition.metric_aggregations:type_name -> google.analytics.data.v1alpha.MetricAggregation
	52, // 44: google.analytics.data.v1alpha.ReportTask.ReportDefinition.order_bys:type_name -> google.analytics.data.v1alpha.OrderBy
	53, // 45: google.analytics.data.v1alpha.ReportTask.ReportDefinition.cohort_spec:type_name -> google.analytics.data.v1alpha.CohortSpec
	54, // 46: google.analytics.data.v1alpha.ReportTask.ReportDefinition.sampling_level:type_name -> google.analytics.data.v1alpha.SamplingLevel
	2,  // 47: google.analytics.data.v1alpha.ReportTask.ReportMetadata.state:type_name -> google.analytics.data.v1alpha.ReportTask.ReportMetadata.State
	37, // 48: google.analytics.data.v1alpha.ReportTask.ReportMetadata.begin_creating_time:type_name -> google.protobuf.Timestamp
	24, // 49: google.analytics.data.v1alpha.AlphaAnalyticsData.RunFunnelReport:input_type -> google.analytics.data.v1alpha.RunFunnelReportRequest
	14, // 50: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateAudienceList:input_type -> google.analytics.data.v1alpha.CreateAudienceListRequest
	17, // 51: google.analytics.data.v1alpha.AlphaAnalyticsData.QueryAudienceList:input_type -> google.analytics.data.v1alpha.QueryAudienceListRequest
	19, // 52: google.analytics.data.v1alpha.AlphaAnalyticsData.SheetExportAudienceList:input_type -> google.analytics.data.v1alpha.SheetExportAudienceListRequest
	11, // 53: google.analytics.data.v1alpha.AlphaAnalyticsData.GetAudienceList:input_type -> google.analytics.data.v1alpha.GetAudienceListRequest
	12, // 54: google.analytics.data.v1alpha.AlphaAnalyticsData.ListAudienceLists:input_type -> google.analytics.data.v1alpha.ListAudienceListsRequest
	3,  // 55: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateRecurringAudienceList:input_type -> google.analytics.data.v1alpha.CreateRecurringAudienceListRequest
	6,  // 56: google.analytics.data.v1alpha.AlphaAnalyticsData.GetRecurringAudienceList:input_type -> google.analytics.data.v1alpha.GetRecurringAudienceListRequest
	7,  // 57: google.analytics.data.v1alpha.AlphaAnalyticsData.ListRecurringAudienceLists:input_type -> google.analytics.data.v1alpha.ListRecurringAudienceListsRequest
	9,  // 58: google.analytics.data.v1alpha.AlphaAnalyticsData.GetPropertyQuotasSnapshot:input_type -> google.analytics.data.v1alpha.GetPropertyQuotasSnapshotRequest
	27, // 59: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateReportTask:input_type -> google.analytics.data.v1alpha.CreateReportTaskRequest
	29, // 60: google.analytics.data.v1alpha.AlphaAnalyticsData.QueryReportTask:input_type -> google.analytics.data.v1alpha.QueryReportTaskRequest
	31, // 61: google.analytics.data.v1alpha.AlphaAnalyticsData.GetReportTask:input_type -> google.analytics.data.v1alpha.GetReportTaskRequest
	32, // 62: google.analytics.data.v1alpha.AlphaAnalyticsData.ListReportTasks:input_type -> google.analytics.data.v1alpha.ListReportTasksRequest
	25, // 63: google.analytics.data.v1alpha.AlphaAnalyticsData.RunFunnelReport:output_type -> google.analytics.data.v1alpha.RunFunnelReportResponse
	55, // 64: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateAudienceList:output_type -> google.longrunning.Operation
	18, // 65: google.analytics.data.v1alpha.AlphaAnalyticsData.QueryAudienceList:output_type -> google.analytics.data.v1alpha.QueryAudienceListResponse
	20, // 66: google.analytics.data.v1alpha.AlphaAnalyticsData.SheetExportAudienceList:output_type -> google.analytics.data.v1alpha.SheetExportAudienceListResponse
	15, // 67: google.analytics.data.v1alpha.AlphaAnalyticsData.GetAudienceList:output_type -> google.analytics.data.v1alpha.AudienceList
	13, // 68: google.analytics.data.v1alpha.AlphaAnalyticsData.ListAudienceLists:output_type -> google.analytics.data.v1alpha.ListAudienceListsResponse
	4,  // 69: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateRecurringAudienceList:output_type -> google.analytics.data.v1alpha.RecurringAudienceList
	4,  // 70: google.analytics.data.v1alpha.AlphaAnalyticsData.GetRecurringAudienceList:output_type -> google.analytics.data.v1alpha.RecurringAudienceList
	8,  // 71: google.analytics.data.v1alpha.AlphaAnalyticsData.ListRecurringAudienceLists:output_type -> google.analytics.data.v1alpha.ListRecurringAudienceListsResponse
	10, // 72: google.analytics.data.v1alpha.AlphaAnalyticsData.GetPropertyQuotasSnapshot:output_type -> google.analytics.data.v1alpha.PropertyQuotasSnapshot
	55, // 73: google.analytics.data.v1alpha.AlphaAnalyticsData.CreateReportTask:output_type -> google.longrunning.Operation
	30, // 74: google.analytics.data.v1alpha.AlphaAnalyticsData.QueryReportTask:output_type -> google.analytics.data.v1alpha.QueryReportTaskResponse
	26, // 75: google.analytics.data.v1alpha.AlphaAnalyticsData.GetReportTask:output_type -> google.analytics.data.v1alpha.ReportTask
	33, // 76: google.analytics.data.v1alpha.AlphaAnalyticsData.ListReportTasks:output_type -> google.analytics.data.v1alpha.ListReportTasksResponse
	63, // [63:77] is the sub-list for method output_type
	49, // [49:63] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_google_analytics_data_v1alpha_analytics_data_api_proto_init() }
func file_google_analytics_data_v1alpha_analytics_data_api_proto_init() {
	if File_google_analytics_data_v1alpha_analytics_data_api_proto != nil {
		return
	}
	file_google_analytics_data_v1alpha_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRecurringAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RecurringAudienceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*WebhookNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRecurringAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecurringAudienceListsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListRecurringAudienceListsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetPropertyQuotasSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PropertyQuotasSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListAudienceListsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListAudienceListsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*AudienceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*AudienceListMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*QueryAudienceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SheetExportAudienceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*SheetExportAudienceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AudienceRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AudienceDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AudienceDimensionValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RunFunnelReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RunFunnelReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ReportTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CreateReportTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ReportTaskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*QueryReportTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*QueryReportTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetReportTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ListReportTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ReportTask_ReportDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ReportTask_ReportMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[1].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[5].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[10].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[12].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[15].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[17].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[20].OneofWrappers = []any{
		(*AudienceDimensionValue_Value)(nil),
	}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[30].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[31].OneofWrappers = []any{}
	file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes[32].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_analytics_data_v1alpha_analytics_data_api_proto_goTypes,
		DependencyIndexes: file_google_analytics_data_v1alpha_analytics_data_api_proto_depIdxs,
		EnumInfos:         file_google_analytics_data_v1alpha_analytics_data_api_proto_enumTypes,
		MessageInfos:      file_google_analytics_data_v1alpha_analytics_data_api_proto_msgTypes,
	}.Build()
	File_google_analytics_data_v1alpha_analytics_data_api_proto = out.File
	file_google_analytics_data_v1alpha_analytics_data_api_proto_rawDesc = nil
	file_google_analytics_data_v1alpha_analytics_data_api_proto_goTypes = nil
	file_google_analytics_data_v1alpha_analytics_data_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AlphaAnalyticsDataClient is the client API for AlphaAnalyticsData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlphaAnalyticsDataClient interface {
	// Returns a customized funnel report of your Google Analytics event data. The
	// data returned from the API is as a table with columns for the requested
	// dimensions and metrics.
	//
	// Funnel exploration lets you visualize the steps your users take to complete
	// a task and quickly see how well they are succeeding or failing at each
	// step. For example, how do prospects become shoppers and then become buyers?
	// How do one time buyers become repeat buyers? With this information, you can
	// improve inefficient or abandoned customer journeys. To learn more, see [GA4
	// Funnel Explorations](https://support.google.com/analytics/answer/9327974).
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the [Google Analytics Data API Funnel
	// Reporting
	// Feedback](https://docs.google.com/forms/d/e/1FAIpQLSdwOlQDJAUoBiIgUZZ3S_Lwi8gr7Bb0k1jhvc-DEg7Rol3UjA/viewform).
	RunFunnelReport(ctx context.Context, in *RunFunnelReportRequest, opts ...grpc.CallOption) (*RunFunnelReportResponse, error)
	// Creates an audience list for later retrieval. This method quickly returns
	// the audience list's resource name and initiates a long running asynchronous
	// request to form an audience list. To list the users in an audience list,
	// first create the audience list through this method and then send the
	// audience resource name to the `QueryAudienceList` method.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// An audience list is a snapshot of the users currently in the audience at
	// the time of audience list creation. Creating audience lists for one
	// audience on different days will return different results as users enter and
	// exit the audience.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572. Audience lists contain
	// the users in each audience.
	//
	// This method is available at beta stability at
	// [audienceExports.create](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/create).
	// To give your feedback on this API, complete the [Google Analytics Audience
	// Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	CreateAudienceList(ctx context.Context, in *CreateAudienceListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves an audience list of users. After creating an audience, the users
	// are not immediately available for listing. First, a request to
	// `CreateAudienceList` is necessary to create an audience list of users, and
	// then second, this method is used to retrieve the users in the audience
	// list.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572.
	//
	// This method is available at beta stability at
	// [audienceExports.query](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/query).
	// To give your feedback on this API, complete the [Google Analytics Audience
	// Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	QueryAudienceList(ctx context.Context, in *QueryAudienceListRequest, opts ...grpc.CallOption) (*QueryAudienceListResponse, error)
	// Exports an audience list of users to a Google Sheet. After creating an
	// audience, the users are not immediately available for listing. First, a
	// request to `CreateAudienceList` is necessary to create an audience list of
	// users, and then second, this method is used to export those users in the
	// audience list to a Google Sheet.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	SheetExportAudienceList(ctx context.Context, in *SheetExportAudienceListRequest, opts ...grpc.CallOption) (*SheetExportAudienceListResponse, error)
	// Gets configuration metadata about a specific audience list. This method
	// can be used to understand an audience list after it has been created.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// This method is available at beta stability at
	// [audienceExports.get](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/get).
	// To give your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	GetAudienceList(ctx context.Context, in *GetAudienceListRequest, opts ...grpc.CallOption) (*AudienceList, error)
	// Lists all audience lists for a property. This method can be used for you to
	// find and reuse existing audience lists rather than creating unnecessary new
	// audience lists. The same audience can have multiple audience lists that
	// represent the list of users that were in an audience on different days.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// This method is available at beta stability at
	// [audienceExports.list](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/list).
	// To give your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	ListAudienceLists(ctx context.Context, in *ListAudienceListsRequest, opts ...grpc.CallOption) (*ListAudienceListsResponse, error)
	// Creates a recurring audience list. Recurring audience lists produces new
	// audience lists each day. Audience lists are users in an audience at the
	// time of the list's creation.
	//
	// A recurring audience list ensures that you have audience list based on the
	// most recent data available for use each day. If you manually create
	// audience list, you don't know when an audience list based on an additional
	// day's data is available. This recurring audience list automates the
	// creation of an audience list when an additional day's data is available.
	// You will consume fewer quota tokens by using recurring audience list versus
	// manually creating audience list at various times of day trying to guess
	// when an additional day's data is ready.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	CreateRecurringAudienceList(ctx context.Context, in *CreateRecurringAudienceListRequest, opts ...grpc.CallOption) (*RecurringAudienceList, error)
	// Gets configuration metadata about a specific recurring audience list. This
	// method can be used to understand a recurring audience list's state after it
	// has been created. For example, a recurring audience list resource will
	// generate audience list instances for each day, and this method can be used
	// to get the resource name of the most recent audience list instance.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	GetRecurringAudienceList(ctx context.Context, in *GetRecurringAudienceListRequest, opts ...grpc.CallOption) (*RecurringAudienceList, error)
	// Lists all recurring audience lists for a property. This method can be used
	// for you to find and reuse existing recurring audience lists rather than
	// creating unnecessary new recurring audience lists. The same audience can
	// have multiple recurring audience lists that represent different dimension
	// combinations; for example, just the dimension `deviceId` or both the
	// dimensions `deviceId` and `userId`.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	ListRecurringAudienceLists(ctx context.Context, in *ListRecurringAudienceListsRequest, opts ...grpc.CallOption) (*ListRecurringAudienceListsResponse, error)
	// Get all property quotas organized by quota category for a given property.
	// This will charge 1 property quota from the category with the most quota.
	GetPropertyQuotasSnapshot(ctx context.Context, in *GetPropertyQuotasSnapshotRequest, opts ...grpc.CallOption) (*PropertyQuotasSnapshot, error)
	// Initiates the creation of a report task. This method quickly
	// returns a report task and initiates a long running
	// asynchronous request to form a customized report of your Google Analytics
	// event data.
	//
	// A report task will be retained and available for querying for 72 hours
	// after it has been created.
	//
	// A report task created by one user can be listed and queried by all users
	// who have access to the property.
	CreateReportTask(ctx context.Context, in *CreateReportTaskRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Retrieves a report task's content. After requesting the `CreateReportTask`,
	// you are able to retrieve the report content once the report is
	// ACTIVE. This method will return an error if the report task's state is not
	// `ACTIVE`. A query response will return the tabular row & column values of
	// the report.
	QueryReportTask(ctx context.Context, in *QueryReportTaskRequest, opts ...grpc.CallOption) (*QueryReportTaskResponse, error)
	// Gets report metadata about a specific report task. After creating a report
	// task, use this method to check its processing state or inspect its
	// report definition.
	GetReportTask(ctx context.Context, in *GetReportTaskRequest, opts ...grpc.CallOption) (*ReportTask, error)
	// Lists all report tasks for a property.
	ListReportTasks(ctx context.Context, in *ListReportTasksRequest, opts ...grpc.CallOption) (*ListReportTasksResponse, error)
}

type alphaAnalyticsDataClient struct {
	cc grpc.ClientConnInterface
}

func NewAlphaAnalyticsDataClient(cc grpc.ClientConnInterface) AlphaAnalyticsDataClient {
	return &alphaAnalyticsDataClient{cc}
}

func (c *alphaAnalyticsDataClient) RunFunnelReport(ctx context.Context, in *RunFunnelReportRequest, opts ...grpc.CallOption) (*RunFunnelReportResponse, error) {
	out := new(RunFunnelReportResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunFunnelReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) CreateAudienceList(ctx context.Context, in *CreateAudienceListRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) QueryAudienceList(ctx context.Context, in *QueryAudienceListRequest, opts ...grpc.CallOption) (*QueryAudienceListResponse, error) {
	out := new(QueryAudienceListResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/QueryAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) SheetExportAudienceList(ctx context.Context, in *SheetExportAudienceListRequest, opts ...grpc.CallOption) (*SheetExportAudienceListResponse, error) {
	out := new(SheetExportAudienceListResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/SheetExportAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) GetAudienceList(ctx context.Context, in *GetAudienceListRequest, opts ...grpc.CallOption) (*AudienceList, error) {
	out := new(AudienceList)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) ListAudienceLists(ctx context.Context, in *ListAudienceListsRequest, opts ...grpc.CallOption) (*ListAudienceListsResponse, error) {
	out := new(ListAudienceListsResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListAudienceLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) CreateRecurringAudienceList(ctx context.Context, in *CreateRecurringAudienceListRequest, opts ...grpc.CallOption) (*RecurringAudienceList, error) {
	out := new(RecurringAudienceList)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateRecurringAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) GetRecurringAudienceList(ctx context.Context, in *GetRecurringAudienceListRequest, opts ...grpc.CallOption) (*RecurringAudienceList, error) {
	out := new(RecurringAudienceList)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetRecurringAudienceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) ListRecurringAudienceLists(ctx context.Context, in *ListRecurringAudienceListsRequest, opts ...grpc.CallOption) (*ListRecurringAudienceListsResponse, error) {
	out := new(ListRecurringAudienceListsResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListRecurringAudienceLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) GetPropertyQuotasSnapshot(ctx context.Context, in *GetPropertyQuotasSnapshotRequest, opts ...grpc.CallOption) (*PropertyQuotasSnapshot, error) {
	out := new(PropertyQuotasSnapshot)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetPropertyQuotasSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) CreateReportTask(ctx context.Context, in *CreateReportTaskRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) QueryReportTask(ctx context.Context, in *QueryReportTaskRequest, opts ...grpc.CallOption) (*QueryReportTaskResponse, error) {
	out := new(QueryReportTaskResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/QueryReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) GetReportTask(ctx context.Context, in *GetReportTaskRequest, opts ...grpc.CallOption) (*ReportTask, error) {
	out := new(ReportTask)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alphaAnalyticsDataClient) ListReportTasks(ctx context.Context, in *ListReportTasksRequest, opts ...grpc.CallOption) (*ListReportTasksResponse, error) {
	out := new(ListReportTasksResponse)
	err := c.cc.Invoke(ctx, "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListReportTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlphaAnalyticsDataServer is the server API for AlphaAnalyticsData service.
type AlphaAnalyticsDataServer interface {
	// Returns a customized funnel report of your Google Analytics event data. The
	// data returned from the API is as a table with columns for the requested
	// dimensions and metrics.
	//
	// Funnel exploration lets you visualize the steps your users take to complete
	// a task and quickly see how well they are succeeding or failing at each
	// step. For example, how do prospects become shoppers and then become buyers?
	// How do one time buyers become repeat buyers? With this information, you can
	// improve inefficient or abandoned customer journeys. To learn more, see [GA4
	// Funnel Explorations](https://support.google.com/analytics/answer/9327974).
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the [Google Analytics Data API Funnel
	// Reporting
	// Feedback](https://docs.google.com/forms/d/e/1FAIpQLSdwOlQDJAUoBiIgUZZ3S_Lwi8gr7Bb0k1jhvc-DEg7Rol3UjA/viewform).
	RunFunnelReport(context.Context, *RunFunnelReportRequest) (*RunFunnelReportResponse, error)
	// Creates an audience list for later retrieval. This method quickly returns
	// the audience list's resource name and initiates a long running asynchronous
	// request to form an audience list. To list the users in an audience list,
	// first create the audience list through this method and then send the
	// audience resource name to the `QueryAudienceList` method.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// An audience list is a snapshot of the users currently in the audience at
	// the time of audience list creation. Creating audience lists for one
	// audience on different days will return different results as users enter and
	// exit the audience.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572. Audience lists contain
	// the users in each audience.
	//
	// This method is available at beta stability at
	// [audienceExports.create](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/create).
	// To give your feedback on this API, complete the [Google Analytics Audience
	// Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	CreateAudienceList(context.Context, *CreateAudienceListRequest) (*longrunningpb.Operation, error)
	// Retrieves an audience list of users. After creating an audience, the users
	// are not immediately available for listing. First, a request to
	// `CreateAudienceList` is necessary to create an audience list of users, and
	// then second, this method is used to retrieve the users in the audience
	// list.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572.
	//
	// This method is available at beta stability at
	// [audienceExports.query](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/query).
	// To give your feedback on this API, complete the [Google Analytics Audience
	// Export API Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	QueryAudienceList(context.Context, *QueryAudienceListRequest) (*QueryAudienceListResponse, error)
	// Exports an audience list of users to a Google Sheet. After creating an
	// audience, the users are not immediately available for listing. First, a
	// request to `CreateAudienceList` is necessary to create an audience list of
	// users, and then second, this method is used to export those users in the
	// audience list to a Google Sheet.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// Audiences in Google Analytics 4 allow you to segment your users in the ways
	// that are important to your business. To learn more, see
	// https://support.google.com/analytics/answer/9267572.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	SheetExportAudienceList(context.Context, *SheetExportAudienceListRequest) (*SheetExportAudienceListResponse, error)
	// Gets configuration metadata about a specific audience list. This method
	// can be used to understand an audience list after it has been created.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// This method is available at beta stability at
	// [audienceExports.get](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/get).
	// To give your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	GetAudienceList(context.Context, *GetAudienceListRequest) (*AudienceList, error)
	// Lists all audience lists for a property. This method can be used for you to
	// find and reuse existing audience lists rather than creating unnecessary new
	// audience lists. The same audience can have multiple audience lists that
	// represent the list of users that were in an audience on different days.
	//
	// See [Creating an Audience
	// List](https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
	// for an introduction to Audience Lists with examples.
	//
	// This method is available at beta stability at
	// [audienceExports.list](https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/list).
	// To give your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	ListAudienceLists(context.Context, *ListAudienceListsRequest) (*ListAudienceListsResponse, error)
	// Creates a recurring audience list. Recurring audience lists produces new
	// audience lists each day. Audience lists are users in an audience at the
	// time of the list's creation.
	//
	// A recurring audience list ensures that you have audience list based on the
	// most recent data available for use each day. If you manually create
	// audience list, you don't know when an audience list based on an additional
	// day's data is available. This recurring audience list automates the
	// creation of an audience list when an additional day's data is available.
	// You will consume fewer quota tokens by using recurring audience list versus
	// manually creating audience list at various times of day trying to guess
	// when an additional day's data is ready.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	CreateRecurringAudienceList(context.Context, *CreateRecurringAudienceListRequest) (*RecurringAudienceList, error)
	// Gets configuration metadata about a specific recurring audience list. This
	// method can be used to understand a recurring audience list's state after it
	// has been created. For example, a recurring audience list resource will
	// generate audience list instances for each day, and this method can be used
	// to get the resource name of the most recent audience list instance.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	GetRecurringAudienceList(context.Context, *GetRecurringAudienceListRequest) (*RecurringAudienceList, error)
	// Lists all recurring audience lists for a property. This method can be used
	// for you to find and reuse existing recurring audience lists rather than
	// creating unnecessary new recurring audience lists. The same audience can
	// have multiple recurring audience lists that represent different dimension
	// combinations; for example, just the dimension `deviceId` or both the
	// dimensions `deviceId` and `userId`.
	//
	// This method is introduced at alpha stability with the intention of
	// gathering feedback on syntax and capabilities before entering beta. To give
	// your feedback on this API, complete the
	// [Google Analytics Audience Export API
	// Feedback](https://forms.gle/EeA5u5LW6PEggtCEA) form.
	ListRecurringAudienceLists(context.Context, *ListRecurringAudienceListsRequest) (*ListRecurringAudienceListsResponse, error)
	// Get all property quotas organized by quota category for a given property.
	// This will charge 1 property quota from the category with the most quota.
	GetPropertyQuotasSnapshot(context.Context, *GetPropertyQuotasSnapshotRequest) (*PropertyQuotasSnapshot, error)
	// Initiates the creation of a report task. This method quickly
	// returns a report task and initiates a long running
	// asynchronous request to form a customized report of your Google Analytics
	// event data.
	//
	// A report task will be retained and available for querying for 72 hours
	// after it has been created.
	//
	// A report task created by one user can be listed and queried by all users
	// who have access to the property.
	CreateReportTask(context.Context, *CreateReportTaskRequest) (*longrunningpb.Operation, error)
	// Retrieves a report task's content. After requesting the `CreateReportTask`,
	// you are able to retrieve the report content once the report is
	// ACTIVE. This method will return an error if the report task's state is not
	// `ACTIVE`. A query response will return the tabular row & column values of
	// the report.
	QueryReportTask(context.Context, *QueryReportTaskRequest) (*QueryReportTaskResponse, error)
	// Gets report metadata about a specific report task. After creating a report
	// task, use this method to check its processing state or inspect its
	// report definition.
	GetReportTask(context.Context, *GetReportTaskRequest) (*ReportTask, error)
	// Lists all report tasks for a property.
	ListReportTasks(context.Context, *ListReportTasksRequest) (*ListReportTasksResponse, error)
}

// UnimplementedAlphaAnalyticsDataServer can be embedded to have forward compatible implementations.
type UnimplementedAlphaAnalyticsDataServer struct {
}

func (*UnimplementedAlphaAnalyticsDataServer) RunFunnelReport(context.Context, *RunFunnelReportRequest) (*RunFunnelReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFunnelReport not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) CreateAudienceList(context.Context, *CreateAudienceListRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) QueryAudienceList(context.Context, *QueryAudienceListRequest) (*QueryAudienceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) SheetExportAudienceList(context.Context, *SheetExportAudienceListRequest) (*SheetExportAudienceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SheetExportAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) GetAudienceList(context.Context, *GetAudienceListRequest) (*AudienceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) ListAudienceLists(context.Context, *ListAudienceListsRequest) (*ListAudienceListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAudienceLists not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) CreateRecurringAudienceList(context.Context, *CreateRecurringAudienceListRequest) (*RecurringAudienceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecurringAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) GetRecurringAudienceList(context.Context, *GetRecurringAudienceListRequest) (*RecurringAudienceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecurringAudienceList not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) ListRecurringAudienceLists(context.Context, *ListRecurringAudienceListsRequest) (*ListRecurringAudienceListsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecurringAudienceLists not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) GetPropertyQuotasSnapshot(context.Context, *GetPropertyQuotasSnapshotRequest) (*PropertyQuotasSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPropertyQuotasSnapshot not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) CreateReportTask(context.Context, *CreateReportTaskRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportTask not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) QueryReportTask(context.Context, *QueryReportTaskRequest) (*QueryReportTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryReportTask not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) GetReportTask(context.Context, *GetReportTaskRequest) (*ReportTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportTask not implemented")
}
func (*UnimplementedAlphaAnalyticsDataServer) ListReportTasks(context.Context, *ListReportTasksRequest) (*ListReportTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReportTasks not implemented")
}

func RegisterAlphaAnalyticsDataServer(s *grpc.Server, srv AlphaAnalyticsDataServer) {
	s.RegisterService(&_AlphaAnalyticsData_serviceDesc, srv)
}

func _AlphaAnalyticsData_RunFunnelReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunFunnelReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).RunFunnelReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/RunFunnelReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).RunFunnelReport(ctx, req.(*RunFunnelReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_CreateAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).CreateAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).CreateAudienceList(ctx, req.(*CreateAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_QueryAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).QueryAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/QueryAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).QueryAudienceList(ctx, req.(*QueryAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_SheetExportAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SheetExportAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).SheetExportAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/SheetExportAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).SheetExportAudienceList(ctx, req.(*SheetExportAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_GetAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).GetAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).GetAudienceList(ctx, req.(*GetAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_ListAudienceLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAudienceListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).ListAudienceLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListAudienceLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).ListAudienceLists(ctx, req.(*ListAudienceListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_CreateRecurringAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecurringAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).CreateRecurringAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateRecurringAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).CreateRecurringAudienceList(ctx, req.(*CreateRecurringAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_GetRecurringAudienceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecurringAudienceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).GetRecurringAudienceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetRecurringAudienceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).GetRecurringAudienceList(ctx, req.(*GetRecurringAudienceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_ListRecurringAudienceLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecurringAudienceListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).ListRecurringAudienceLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListRecurringAudienceLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).ListRecurringAudienceLists(ctx, req.(*ListRecurringAudienceListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_GetPropertyQuotasSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPropertyQuotasSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).GetPropertyQuotasSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetPropertyQuotasSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).GetPropertyQuotasSnapshot(ctx, req.(*GetPropertyQuotasSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_CreateReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).CreateReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/CreateReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).CreateReportTask(ctx, req.(*CreateReportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_QueryReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).QueryReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/QueryReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).QueryReportTask(ctx, req.(*QueryReportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_GetReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).GetReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/GetReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).GetReportTask(ctx, req.(*GetReportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlphaAnalyticsData_ListReportTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlphaAnalyticsDataServer).ListReportTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.analytics.data.v1alpha.AlphaAnalyticsData/ListReportTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlphaAnalyticsDataServer).ListReportTasks(ctx, req.(*ListReportTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlphaAnalyticsData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.analytics.data.v1alpha.AlphaAnalyticsData",
	HandlerType: (*AlphaAnalyticsDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunFunnelReport",
			Handler:    _AlphaAnalyticsData_RunFunnelReport_Handler,
		},
		{
			MethodName: "CreateAudienceList",
			Handler:    _AlphaAnalyticsData_CreateAudienceList_Handler,
		},
		{
			MethodName: "QueryAudienceList",
			Handler:    _AlphaAnalyticsData_QueryAudienceList_Handler,
		},
		{
			MethodName: "SheetExportAudienceList",
			Handler:    _AlphaAnalyticsData_SheetExportAudienceList_Handler,
		},
		{
			MethodName: "GetAudienceList",
			Handler:    _AlphaAnalyticsData_GetAudienceList_Handler,
		},
		{
			MethodName: "ListAudienceLists",
			Handler:    _AlphaAnalyticsData_ListAudienceLists_Handler,
		},
		{
			MethodName: "CreateRecurringAudienceList",
			Handler:    _AlphaAnalyticsData_CreateRecurringAudienceList_Handler,
		},
		{
			MethodName: "GetRecurringAudienceList",
			Handler:    _AlphaAnalyticsData_GetRecurringAudienceList_Handler,
		},
		{
			MethodName: "ListRecurringAudienceLists",
			Handler:    _AlphaAnalyticsData_ListRecurringAudienceLists_Handler,
		},
		{
			MethodName: "GetPropertyQuotasSnapshot",
			Handler:    _AlphaAnalyticsData_GetPropertyQuotasSnapshot_Handler,
		},
		{
			MethodName: "CreateReportTask",
			Handler:    _AlphaAnalyticsData_CreateReportTask_Handler,
		},
		{
			MethodName: "QueryReportTask",
			Handler:    _AlphaAnalyticsData_QueryReportTask_Handler,
		},
		{
			MethodName: "GetReportTask",
			Handler:    _AlphaAnalyticsData_GetReportTask_Handler,
		},
		{
			MethodName: "ListReportTasks",
			Handler:    _AlphaAnalyticsData_ListReportTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/analytics/data/v1alpha/analytics_data_api.proto",
}
