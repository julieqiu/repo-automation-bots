// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package alertcenter

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	alertcenterpb "google.golang.org/genproto/googleapis/apps/alertcenter/v1beta1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	ListAlerts          []gax.CallOption
	GetAlert            []gax.CallOption
	DeleteAlert         []gax.CallOption
	UndeleteAlert       []gax.CallOption
	CreateAlertFeedback []gax.CallOption
	ListAlertFeedback   []gax.CallOption
	GetAlertMetadata    []gax.CallOption
	GetSettings         []gax.CallOption
	UpdateSettings      []gax.CallOption
	BatchDeleteAlerts   []gax.CallOption
	BatchUndeleteAlerts []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("alertcenter.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("alertcenter.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("alertcenter.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://alertcenter.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		ListAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		UndeleteAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateAlertFeedback: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListAlertFeedback: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAlertMetadata: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetSettings: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		UpdateSettings: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		BatchDeleteAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		BatchUndeleteAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

func defaultRESTCallOptions() *CallOptions {
	return &CallOptions{
		ListAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		UndeleteAlert: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateAlertFeedback: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListAlertFeedback: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAlertMetadata: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetSettings: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		UpdateSettings: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		BatchDeleteAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		BatchUndeleteAlerts: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

// internalClient is an interface that defines the methods available from Google Workspace Alert Center API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListAlerts(context.Context, *alertcenterpb.ListAlertsRequest, ...gax.CallOption) *AlertIterator
	GetAlert(context.Context, *alertcenterpb.GetAlertRequest, ...gax.CallOption) (*alertcenterpb.Alert, error)
	DeleteAlert(context.Context, *alertcenterpb.DeleteAlertRequest, ...gax.CallOption) error
	UndeleteAlert(context.Context, *alertcenterpb.UndeleteAlertRequest, ...gax.CallOption) (*alertcenterpb.Alert, error)
	CreateAlertFeedback(context.Context, *alertcenterpb.CreateAlertFeedbackRequest, ...gax.CallOption) (*alertcenterpb.AlertFeedback, error)
	ListAlertFeedback(context.Context, *alertcenterpb.ListAlertFeedbackRequest, ...gax.CallOption) (*alertcenterpb.ListAlertFeedbackResponse, error)
	GetAlertMetadata(context.Context, *alertcenterpb.GetAlertMetadataRequest, ...gax.CallOption) (*alertcenterpb.AlertMetadata, error)
	GetSettings(context.Context, *alertcenterpb.GetSettingsRequest, ...gax.CallOption) (*alertcenterpb.Settings, error)
	UpdateSettings(context.Context, *alertcenterpb.UpdateSettingsRequest, ...gax.CallOption) (*alertcenterpb.Settings, error)
	BatchDeleteAlerts(context.Context, *alertcenterpb.BatchDeleteAlertsRequest, ...gax.CallOption) (*alertcenterpb.BatchDeleteAlertsResponse, error)
	BatchUndeleteAlerts(context.Context, *alertcenterpb.BatchUndeleteAlertsRequest, ...gax.CallOption) (*alertcenterpb.BatchUndeleteAlertsResponse, error)
}

// Client is a client for interacting with Google Workspace Alert Center API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Google Workspace Alert Center API (beta).
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListAlerts lists the alerts.
func (c *Client) ListAlerts(ctx context.Context, req *alertcenterpb.ListAlertsRequest, opts ...gax.CallOption) *AlertIterator {
	return c.internalClient.ListAlerts(ctx, req, opts...)
}

// GetAlert gets the specified alert. Attempting to get a nonexistent alert returns
// NOT_FOUND error.
func (c *Client) GetAlert(ctx context.Context, req *alertcenterpb.GetAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	return c.internalClient.GetAlert(ctx, req, opts...)
}

// DeleteAlert marks the specified alert for deletion. An alert that has been marked for
// deletion is removed from Alert Center after 30 days.
// Marking an alert for deletion has no effect on an alert which has
// already been marked for deletion. Attempting to mark a nonexistent alert
// for deletion results in a NOT_FOUND error.
func (c *Client) DeleteAlert(ctx context.Context, req *alertcenterpb.DeleteAlertRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteAlert(ctx, req, opts...)
}

// UndeleteAlert restores, or “undeletes”, an alert that was marked for deletion within the
// past 30 days. Attempting to undelete an alert which was marked for deletion
// over 30 days ago (which has been removed from the Alert Center database) or
// a nonexistent alert returns a NOT_FOUND error. Attempting to
// undelete an alert which has not been marked for deletion has no effect.
func (c *Client) UndeleteAlert(ctx context.Context, req *alertcenterpb.UndeleteAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	return c.internalClient.UndeleteAlert(ctx, req, opts...)
}

// CreateAlertFeedback creates new feedback for an alert. Attempting to create a feedback for
// a non-existent alert returns NOT_FOUND error. Attempting to create a
// feedback for an alert that is marked for deletion returns
// `FAILED_PRECONDITION’ error.
func (c *Client) CreateAlertFeedback(ctx context.Context, req *alertcenterpb.CreateAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.AlertFeedback, error) {
	return c.internalClient.CreateAlertFeedback(ctx, req, opts...)
}

// ListAlertFeedback lists all the feedback for an alert. Attempting to list feedbacks for
// a non-existent alert returns NOT_FOUND error.
func (c *Client) ListAlertFeedback(ctx context.Context, req *alertcenterpb.ListAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.ListAlertFeedbackResponse, error) {
	return c.internalClient.ListAlertFeedback(ctx, req, opts...)
}

// GetAlertMetadata returns the metadata of an alert. Attempting to get metadata for
// a non-existent alert returns NOT_FOUND error.
func (c *Client) GetAlertMetadata(ctx context.Context, req *alertcenterpb.GetAlertMetadataRequest, opts ...gax.CallOption) (*alertcenterpb.AlertMetadata, error) {
	return c.internalClient.GetAlertMetadata(ctx, req, opts...)
}

// GetSettings returns customer-level settings.
func (c *Client) GetSettings(ctx context.Context, req *alertcenterpb.GetSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	return c.internalClient.GetSettings(ctx, req, opts...)
}

// UpdateSettings updates the customer-level settings.
func (c *Client) UpdateSettings(ctx context.Context, req *alertcenterpb.UpdateSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	return c.internalClient.UpdateSettings(ctx, req, opts...)
}

// BatchDeleteAlerts performs batch delete operation on alerts.
func (c *Client) BatchDeleteAlerts(ctx context.Context, req *alertcenterpb.BatchDeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchDeleteAlertsResponse, error) {
	return c.internalClient.BatchDeleteAlerts(ctx, req, opts...)
}

// BatchUndeleteAlerts performs batch undelete operation on alerts.
func (c *Client) BatchUndeleteAlerts(ctx context.Context, req *alertcenterpb.BatchUndeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchUndeleteAlertsResponse, error) {
	return c.internalClient.BatchUndeleteAlerts(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Google Workspace Alert Center API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client alertcenterpb.AlertCenterServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewClient creates a new alert center service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Google Workspace Alert Center API (beta).
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:    connPool,
		client:      alertcenterpb.NewAlertCenterServiceClient(connPool),
		CallOptions: &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type restClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions
}

// NewRESTClient creates a new alert center service rest client.
//
// Google Workspace Alert Center API (beta).
func NewRESTClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := append(defaultRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultRESTCallOptions()
	c := &restClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &Client{internalClient: c, CallOptions: callOpts}, nil
}

func defaultRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://alertcenter.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://alertcenter.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://alertcenter.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://alertcenter.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *restClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *restClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *restClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *gRPCClient) ListAlerts(ctx context.Context, req *alertcenterpb.ListAlertsRequest, opts ...gax.CallOption) *AlertIterator {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).ListAlerts[0:len((*c.CallOptions).ListAlerts):len((*c.CallOptions).ListAlerts)], opts...)
	it := &AlertIterator{}
	req = proto.Clone(req).(*alertcenterpb.ListAlertsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*alertcenterpb.Alert, string, error) {
		resp := &alertcenterpb.ListAlertsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListAlerts(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetAlerts(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetAlert(ctx context.Context, req *alertcenterpb.GetAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetAlert[0:len((*c.CallOptions).GetAlert):len((*c.CallOptions).GetAlert)], opts...)
	var resp *alertcenterpb.Alert
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetAlert(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) DeleteAlert(ctx context.Context, req *alertcenterpb.DeleteAlertRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteAlert[0:len((*c.CallOptions).DeleteAlert):len((*c.CallOptions).DeleteAlert)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.client.DeleteAlert(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) UndeleteAlert(ctx context.Context, req *alertcenterpb.UndeleteAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UndeleteAlert[0:len((*c.CallOptions).UndeleteAlert):len((*c.CallOptions).UndeleteAlert)], opts...)
	var resp *alertcenterpb.Alert
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UndeleteAlert(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CreateAlertFeedback(ctx context.Context, req *alertcenterpb.CreateAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.AlertFeedback, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateAlertFeedback[0:len((*c.CallOptions).CreateAlertFeedback):len((*c.CallOptions).CreateAlertFeedback)], opts...)
	var resp *alertcenterpb.AlertFeedback
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateAlertFeedback(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListAlertFeedback(ctx context.Context, req *alertcenterpb.ListAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.ListAlertFeedbackResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListAlertFeedback[0:len((*c.CallOptions).ListAlertFeedback):len((*c.CallOptions).ListAlertFeedback)], opts...)
	var resp *alertcenterpb.ListAlertFeedbackResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ListAlertFeedback(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetAlertMetadata(ctx context.Context, req *alertcenterpb.GetAlertMetadataRequest, opts ...gax.CallOption) (*alertcenterpb.AlertMetadata, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetAlertMetadata[0:len((*c.CallOptions).GetAlertMetadata):len((*c.CallOptions).GetAlertMetadata)], opts...)
	var resp *alertcenterpb.AlertMetadata
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetAlertMetadata(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetSettings(ctx context.Context, req *alertcenterpb.GetSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).GetSettings[0:len((*c.CallOptions).GetSettings):len((*c.CallOptions).GetSettings)], opts...)
	var resp *alertcenterpb.Settings
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetSettings(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) UpdateSettings(ctx context.Context, req *alertcenterpb.UpdateSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).UpdateSettings[0:len((*c.CallOptions).UpdateSettings):len((*c.CallOptions).UpdateSettings)], opts...)
	var resp *alertcenterpb.Settings
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateSettings(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) BatchDeleteAlerts(ctx context.Context, req *alertcenterpb.BatchDeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchDeleteAlertsResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).BatchDeleteAlerts[0:len((*c.CallOptions).BatchDeleteAlerts):len((*c.CallOptions).BatchDeleteAlerts)], opts...)
	var resp *alertcenterpb.BatchDeleteAlertsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchDeleteAlerts(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) BatchUndeleteAlerts(ctx context.Context, req *alertcenterpb.BatchUndeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchUndeleteAlertsResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).BatchUndeleteAlerts[0:len((*c.CallOptions).BatchUndeleteAlerts):len((*c.CallOptions).BatchUndeleteAlerts)], opts...)
	var resp *alertcenterpb.BatchUndeleteAlertsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.BatchUndeleteAlerts(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ListAlerts lists the alerts.
func (c *restClient) ListAlerts(ctx context.Context, req *alertcenterpb.ListAlertsRequest, opts ...gax.CallOption) *AlertIterator {
	it := &AlertIterator{}
	req = proto.Clone(req).(*alertcenterpb.ListAlertsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*alertcenterpb.Alert, string, error) {
		resp := &alertcenterpb.ListAlertsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1beta1/alerts")

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetCustomerId() != "" {
			params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
		}
		if req.GetFilter() != "" {
			params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
		}
		if req.GetOrderBy() != "" {
			params.Add("orderBy", fmt.Sprintf("%v", req.GetOrderBy()))
		}
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetAlerts(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetAlert gets the specified alert. Attempting to get a nonexistent alert returns
// NOT_FOUND error.
func (c *restClient) GetAlert(ctx context.Context, req *alertcenterpb.GetAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetAlert[0:len((*c.CallOptions).GetAlert):len((*c.CallOptions).GetAlert)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.Alert{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteAlert marks the specified alert for deletion. An alert that has been marked for
// deletion is removed from Alert Center after 30 days.
// Marking an alert for deletion has no effect on an alert which has
// already been marked for deletion. Attempting to mark a nonexistent alert
// for deletion results in a NOT_FOUND error.
func (c *restClient) DeleteAlert(ctx context.Context, req *alertcenterpb.DeleteAlertRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// UndeleteAlert restores, or “undeletes”, an alert that was marked for deletion within the
// past 30 days. Attempting to undelete an alert which was marked for deletion
// over 30 days ago (which has been removed from the Alert Center database) or
// a nonexistent alert returns a NOT_FOUND error. Attempting to
// undelete an alert which has not been marked for deletion has no effect.
func (c *restClient) UndeleteAlert(ctx context.Context, req *alertcenterpb.UndeleteAlertRequest, opts ...gax.CallOption) (*alertcenterpb.Alert, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v:undelete", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UndeleteAlert[0:len((*c.CallOptions).UndeleteAlert):len((*c.CallOptions).UndeleteAlert)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.Alert{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CreateAlertFeedback creates new feedback for an alert. Attempting to create a feedback for
// a non-existent alert returns NOT_FOUND error. Attempting to create a
// feedback for an alert that is marked for deletion returns
// `FAILED_PRECONDITION’ error.
func (c *restClient) CreateAlertFeedback(ctx context.Context, req *alertcenterpb.CreateAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.AlertFeedback, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetFeedback()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v/feedback", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateAlertFeedback[0:len((*c.CallOptions).CreateAlertFeedback):len((*c.CallOptions).CreateAlertFeedback)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.AlertFeedback{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListAlertFeedback lists all the feedback for an alert. Attempting to list feedbacks for
// a non-existent alert returns NOT_FOUND error.
func (c *restClient) ListAlertFeedback(ctx context.Context, req *alertcenterpb.ListAlertFeedbackRequest, opts ...gax.CallOption) (*alertcenterpb.ListAlertFeedbackResponse, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v/feedback", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}
	if req.GetFilter() != "" {
		params.Add("filter", fmt.Sprintf("%v", req.GetFilter()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).ListAlertFeedback[0:len((*c.CallOptions).ListAlertFeedback):len((*c.CallOptions).ListAlertFeedback)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.ListAlertFeedbackResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetAlertMetadata returns the metadata of an alert. Attempting to get metadata for
// a non-existent alert returns NOT_FOUND error.
func (c *restClient) GetAlertMetadata(ctx context.Context, req *alertcenterpb.GetAlertMetadataRequest, opts ...gax.CallOption) (*alertcenterpb.AlertMetadata, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts/%v/metadata", req.GetAlertId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "alert_id", url.QueryEscape(req.GetAlertId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetAlertMetadata[0:len((*c.CallOptions).GetAlertMetadata):len((*c.CallOptions).GetAlertMetadata)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.AlertMetadata{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetSettings returns customer-level settings.
func (c *restClient) GetSettings(ctx context.Context, req *alertcenterpb.GetSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/settings")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetSettings[0:len((*c.CallOptions).GetSettings):len((*c.CallOptions).GetSettings)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.Settings{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// UpdateSettings updates the customer-level settings.
func (c *restClient) UpdateSettings(ctx context.Context, req *alertcenterpb.UpdateSettingsRequest, opts ...gax.CallOption) (*alertcenterpb.Settings, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetSettings()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/settings")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetCustomerId() != "" {
		params.Add("customerId", fmt.Sprintf("%v", req.GetCustomerId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateSettings[0:len((*c.CallOptions).UpdateSettings):len((*c.CallOptions).UpdateSettings)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.Settings{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// BatchDeleteAlerts performs batch delete operation on alerts.
func (c *restClient) BatchDeleteAlerts(ctx context.Context, req *alertcenterpb.BatchDeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchDeleteAlertsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts:batchDelete")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).BatchDeleteAlerts[0:len((*c.CallOptions).BatchDeleteAlerts):len((*c.CallOptions).BatchDeleteAlerts)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.BatchDeleteAlertsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// BatchUndeleteAlerts performs batch undelete operation on alerts.
func (c *restClient) BatchUndeleteAlerts(ctx context.Context, req *alertcenterpb.BatchUndeleteAlertsRequest, opts ...gax.CallOption) (*alertcenterpb.BatchUndeleteAlertsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1beta1/alerts:batchUndelete")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).BatchUndeleteAlerts[0:len((*c.CallOptions).BatchUndeleteAlerts):len((*c.CallOptions).BatchUndeleteAlerts)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &alertcenterpb.BatchUndeleteAlertsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
