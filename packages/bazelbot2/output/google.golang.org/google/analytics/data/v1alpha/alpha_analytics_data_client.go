// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package data

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	datapb "google.golang.org/genproto/googleapis/analytics/data/v1alpha"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newAlphaAnalyticsDataClientHook clientHook

// AlphaAnalyticsDataCallOptions contains the retry settings for each method of AlphaAnalyticsDataClient.
type AlphaAnalyticsDataCallOptions struct {
	RunFunnelReport             []gax.CallOption
	CreateAudienceList          []gax.CallOption
	QueryAudienceList           []gax.CallOption
	SheetExportAudienceList     []gax.CallOption
	GetAudienceList             []gax.CallOption
	ListAudienceLists           []gax.CallOption
	CreateRecurringAudienceList []gax.CallOption
	GetRecurringAudienceList    []gax.CallOption
	ListRecurringAudienceLists  []gax.CallOption
	GetPropertyQuotasSnapshot   []gax.CallOption
	CreateReportTask            []gax.CallOption
	QueryReportTask             []gax.CallOption
	GetReportTask               []gax.CallOption
	ListReportTasks             []gax.CallOption
}

func defaultAlphaAnalyticsDataGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("analyticsdata.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("analyticsdata.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("analyticsdata.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://analyticsdata.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultAlphaAnalyticsDataCallOptions() *AlphaAnalyticsDataCallOptions {
	return &AlphaAnalyticsDataCallOptions{
		RunFunnelReport: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		SheetExportAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListAudienceLists: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateRecurringAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetRecurringAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListRecurringAudienceLists: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetPropertyQuotasSnapshot: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		QueryReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListReportTasks: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultAlphaAnalyticsDataRESTCallOptions() *AlphaAnalyticsDataCallOptions {
	return &AlphaAnalyticsDataCallOptions{
		RunFunnelReport: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		QueryAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		SheetExportAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		GetAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		ListAudienceLists: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		CreateRecurringAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		GetRecurringAudienceList: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		ListRecurringAudienceLists: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		GetPropertyQuotasSnapshot: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		CreateReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		QueryReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		GetReportTask: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
		ListReportTasks: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusInternalServerError)
			}),
		},
	}
}

// internalAlphaAnalyticsDataClient is an interface that defines the methods available from Google Analytics Data API.
type internalAlphaAnalyticsDataClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	RunFunnelReport(context.Context, *datapb.RunFunnelReportRequest, ...gax.CallOption) (*datapb.RunFunnelReportResponse, error)
	CreateAudienceList(context.Context, *datapb.CreateAudienceListRequest, ...gax.CallOption) (*CreateAudienceListOperation, error)
	CreateAudienceListOperation(name string) *CreateAudienceListOperation
	QueryAudienceList(context.Context, *datapb.QueryAudienceListRequest, ...gax.CallOption) (*datapb.QueryAudienceListResponse, error)
	SheetExportAudienceList(context.Context, *datapb.SheetExportAudienceListRequest, ...gax.CallOption) (*datapb.SheetExportAudienceListResponse, error)
	GetAudienceList(context.Context, *datapb.GetAudienceListRequest, ...gax.CallOption) (*datapb.AudienceList, error)
	ListAudienceLists(context.Context, *datapb.ListAudienceListsRequest, ...gax.CallOption) *AudienceListIterator
	CreateRecurringAudienceList(context.Context, *datapb.CreateRecurringAudienceListRequest, ...gax.CallOption) (*datapb.RecurringAudienceList, error)
	GetRecurringAudienceList(context.Context, *datapb.GetRecurringAudienceListRequest, ...gax.CallOption) (*datapb.RecurringAudienceList, error)
	ListRecurringAudienceLists(context.Context, *datapb.ListRecurringAudienceListsRequest, ...gax.CallOption) *RecurringAudienceListIterator
	GetPropertyQuotasSnapshot(context.Context, *datapb.GetPropertyQuotasSnapshotRequest, ...gax.CallOption) (*datapb.PropertyQuotasSnapshot, error)
	CreateReportTask(context.Context, *datapb.CreateReportTaskRequest, ...gax.CallOption) (*CreateReportTaskOperation, error)
	CreateReportTaskOperation(name string) *CreateReportTaskOperation
	QueryReportTask(context.Context, *datapb.QueryReportTaskRequest, ...gax.CallOption) (*datapb.QueryReportTaskResponse, error)
	GetReportTask(context.Context, *datapb.GetReportTaskRequest, ...gax.CallOption) (*datapb.ReportTask, error)
	ListReportTasks(context.Context, *datapb.ListReportTasksRequest, ...gax.CallOption) *ReportTaskIterator
}

// AlphaAnalyticsDataClient is a client for interacting with Google Analytics Data API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Google Analytics reporting data service.
type AlphaAnalyticsDataClient struct {
	// The internal transport-dependent client.
	internalClient internalAlphaAnalyticsDataClient

	// The call options for this service.
	CallOptions *AlphaAnalyticsDataCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *AlphaAnalyticsDataClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *AlphaAnalyticsDataClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *AlphaAnalyticsDataClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// RunFunnelReport returns a customized funnel report of your Google Analytics event data. The
// data returned from the API is as a table with columns for the requested
// dimensions and metrics.
//
// Funnel exploration lets you visualize the steps your users take to complete
// a task and quickly see how well they are succeeding or failing at each
// step. For example, how do prospects become shoppers and then become buyers?
// How do one time buyers become repeat buyers? With this information, you can
// improve inefficient or abandoned customer journeys. To learn more, see GA4
// Funnel Explorations (at https://support.google.com/analytics/answer/9327974).
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the Google Analytics Data API Funnel
// Reporting
// Feedback (at https://docs.google.com/forms/d/e/1FAIpQLSdwOlQDJAUoBiIgUZZ3S_Lwi8gr7Bb0k1jhvc-DEg7Rol3UjA/viewform).
func (c *AlphaAnalyticsDataClient) RunFunnelReport(ctx context.Context, req *datapb.RunFunnelReportRequest, opts ...gax.CallOption) (*datapb.RunFunnelReportResponse, error) {
	return c.internalClient.RunFunnelReport(ctx, req, opts...)
}

// CreateAudienceList creates an audience list for later retrieval. This method quickly returns
// the audience list’s resource name and initiates a long running asynchronous
// request to form an audience list. To list the users in an audience list,
// first create the audience list through this method and then send the
// audience resource name to the QueryAudienceList method.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// An audience list is a snapshot of the users currently in the audience at
// the time of audience list creation. Creating audience lists for one
// audience on different days will return different results as users enter and
// exit the audience.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572). Audience lists contain
// the users in each audience.
//
// This method is available at beta stability at
// audienceExports.create (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/create).
// To give your feedback on this API, complete the Google Analytics Audience
// Export API Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) CreateAudienceList(ctx context.Context, req *datapb.CreateAudienceListRequest, opts ...gax.CallOption) (*CreateAudienceListOperation, error) {
	return c.internalClient.CreateAudienceList(ctx, req, opts...)
}

// CreateAudienceListOperation returns a new CreateAudienceListOperation from a given name.
// The name must be that of a previously created CreateAudienceListOperation, possibly from a different process.
func (c *AlphaAnalyticsDataClient) CreateAudienceListOperation(name string) *CreateAudienceListOperation {
	return c.internalClient.CreateAudienceListOperation(name)
}

// QueryAudienceList retrieves an audience list of users. After creating an audience, the users
// are not immediately available for listing. First, a request to
// CreateAudienceList is necessary to create an audience list of users, and
// then second, this method is used to retrieve the users in the audience
// list.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572).
//
// This method is available at beta stability at
// audienceExports.query (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/query).
// To give your feedback on this API, complete the Google Analytics Audience
// Export API Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) QueryAudienceList(ctx context.Context, req *datapb.QueryAudienceListRequest, opts ...gax.CallOption) (*datapb.QueryAudienceListResponse, error) {
	return c.internalClient.QueryAudienceList(ctx, req, opts...)
}

// SheetExportAudienceList exports an audience list of users to a Google Sheet. After creating an
// audience, the users are not immediately available for listing. First, a
// request to CreateAudienceList is necessary to create an audience list of
// users, and then second, this method is used to export those users in the
// audience list to a Google Sheet.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572).
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) SheetExportAudienceList(ctx context.Context, req *datapb.SheetExportAudienceListRequest, opts ...gax.CallOption) (*datapb.SheetExportAudienceListResponse, error) {
	return c.internalClient.SheetExportAudienceList(ctx, req, opts...)
}

// GetAudienceList gets configuration metadata about a specific audience list. This method
// can be used to understand an audience list after it has been created.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// This method is available at beta stability at
// audienceExports.get (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/get).
// To give your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) GetAudienceList(ctx context.Context, req *datapb.GetAudienceListRequest, opts ...gax.CallOption) (*datapb.AudienceList, error) {
	return c.internalClient.GetAudienceList(ctx, req, opts...)
}

// ListAudienceLists lists all audience lists for a property. This method can be used for you to
// find and reuse existing audience lists rather than creating unnecessary new
// audience lists. The same audience can have multiple audience lists that
// represent the list of users that were in an audience on different days.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// This method is available at beta stability at
// audienceExports.list (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/list).
// To give your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) ListAudienceLists(ctx context.Context, req *datapb.ListAudienceListsRequest, opts ...gax.CallOption) *AudienceListIterator {
	return c.internalClient.ListAudienceLists(ctx, req, opts...)
}

// CreateRecurringAudienceList creates a recurring audience list. Recurring audience lists produces new
// audience lists each day. Audience lists are users in an audience at the
// time of the list’s creation.
//
// A recurring audience list ensures that you have audience list based on the
// most recent data available for use each day. If you manually create
// audience list, you don’t know when an audience list based on an additional
// day’s data is available. This recurring audience list automates the
// creation of an audience list when an additional day’s data is available.
// You will consume fewer quota tokens by using recurring audience list versus
// manually creating audience list at various times of day trying to guess
// when an additional day’s data is ready.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) CreateRecurringAudienceList(ctx context.Context, req *datapb.CreateRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	return c.internalClient.CreateRecurringAudienceList(ctx, req, opts...)
}

// GetRecurringAudienceList gets configuration metadata about a specific recurring audience list. This
// method can be used to understand a recurring audience list’s state after it
// has been created. For example, a recurring audience list resource will
// generate audience list instances for each day, and this method can be used
// to get the resource name of the most recent audience list instance.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) GetRecurringAudienceList(ctx context.Context, req *datapb.GetRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	return c.internalClient.GetRecurringAudienceList(ctx, req, opts...)
}

// ListRecurringAudienceLists lists all recurring audience lists for a property. This method can be used
// for you to find and reuse existing recurring audience lists rather than
// creating unnecessary new recurring audience lists. The same audience can
// have multiple recurring audience lists that represent different dimension
// combinations; for example, just the dimension deviceId or both the
// dimensions deviceId and userId.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *AlphaAnalyticsDataClient) ListRecurringAudienceLists(ctx context.Context, req *datapb.ListRecurringAudienceListsRequest, opts ...gax.CallOption) *RecurringAudienceListIterator {
	return c.internalClient.ListRecurringAudienceLists(ctx, req, opts...)
}

// GetPropertyQuotasSnapshot get all property quotas organized by quota category for a given property.
// This will charge 1 property quota from the category with the most quota.
func (c *AlphaAnalyticsDataClient) GetPropertyQuotasSnapshot(ctx context.Context, req *datapb.GetPropertyQuotasSnapshotRequest, opts ...gax.CallOption) (*datapb.PropertyQuotasSnapshot, error) {
	return c.internalClient.GetPropertyQuotasSnapshot(ctx, req, opts...)
}

// CreateReportTask initiates the creation of a report task. This method quickly
// returns a report task and initiates a long running
// asynchronous request to form a customized report of your Google Analytics
// event data.
//
// A report task will be retained and available for querying for 72 hours
// after it has been created.
//
// A report task created by one user can be listed and queried by all users
// who have access to the property.
func (c *AlphaAnalyticsDataClient) CreateReportTask(ctx context.Context, req *datapb.CreateReportTaskRequest, opts ...gax.CallOption) (*CreateReportTaskOperation, error) {
	return c.internalClient.CreateReportTask(ctx, req, opts...)
}

// CreateReportTaskOperation returns a new CreateReportTaskOperation from a given name.
// The name must be that of a previously created CreateReportTaskOperation, possibly from a different process.
func (c *AlphaAnalyticsDataClient) CreateReportTaskOperation(name string) *CreateReportTaskOperation {
	return c.internalClient.CreateReportTaskOperation(name)
}

// QueryReportTask retrieves a report task’s content. After requesting the CreateReportTask,
// you are able to retrieve the report content once the report is
// ACTIVE. This method will return an error if the report task’s state is not
// ACTIVE. A query response will return the tabular row & column values of
// the report.
func (c *AlphaAnalyticsDataClient) QueryReportTask(ctx context.Context, req *datapb.QueryReportTaskRequest, opts ...gax.CallOption) (*datapb.QueryReportTaskResponse, error) {
	return c.internalClient.QueryReportTask(ctx, req, opts...)
}

// GetReportTask gets report metadata about a specific report task. After creating a report
// task, use this method to check its processing state or inspect its
// report definition.
func (c *AlphaAnalyticsDataClient) GetReportTask(ctx context.Context, req *datapb.GetReportTaskRequest, opts ...gax.CallOption) (*datapb.ReportTask, error) {
	return c.internalClient.GetReportTask(ctx, req, opts...)
}

// ListReportTasks lists all report tasks for a property.
func (c *AlphaAnalyticsDataClient) ListReportTasks(ctx context.Context, req *datapb.ListReportTasksRequest, opts ...gax.CallOption) *ReportTaskIterator {
	return c.internalClient.ListReportTasks(ctx, req, opts...)
}

// alphaAnalyticsDataGRPCClient is a client for interacting with Google Analytics Data API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type alphaAnalyticsDataGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing AlphaAnalyticsDataClient
	CallOptions **AlphaAnalyticsDataCallOptions

	// The gRPC API client.
	alphaAnalyticsDataClient datapb.AlphaAnalyticsDataClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewAlphaAnalyticsDataClient creates a new alpha analytics data client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Google Analytics reporting data service.
func NewAlphaAnalyticsDataClient(ctx context.Context, opts ...option.ClientOption) (*AlphaAnalyticsDataClient, error) {
	clientOpts := defaultAlphaAnalyticsDataGRPCClientOptions()
	if newAlphaAnalyticsDataClientHook != nil {
		hookOpts, err := newAlphaAnalyticsDataClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := AlphaAnalyticsDataClient{CallOptions: defaultAlphaAnalyticsDataCallOptions()}

	c := &alphaAnalyticsDataGRPCClient{
		connPool:                 connPool,
		alphaAnalyticsDataClient: datapb.NewAlphaAnalyticsDataClient(connPool),
		CallOptions:              &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *alphaAnalyticsDataGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *alphaAnalyticsDataGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *alphaAnalyticsDataGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type alphaAnalyticsDataRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing AlphaAnalyticsDataClient
	CallOptions **AlphaAnalyticsDataCallOptions
}

// NewAlphaAnalyticsDataRESTClient creates a new alpha analytics data rest client.
//
// Google Analytics reporting data service.
func NewAlphaAnalyticsDataRESTClient(ctx context.Context, opts ...option.ClientOption) (*AlphaAnalyticsDataClient, error) {
	clientOpts := append(defaultAlphaAnalyticsDataRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultAlphaAnalyticsDataRESTCallOptions()
	c := &alphaAnalyticsDataRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	lroOpts := []option.ClientOption{
		option.WithHTTPClient(httpClient),
		option.WithEndpoint(endpoint),
	}
	opClient, err := lroauto.NewOperationsRESTClient(ctx, lroOpts...)
	if err != nil {
		return nil, err
	}
	c.LROClient = &opClient

	return &AlphaAnalyticsDataClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultAlphaAnalyticsDataRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://analyticsdata.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://analyticsdata.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://analyticsdata.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://analyticsdata.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *alphaAnalyticsDataRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *alphaAnalyticsDataRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *alphaAnalyticsDataRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *alphaAnalyticsDataGRPCClient) RunFunnelReport(ctx context.Context, req *datapb.RunFunnelReportRequest, opts ...gax.CallOption) (*datapb.RunFunnelReportResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "property", url.QueryEscape(req.GetProperty()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).RunFunnelReport[0:len((*c.CallOptions).RunFunnelReport):len((*c.CallOptions).RunFunnelReport)], opts...)
	var resp *datapb.RunFunnelReportResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.RunFunnelReport(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) CreateAudienceList(ctx context.Context, req *datapb.CreateAudienceListRequest, opts ...gax.CallOption) (*CreateAudienceListOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateAudienceList[0:len((*c.CallOptions).CreateAudienceList):len((*c.CallOptions).CreateAudienceList)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.CreateAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateAudienceListOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *alphaAnalyticsDataGRPCClient) QueryAudienceList(ctx context.Context, req *datapb.QueryAudienceListRequest, opts ...gax.CallOption) (*datapb.QueryAudienceListResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryAudienceList[0:len((*c.CallOptions).QueryAudienceList):len((*c.CallOptions).QueryAudienceList)], opts...)
	var resp *datapb.QueryAudienceListResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.QueryAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) SheetExportAudienceList(ctx context.Context, req *datapb.SheetExportAudienceListRequest, opts ...gax.CallOption) (*datapb.SheetExportAudienceListResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SheetExportAudienceList[0:len((*c.CallOptions).SheetExportAudienceList):len((*c.CallOptions).SheetExportAudienceList)], opts...)
	var resp *datapb.SheetExportAudienceListResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.SheetExportAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) GetAudienceList(ctx context.Context, req *datapb.GetAudienceListRequest, opts ...gax.CallOption) (*datapb.AudienceList, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetAudienceList[0:len((*c.CallOptions).GetAudienceList):len((*c.CallOptions).GetAudienceList)], opts...)
	var resp *datapb.AudienceList
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.GetAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) ListAudienceLists(ctx context.Context, req *datapb.ListAudienceListsRequest, opts ...gax.CallOption) *AudienceListIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListAudienceLists[0:len((*c.CallOptions).ListAudienceLists):len((*c.CallOptions).ListAudienceLists)], opts...)
	it := &AudienceListIterator{}
	req = proto.Clone(req).(*datapb.ListAudienceListsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.AudienceList, string, error) {
		resp := &datapb.ListAudienceListsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.alphaAnalyticsDataClient.ListAudienceLists(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetAudienceLists(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *alphaAnalyticsDataGRPCClient) CreateRecurringAudienceList(ctx context.Context, req *datapb.CreateRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateRecurringAudienceList[0:len((*c.CallOptions).CreateRecurringAudienceList):len((*c.CallOptions).CreateRecurringAudienceList)], opts...)
	var resp *datapb.RecurringAudienceList
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.CreateRecurringAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) GetRecurringAudienceList(ctx context.Context, req *datapb.GetRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetRecurringAudienceList[0:len((*c.CallOptions).GetRecurringAudienceList):len((*c.CallOptions).GetRecurringAudienceList)], opts...)
	var resp *datapb.RecurringAudienceList
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.GetRecurringAudienceList(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) ListRecurringAudienceLists(ctx context.Context, req *datapb.ListRecurringAudienceListsRequest, opts ...gax.CallOption) *RecurringAudienceListIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRecurringAudienceLists[0:len((*c.CallOptions).ListRecurringAudienceLists):len((*c.CallOptions).ListRecurringAudienceLists)], opts...)
	it := &RecurringAudienceListIterator{}
	req = proto.Clone(req).(*datapb.ListRecurringAudienceListsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.RecurringAudienceList, string, error) {
		resp := &datapb.ListRecurringAudienceListsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.alphaAnalyticsDataClient.ListRecurringAudienceLists(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRecurringAudienceLists(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *alphaAnalyticsDataGRPCClient) GetPropertyQuotasSnapshot(ctx context.Context, req *datapb.GetPropertyQuotasSnapshotRequest, opts ...gax.CallOption) (*datapb.PropertyQuotasSnapshot, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetPropertyQuotasSnapshot[0:len((*c.CallOptions).GetPropertyQuotasSnapshot):len((*c.CallOptions).GetPropertyQuotasSnapshot)], opts...)
	var resp *datapb.PropertyQuotasSnapshot
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.GetPropertyQuotasSnapshot(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) CreateReportTask(ctx context.Context, req *datapb.CreateReportTaskRequest, opts ...gax.CallOption) (*CreateReportTaskOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateReportTask[0:len((*c.CallOptions).CreateReportTask):len((*c.CallOptions).CreateReportTask)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.CreateReportTask(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateReportTaskOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *alphaAnalyticsDataGRPCClient) QueryReportTask(ctx context.Context, req *datapb.QueryReportTaskRequest, opts ...gax.CallOption) (*datapb.QueryReportTaskResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryReportTask[0:len((*c.CallOptions).QueryReportTask):len((*c.CallOptions).QueryReportTask)], opts...)
	var resp *datapb.QueryReportTaskResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.QueryReportTask(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) GetReportTask(ctx context.Context, req *datapb.GetReportTaskRequest, opts ...gax.CallOption) (*datapb.ReportTask, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetReportTask[0:len((*c.CallOptions).GetReportTask):len((*c.CallOptions).GetReportTask)], opts...)
	var resp *datapb.ReportTask
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.alphaAnalyticsDataClient.GetReportTask(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *alphaAnalyticsDataGRPCClient) ListReportTasks(ctx context.Context, req *datapb.ListReportTasksRequest, opts ...gax.CallOption) *ReportTaskIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListReportTasks[0:len((*c.CallOptions).ListReportTasks):len((*c.CallOptions).ListReportTasks)], opts...)
	it := &ReportTaskIterator{}
	req = proto.Clone(req).(*datapb.ListReportTasksRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.ReportTask, string, error) {
		resp := &datapb.ListReportTasksResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.alphaAnalyticsDataClient.ListReportTasks(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetReportTasks(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// RunFunnelReport returns a customized funnel report of your Google Analytics event data. The
// data returned from the API is as a table with columns for the requested
// dimensions and metrics.
//
// Funnel exploration lets you visualize the steps your users take to complete
// a task and quickly see how well they are succeeding or failing at each
// step. For example, how do prospects become shoppers and then become buyers?
// How do one time buyers become repeat buyers? With this information, you can
// improve inefficient or abandoned customer journeys. To learn more, see GA4
// Funnel Explorations (at https://support.google.com/analytics/answer/9327974).
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the Google Analytics Data API Funnel
// Reporting
// Feedback (at https://docs.google.com/forms/d/e/1FAIpQLSdwOlQDJAUoBiIgUZZ3S_Lwi8gr7Bb0k1jhvc-DEg7Rol3UjA/viewform).
func (c *alphaAnalyticsDataRESTClient) RunFunnelReport(ctx context.Context, req *datapb.RunFunnelReportRequest, opts ...gax.CallOption) (*datapb.RunFunnelReportResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v:runFunnelReport", req.GetProperty())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "property", url.QueryEscape(req.GetProperty()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RunFunnelReport[0:len((*c.CallOptions).RunFunnelReport):len((*c.CallOptions).RunFunnelReport)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.RunFunnelReportResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CreateAudienceList creates an audience list for later retrieval. This method quickly returns
// the audience list’s resource name and initiates a long running asynchronous
// request to form an audience list. To list the users in an audience list,
// first create the audience list through this method and then send the
// audience resource name to the QueryAudienceList method.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// An audience list is a snapshot of the users currently in the audience at
// the time of audience list creation. Creating audience lists for one
// audience on different days will return different results as users enter and
// exit the audience.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572). Audience lists contain
// the users in each audience.
//
// This method is available at beta stability at
// audienceExports.create (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/create).
// To give your feedback on this API, complete the Google Analytics Audience
// Export API Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) CreateAudienceList(ctx context.Context, req *datapb.CreateAudienceListRequest, opts ...gax.CallOption) (*CreateAudienceListOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetAudienceList()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v/audienceLists", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1alpha/%s", resp.GetName())
	return &CreateAudienceListOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// QueryAudienceList retrieves an audience list of users. After creating an audience, the users
// are not immediately available for listing. First, a request to
// CreateAudienceList is necessary to create an audience list of users, and
// then second, this method is used to retrieve the users in the audience
// list.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572).
//
// This method is available at beta stability at
// audienceExports.query (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/query).
// To give your feedback on this API, complete the Google Analytics Audience
// Export API Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) QueryAudienceList(ctx context.Context, req *datapb.QueryAudienceListRequest, opts ...gax.CallOption) (*datapb.QueryAudienceListResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v:query", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryAudienceList[0:len((*c.CallOptions).QueryAudienceList):len((*c.CallOptions).QueryAudienceList)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.QueryAudienceListResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// SheetExportAudienceList exports an audience list of users to a Google Sheet. After creating an
// audience, the users are not immediately available for listing. First, a
// request to CreateAudienceList is necessary to create an audience list of
// users, and then second, this method is used to export those users in the
// audience list to a Google Sheet.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// Audiences in Google Analytics 4 allow you to segment your users in the ways
// that are important to your business. To learn more, see
// https://support.google.com/analytics/answer/9267572 (at https://support.google.com/analytics/answer/9267572).
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) SheetExportAudienceList(ctx context.Context, req *datapb.SheetExportAudienceListRequest, opts ...gax.CallOption) (*datapb.SheetExportAudienceListResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v:exportSheet", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).SheetExportAudienceList[0:len((*c.CallOptions).SheetExportAudienceList):len((*c.CallOptions).SheetExportAudienceList)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.SheetExportAudienceListResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetAudienceList gets configuration metadata about a specific audience list. This method
// can be used to understand an audience list after it has been created.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// This method is available at beta stability at
// audienceExports.get (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/get).
// To give your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) GetAudienceList(ctx context.Context, req *datapb.GetAudienceListRequest, opts ...gax.CallOption) (*datapb.AudienceList, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetAudienceList[0:len((*c.CallOptions).GetAudienceList):len((*c.CallOptions).GetAudienceList)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.AudienceList{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListAudienceLists lists all audience lists for a property. This method can be used for you to
// find and reuse existing audience lists rather than creating unnecessary new
// audience lists. The same audience can have multiple audience lists that
// represent the list of users that were in an audience on different days.
//
// See Creating an Audience
// List (at https://developers.google.com/analytics/devguides/reporting/data/v1/audience-list-basics)
// for an introduction to Audience Lists with examples.
//
// This method is available at beta stability at
// audienceExports.list (at https://developers.google.com/analytics/devguides/reporting/data/v1/rest/v1beta/properties.audienceExports/list).
// To give your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) ListAudienceLists(ctx context.Context, req *datapb.ListAudienceListsRequest, opts ...gax.CallOption) *AudienceListIterator {
	it := &AudienceListIterator{}
	req = proto.Clone(req).(*datapb.ListAudienceListsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.AudienceList, string, error) {
		resp := &datapb.ListAudienceListsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha/%v/audienceLists", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetAudienceLists(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateRecurringAudienceList creates a recurring audience list. Recurring audience lists produces new
// audience lists each day. Audience lists are users in an audience at the
// time of the list’s creation.
//
// A recurring audience list ensures that you have audience list based on the
// most recent data available for use each day. If you manually create
// audience list, you don’t know when an audience list based on an additional
// day’s data is available. This recurring audience list automates the
// creation of an audience list when an additional day’s data is available.
// You will consume fewer quota tokens by using recurring audience list versus
// manually creating audience list at various times of day trying to guess
// when an additional day’s data is ready.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) CreateRecurringAudienceList(ctx context.Context, req *datapb.CreateRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetRecurringAudienceList()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v/recurringAudienceLists", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateRecurringAudienceList[0:len((*c.CallOptions).CreateRecurringAudienceList):len((*c.CallOptions).CreateRecurringAudienceList)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.RecurringAudienceList{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetRecurringAudienceList gets configuration metadata about a specific recurring audience list. This
// method can be used to understand a recurring audience list’s state after it
// has been created. For example, a recurring audience list resource will
// generate audience list instances for each day, and this method can be used
// to get the resource name of the most recent audience list instance.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) GetRecurringAudienceList(ctx context.Context, req *datapb.GetRecurringAudienceListRequest, opts ...gax.CallOption) (*datapb.RecurringAudienceList, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetRecurringAudienceList[0:len((*c.CallOptions).GetRecurringAudienceList):len((*c.CallOptions).GetRecurringAudienceList)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.RecurringAudienceList{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListRecurringAudienceLists lists all recurring audience lists for a property. This method can be used
// for you to find and reuse existing recurring audience lists rather than
// creating unnecessary new recurring audience lists. The same audience can
// have multiple recurring audience lists that represent different dimension
// combinations; for example, just the dimension deviceId or both the
// dimensions deviceId and userId.
//
// This method is introduced at alpha stability with the intention of
// gathering feedback on syntax and capabilities before entering beta. To give
// your feedback on this API, complete the
// Google Analytics Audience Export API
// Feedback (at https://forms.gle/EeA5u5LW6PEggtCEA) form.
func (c *alphaAnalyticsDataRESTClient) ListRecurringAudienceLists(ctx context.Context, req *datapb.ListRecurringAudienceListsRequest, opts ...gax.CallOption) *RecurringAudienceListIterator {
	it := &RecurringAudienceListIterator{}
	req = proto.Clone(req).(*datapb.ListRecurringAudienceListsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.RecurringAudienceList, string, error) {
		resp := &datapb.ListRecurringAudienceListsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha/%v/recurringAudienceLists", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetRecurringAudienceLists(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetPropertyQuotasSnapshot get all property quotas organized by quota category for a given property.
// This will charge 1 property quota from the category with the most quota.
func (c *alphaAnalyticsDataRESTClient) GetPropertyQuotasSnapshot(ctx context.Context, req *datapb.GetPropertyQuotasSnapshotRequest, opts ...gax.CallOption) (*datapb.PropertyQuotasSnapshot, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetPropertyQuotasSnapshot[0:len((*c.CallOptions).GetPropertyQuotasSnapshot):len((*c.CallOptions).GetPropertyQuotasSnapshot)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.PropertyQuotasSnapshot{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CreateReportTask initiates the creation of a report task. This method quickly
// returns a report task and initiates a long running
// asynchronous request to form a customized report of your Google Analytics
// event data.
//
// A report task will be retained and available for querying for 72 hours
// after it has been created.
//
// A report task created by one user can be listed and queried by all users
// who have access to the property.
func (c *alphaAnalyticsDataRESTClient) CreateReportTask(ctx context.Context, req *datapb.CreateReportTaskRequest, opts ...gax.CallOption) (*CreateReportTaskOperation, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetReportTask()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v/reportTasks", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}

	override := fmt.Sprintf("/v1alpha/%s", resp.GetName())
	return &CreateReportTaskOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, resp),
		pollPath: override,
	}, nil
}

// QueryReportTask retrieves a report task’s content. After requesting the CreateReportTask,
// you are able to retrieve the report content once the report is
// ACTIVE. This method will return an error if the report task’s state is not
// ACTIVE. A query response will return the tabular row & column values of
// the report.
func (c *alphaAnalyticsDataRESTClient) QueryReportTask(ctx context.Context, req *datapb.QueryReportTaskRequest, opts ...gax.CallOption) (*datapb.QueryReportTaskResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v:query", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryReportTask[0:len((*c.CallOptions).QueryReportTask):len((*c.CallOptions).QueryReportTask)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.QueryReportTaskResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetReportTask gets report metadata about a specific report task. After creating a report
// task, use this method to check its processing state or inspect its
// report definition.
func (c *alphaAnalyticsDataRESTClient) GetReportTask(ctx context.Context, req *datapb.GetReportTaskRequest, opts ...gax.CallOption) (*datapb.ReportTask, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetReportTask[0:len((*c.CallOptions).GetReportTask):len((*c.CallOptions).GetReportTask)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &datapb.ReportTask{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListReportTasks lists all report tasks for a property.
func (c *alphaAnalyticsDataRESTClient) ListReportTasks(ctx context.Context, req *datapb.ListReportTasksRequest, opts ...gax.CallOption) *ReportTaskIterator {
	it := &ReportTaskIterator{}
	req = proto.Clone(req).(*datapb.ListReportTasksRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*datapb.ReportTask, string, error) {
		resp := &datapb.ListReportTasksResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha/%v/reportTasks", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetReportTasks(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateAudienceListOperation returns a new CreateAudienceListOperation from a given name.
// The name must be that of a previously created CreateAudienceListOperation, possibly from a different process.
func (c *alphaAnalyticsDataGRPCClient) CreateAudienceListOperation(name string) *CreateAudienceListOperation {
	return &CreateAudienceListOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateAudienceListOperation returns a new CreateAudienceListOperation from a given name.
// The name must be that of a previously created CreateAudienceListOperation, possibly from a different process.
func (c *alphaAnalyticsDataRESTClient) CreateAudienceListOperation(name string) *CreateAudienceListOperation {
	override := fmt.Sprintf("/v1alpha/%s", name)
	return &CreateAudienceListOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}

// CreateReportTaskOperation returns a new CreateReportTaskOperation from a given name.
// The name must be that of a previously created CreateReportTaskOperation, possibly from a different process.
func (c *alphaAnalyticsDataGRPCClient) CreateReportTaskOperation(name string) *CreateReportTaskOperation {
	return &CreateReportTaskOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateReportTaskOperation returns a new CreateReportTaskOperation from a given name.
// The name must be that of a previously created CreateReportTaskOperation, possibly from a different process.
func (c *alphaAnalyticsDataRESTClient) CreateReportTaskOperation(name string) *CreateReportTaskOperation {
	override := fmt.Sprintf("/v1alpha/%s", name)
	return &CreateReportTaskOperation{
		lro:      longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
		pollPath: override,
	}
}
