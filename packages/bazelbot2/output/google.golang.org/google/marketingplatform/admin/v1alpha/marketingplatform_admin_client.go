// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package admin

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	adminpb "google.golang.org/genproto/googleapis/marketingplatform/admin/v1alpha"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newMarketingplatformAdminClientHook clientHook

// MarketingplatformAdminCallOptions contains the retry settings for each method of MarketingplatformAdminClient.
type MarketingplatformAdminCallOptions struct {
	GetOrganization            []gax.CallOption
	ListAnalyticsAccountLinks  []gax.CallOption
	CreateAnalyticsAccountLink []gax.CallOption
	DeleteAnalyticsAccountLink []gax.CallOption
	SetPropertyServiceLevel    []gax.CallOption
}

func defaultMarketingplatformAdminGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("marketingplatformadmin.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("marketingplatformadmin.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("marketingplatformadmin.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://marketingplatformadmin.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultMarketingplatformAdminCallOptions() *MarketingplatformAdminCallOptions {
	return &MarketingplatformAdminCallOptions{
		GetOrganization: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListAnalyticsAccountLinks: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateAnalyticsAccountLink: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		DeleteAnalyticsAccountLink: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		SetPropertyServiceLevel: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.Unknown,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultMarketingplatformAdminRESTCallOptions() *MarketingplatformAdminCallOptions {
	return &MarketingplatformAdminCallOptions{
		GetOrganization: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusInternalServerError)
			}),
		},
		ListAnalyticsAccountLinks: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusInternalServerError)
			}),
		},
		CreateAnalyticsAccountLink: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusInternalServerError)
			}),
		},
		DeleteAnalyticsAccountLink: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusInternalServerError)
			}),
		},
		SetPropertyServiceLevel: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusInternalServerError)
			}),
		},
	}
}

// internalMarketingplatformAdminClient is an interface that defines the methods available from Google Marketing Platform Admin API.
type internalMarketingplatformAdminClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetOrganization(context.Context, *adminpb.GetOrganizationRequest, ...gax.CallOption) (*adminpb.Organization, error)
	ListAnalyticsAccountLinks(context.Context, *adminpb.ListAnalyticsAccountLinksRequest, ...gax.CallOption) *AnalyticsAccountLinkIterator
	CreateAnalyticsAccountLink(context.Context, *adminpb.CreateAnalyticsAccountLinkRequest, ...gax.CallOption) (*adminpb.AnalyticsAccountLink, error)
	DeleteAnalyticsAccountLink(context.Context, *adminpb.DeleteAnalyticsAccountLinkRequest, ...gax.CallOption) error
	SetPropertyServiceLevel(context.Context, *adminpb.SetPropertyServiceLevelRequest, ...gax.CallOption) (*adminpb.SetPropertyServiceLevelResponse, error)
}

// MarketingplatformAdminClient is a client for interacting with Google Marketing Platform Admin API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service Interface for the Google Marketing Platform Admin API.
type MarketingplatformAdminClient struct {
	// The internal transport-dependent client.
	internalClient internalMarketingplatformAdminClient

	// The call options for this service.
	CallOptions *MarketingplatformAdminCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *MarketingplatformAdminClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *MarketingplatformAdminClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *MarketingplatformAdminClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetOrganization lookup for a single organization.
func (c *MarketingplatformAdminClient) GetOrganization(ctx context.Context, req *adminpb.GetOrganizationRequest, opts ...gax.CallOption) (*adminpb.Organization, error) {
	return c.internalClient.GetOrganization(ctx, req, opts...)
}

// ListAnalyticsAccountLinks lists the Google Analytics accounts link to the specified Google Marketing
// Platform organization.
func (c *MarketingplatformAdminClient) ListAnalyticsAccountLinks(ctx context.Context, req *adminpb.ListAnalyticsAccountLinksRequest, opts ...gax.CallOption) *AnalyticsAccountLinkIterator {
	return c.internalClient.ListAnalyticsAccountLinks(ctx, req, opts...)
}

// CreateAnalyticsAccountLink creates the link between the Analytics account and the Google Marketing
// Platform organization.
//
// User needs to be an org user, and admin on the Analytics account to create
// the link. If the account is already linked to an organization, user needs
// to unlink the account from the current organization, then try link again.
func (c *MarketingplatformAdminClient) CreateAnalyticsAccountLink(ctx context.Context, req *adminpb.CreateAnalyticsAccountLinkRequest, opts ...gax.CallOption) (*adminpb.AnalyticsAccountLink, error) {
	return c.internalClient.CreateAnalyticsAccountLink(ctx, req, opts...)
}

// DeleteAnalyticsAccountLink deletes the AnalyticsAccountLink, which detaches the Analytics account from
// the Google Marketing Platform organization.
//
// User needs to be an org user, and admin on the Analytics account in order
// to delete the link.
func (c *MarketingplatformAdminClient) DeleteAnalyticsAccountLink(ctx context.Context, req *adminpb.DeleteAnalyticsAccountLinkRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteAnalyticsAccountLink(ctx, req, opts...)
}

// SetPropertyServiceLevel updates the service level for an Analytics property.
func (c *MarketingplatformAdminClient) SetPropertyServiceLevel(ctx context.Context, req *adminpb.SetPropertyServiceLevelRequest, opts ...gax.CallOption) (*adminpb.SetPropertyServiceLevelResponse, error) {
	return c.internalClient.SetPropertyServiceLevel(ctx, req, opts...)
}

// marketingplatformAdminGRPCClient is a client for interacting with Google Marketing Platform Admin API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type marketingplatformAdminGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing MarketingplatformAdminClient
	CallOptions **MarketingplatformAdminCallOptions

	// The gRPC API client.
	marketingplatformAdminClient adminpb.MarketingplatformAdminServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewMarketingplatformAdminClient creates a new marketingplatform admin service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service Interface for the Google Marketing Platform Admin API.
func NewMarketingplatformAdminClient(ctx context.Context, opts ...option.ClientOption) (*MarketingplatformAdminClient, error) {
	clientOpts := defaultMarketingplatformAdminGRPCClientOptions()
	if newMarketingplatformAdminClientHook != nil {
		hookOpts, err := newMarketingplatformAdminClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := MarketingplatformAdminClient{CallOptions: defaultMarketingplatformAdminCallOptions()}

	c := &marketingplatformAdminGRPCClient{
		connPool:                     connPool,
		marketingplatformAdminClient: adminpb.NewMarketingplatformAdminServiceClient(connPool),
		CallOptions:                  &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *marketingplatformAdminGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *marketingplatformAdminGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *marketingplatformAdminGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type marketingplatformAdminRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing MarketingplatformAdminClient
	CallOptions **MarketingplatformAdminCallOptions
}

// NewMarketingplatformAdminRESTClient creates a new marketingplatform admin service rest client.
//
// Service Interface for the Google Marketing Platform Admin API.
func NewMarketingplatformAdminRESTClient(ctx context.Context, opts ...option.ClientOption) (*MarketingplatformAdminClient, error) {
	clientOpts := append(defaultMarketingplatformAdminRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultMarketingplatformAdminRESTCallOptions()
	c := &marketingplatformAdminRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &MarketingplatformAdminClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultMarketingplatformAdminRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://marketingplatformadmin.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://marketingplatformadmin.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://marketingplatformadmin.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://marketingplatformadmin.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *marketingplatformAdminRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *marketingplatformAdminRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *marketingplatformAdminRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *marketingplatformAdminGRPCClient) GetOrganization(ctx context.Context, req *adminpb.GetOrganizationRequest, opts ...gax.CallOption) (*adminpb.Organization, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOrganization[0:len((*c.CallOptions).GetOrganization):len((*c.CallOptions).GetOrganization)], opts...)
	var resp *adminpb.Organization
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.marketingplatformAdminClient.GetOrganization(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *marketingplatformAdminGRPCClient) ListAnalyticsAccountLinks(ctx context.Context, req *adminpb.ListAnalyticsAccountLinksRequest, opts ...gax.CallOption) *AnalyticsAccountLinkIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListAnalyticsAccountLinks[0:len((*c.CallOptions).ListAnalyticsAccountLinks):len((*c.CallOptions).ListAnalyticsAccountLinks)], opts...)
	it := &AnalyticsAccountLinkIterator{}
	req = proto.Clone(req).(*adminpb.ListAnalyticsAccountLinksRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*adminpb.AnalyticsAccountLink, string, error) {
		resp := &adminpb.ListAnalyticsAccountLinksResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.marketingplatformAdminClient.ListAnalyticsAccountLinks(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetAnalyticsAccountLinks(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *marketingplatformAdminGRPCClient) CreateAnalyticsAccountLink(ctx context.Context, req *adminpb.CreateAnalyticsAccountLinkRequest, opts ...gax.CallOption) (*adminpb.AnalyticsAccountLink, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateAnalyticsAccountLink[0:len((*c.CallOptions).CreateAnalyticsAccountLink):len((*c.CallOptions).CreateAnalyticsAccountLink)], opts...)
	var resp *adminpb.AnalyticsAccountLink
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.marketingplatformAdminClient.CreateAnalyticsAccountLink(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *marketingplatformAdminGRPCClient) DeleteAnalyticsAccountLink(ctx context.Context, req *adminpb.DeleteAnalyticsAccountLinkRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteAnalyticsAccountLink[0:len((*c.CallOptions).DeleteAnalyticsAccountLink):len((*c.CallOptions).DeleteAnalyticsAccountLink)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.marketingplatformAdminClient.DeleteAnalyticsAccountLink(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *marketingplatformAdminGRPCClient) SetPropertyServiceLevel(ctx context.Context, req *adminpb.SetPropertyServiceLevelRequest, opts ...gax.CallOption) (*adminpb.SetPropertyServiceLevelResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "analytics_account_link", url.QueryEscape(req.GetAnalyticsAccountLink()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SetPropertyServiceLevel[0:len((*c.CallOptions).SetPropertyServiceLevel):len((*c.CallOptions).SetPropertyServiceLevel)], opts...)
	var resp *adminpb.SetPropertyServiceLevelResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.marketingplatformAdminClient.SetPropertyServiceLevel(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GetOrganization lookup for a single organization.
func (c *marketingplatformAdminRESTClient) GetOrganization(ctx context.Context, req *adminpb.GetOrganizationRequest, opts ...gax.CallOption) (*adminpb.Organization, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOrganization[0:len((*c.CallOptions).GetOrganization):len((*c.CallOptions).GetOrganization)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &adminpb.Organization{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ListAnalyticsAccountLinks lists the Google Analytics accounts link to the specified Google Marketing
// Platform organization.
func (c *marketingplatformAdminRESTClient) ListAnalyticsAccountLinks(ctx context.Context, req *adminpb.ListAnalyticsAccountLinksRequest, opts ...gax.CallOption) *AnalyticsAccountLinkIterator {
	it := &AnalyticsAccountLinkIterator{}
	req = proto.Clone(req).(*adminpb.ListAnalyticsAccountLinksRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*adminpb.AnalyticsAccountLink, string, error) {
		resp := &adminpb.ListAnalyticsAccountLinksResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1alpha/%v/analyticsAccountLinks", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetAnalyticsAccountLinks(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateAnalyticsAccountLink creates the link between the Analytics account and the Google Marketing
// Platform organization.
//
// User needs to be an org user, and admin on the Analytics account to create
// the link. If the account is already linked to an organization, user needs
// to unlink the account from the current organization, then try link again.
func (c *marketingplatformAdminRESTClient) CreateAnalyticsAccountLink(ctx context.Context, req *adminpb.CreateAnalyticsAccountLinkRequest, opts ...gax.CallOption) (*adminpb.AnalyticsAccountLink, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetAnalyticsAccountLink()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v/analyticsAccountLinks", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateAnalyticsAccountLink[0:len((*c.CallOptions).CreateAnalyticsAccountLink):len((*c.CallOptions).CreateAnalyticsAccountLink)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &adminpb.AnalyticsAccountLink{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteAnalyticsAccountLink deletes the AnalyticsAccountLink, which detaches the Analytics account from
// the Google Marketing Platform organization.
//
// User needs to be an org user, and admin on the Analytics account in order
// to delete the link.
func (c *marketingplatformAdminRESTClient) DeleteAnalyticsAccountLink(ctx context.Context, req *adminpb.DeleteAnalyticsAccountLinkRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// SetPropertyServiceLevel updates the service level for an Analytics property.
func (c *marketingplatformAdminRESTClient) SetPropertyServiceLevel(ctx context.Context, req *adminpb.SetPropertyServiceLevelRequest, opts ...gax.CallOption) (*adminpb.SetPropertyServiceLevelResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1alpha/%v:setPropertyServiceLevel", req.GetAnalyticsAccountLink())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "analytics_account_link", url.QueryEscape(req.GetAnalyticsAccountLink()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).SetPropertyServiceLevel[0:len((*c.CallOptions).SetPropertyServiceLevel):len((*c.CallOptions).SetPropertyServiceLevel)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &adminpb.SetPropertyServiceLevelResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
