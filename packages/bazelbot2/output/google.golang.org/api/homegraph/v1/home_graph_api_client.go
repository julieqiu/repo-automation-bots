// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	graphpb "google.golang.org/genproto/googleapis/home/graph/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
)

var newHomeGraphApiClientHook clientHook

// HomeGraphApiCallOptions contains the retry settings for each method of HomeGraphApiClient.
type HomeGraphApiCallOptions struct {
	RequestSyncDevices         []gax.CallOption
	ReportStateAndNotification []gax.CallOption
	DeleteAgentUser            []gax.CallOption
	Query                      []gax.CallOption
	Sync                       []gax.CallOption
}

func defaultHomeGraphApiGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("homegraph.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("homegraph.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("homegraph.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://homegraph.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultHomeGraphApiCallOptions() *HomeGraphApiCallOptions {
	return &HomeGraphApiCallOptions{
		RequestSyncDevices: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
		},
		ReportStateAndNotification: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
		},
		DeleteAgentUser: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		Query: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		Sync: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultHomeGraphApiRESTCallOptions() *HomeGraphApiCallOptions {
	return &HomeGraphApiCallOptions{
		RequestSyncDevices: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
		},
		ReportStateAndNotification: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
		},
		DeleteAgentUser: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout)
			}),
		},
		Query: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout)
			}),
		},
		Sync: []gax.CallOption{
			gax.WithTimeout(10000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    100 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable,
					http.StatusGatewayTimeout)
			}),
		},
	}
}

// internalHomeGraphApiClient is an interface that defines the methods available from HomeGraph API.
type internalHomeGraphApiClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	RequestSyncDevices(context.Context, *graphpb.RequestSyncDevicesRequest, ...gax.CallOption) (*graphpb.RequestSyncDevicesResponse, error)
	ReportStateAndNotification(context.Context, *graphpb.ReportStateAndNotificationRequest, ...gax.CallOption) (*graphpb.ReportStateAndNotificationResponse, error)
	DeleteAgentUser(context.Context, *graphpb.DeleteAgentUserRequest, ...gax.CallOption) error
	Query(context.Context, *graphpb.QueryRequest, ...gax.CallOption) (*graphpb.QueryResponse, error)
	Sync(context.Context, *graphpb.SyncRequest, ...gax.CallOption) (*graphpb.SyncResponse, error)
}

// HomeGraphApiClient is a client for interacting with HomeGraph API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Google Home Graph API service. The Home Graph service provides support for
// accessing first-party and third-party devices stored in Google’s Home Graph.
// The Home Graph database provides contextual data about the relationships
// between devices and the home.
//
// For more details, see the Home Graph developer
// guide (at https://developers.home.google.com/cloud-to-cloud/primer/home-graph).
type HomeGraphApiClient struct {
	// The internal transport-dependent client.
	internalClient internalHomeGraphApiClient

	// The call options for this service.
	CallOptions *HomeGraphApiCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *HomeGraphApiClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *HomeGraphApiClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *HomeGraphApiClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// RequestSyncDevices requests Google to send an action.devices.SYNC
// intent (at https://developers.home.google.com/cloud-to-cloud/intents/sync)
// to your smart home Action to update device metadata for the given user.
//
// The third-party user’s identity is passed via the agent_user_id
// (see
// RequestSyncDevicesRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *HomeGraphApiClient) RequestSyncDevices(ctx context.Context, req *graphpb.RequestSyncDevicesRequest, opts ...gax.CallOption) (*graphpb.RequestSyncDevicesResponse, error) {
	return c.internalClient.RequestSyncDevices(ctx, req, opts...)
}

// ReportStateAndNotification reports device state and optionally sends device notifications.
// Called by your smart home Action when the state of a third-party device
// changes or you need to send a notification about the device.
// See Implement Report
// State (at https://developers.home.google.com/cloud-to-cloud/integration/report-state)
// for more information.
//
// This method updates the device state according to its declared
// traits (at https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits).
// Publishing a new state value outside of these traits will result in an
// INVALID_ARGUMENT error response.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see
// ReportStateAndNotificationRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *HomeGraphApiClient) ReportStateAndNotification(ctx context.Context, req *graphpb.ReportStateAndNotificationRequest, opts ...gax.CallOption) (*graphpb.ReportStateAndNotificationResponse, error) {
	return c.internalClient.ReportStateAndNotification(ctx, req, opts...)
}

// DeleteAgentUser unlinks the given third-party user from your smart home Action.
// All data related to this user will be deleted.
//
// For more details on how users link their accounts, see
// fulfillment and
// authentication (at https://developers.home.google.com/cloud-to-cloud/primer/fulfillment).
//
// The third-party user’s identity is passed in via the agent_user_id
// (see
// DeleteAgentUserRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *HomeGraphApiClient) DeleteAgentUser(ctx context.Context, req *graphpb.DeleteAgentUserRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteAgentUser(ctx, req, opts...)
}

// Query gets the current states in Home Graph for the given set of the third-party
// user’s devices.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see QueryRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *HomeGraphApiClient) Query(ctx context.Context, req *graphpb.QueryRequest, opts ...gax.CallOption) (*graphpb.QueryResponse, error) {
	return c.internalClient.Query(ctx, req, opts...)
}

// Sync gets all the devices associated with the given third-party user.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see SyncRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *HomeGraphApiClient) Sync(ctx context.Context, req *graphpb.SyncRequest, opts ...gax.CallOption) (*graphpb.SyncResponse, error) {
	return c.internalClient.Sync(ctx, req, opts...)
}

// homeGraphApiGRPCClient is a client for interacting with HomeGraph API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type homeGraphApiGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing HomeGraphApiClient
	CallOptions **HomeGraphApiCallOptions

	// The gRPC API client.
	homeGraphApiClient graphpb.HomeGraphApiServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewHomeGraphApiClient creates a new home graph api service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Google Home Graph API service. The Home Graph service provides support for
// accessing first-party and third-party devices stored in Google’s Home Graph.
// The Home Graph database provides contextual data about the relationships
// between devices and the home.
//
// For more details, see the Home Graph developer
// guide (at https://developers.home.google.com/cloud-to-cloud/primer/home-graph).
func NewHomeGraphApiClient(ctx context.Context, opts ...option.ClientOption) (*HomeGraphApiClient, error) {
	clientOpts := defaultHomeGraphApiGRPCClientOptions()
	if newHomeGraphApiClientHook != nil {
		hookOpts, err := newHomeGraphApiClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := HomeGraphApiClient{CallOptions: defaultHomeGraphApiCallOptions()}

	c := &homeGraphApiGRPCClient{
		connPool:           connPool,
		homeGraphApiClient: graphpb.NewHomeGraphApiServiceClient(connPool),
		CallOptions:        &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *homeGraphApiGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *homeGraphApiGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *homeGraphApiGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type homeGraphApiRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing HomeGraphApiClient
	CallOptions **HomeGraphApiCallOptions
}

// NewHomeGraphApiRESTClient creates a new home graph api service rest client.
//
// Google Home Graph API service. The Home Graph service provides support for
// accessing first-party and third-party devices stored in Google’s Home Graph.
// The Home Graph database provides contextual data about the relationships
// between devices and the home.
//
// For more details, see the Home Graph developer
// guide (at https://developers.home.google.com/cloud-to-cloud/primer/home-graph).
func NewHomeGraphApiRESTClient(ctx context.Context, opts ...option.ClientOption) (*HomeGraphApiClient, error) {
	clientOpts := append(defaultHomeGraphApiRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultHomeGraphApiRESTCallOptions()
	c := &homeGraphApiRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &HomeGraphApiClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultHomeGraphApiRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://homegraph.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://homegraph.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://homegraph.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://homegraph.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *homeGraphApiRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *homeGraphApiRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *homeGraphApiRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *homeGraphApiGRPCClient) RequestSyncDevices(ctx context.Context, req *graphpb.RequestSyncDevicesRequest, opts ...gax.CallOption) (*graphpb.RequestSyncDevicesResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).RequestSyncDevices[0:len((*c.CallOptions).RequestSyncDevices):len((*c.CallOptions).RequestSyncDevices)], opts...)
	var resp *graphpb.RequestSyncDevicesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.homeGraphApiClient.RequestSyncDevices(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *homeGraphApiGRPCClient) ReportStateAndNotification(ctx context.Context, req *graphpb.ReportStateAndNotificationRequest, opts ...gax.CallOption) (*graphpb.ReportStateAndNotificationResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).ReportStateAndNotification[0:len((*c.CallOptions).ReportStateAndNotification):len((*c.CallOptions).ReportStateAndNotification)], opts...)
	var resp *graphpb.ReportStateAndNotificationResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.homeGraphApiClient.ReportStateAndNotification(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *homeGraphApiGRPCClient) DeleteAgentUser(ctx context.Context, req *graphpb.DeleteAgentUserRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "agent_user_id", url.QueryEscape(req.GetAgentUserId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteAgentUser[0:len((*c.CallOptions).DeleteAgentUser):len((*c.CallOptions).DeleteAgentUser)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.homeGraphApiClient.DeleteAgentUser(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *homeGraphApiGRPCClient) Query(ctx context.Context, req *graphpb.QueryRequest, opts ...gax.CallOption) (*graphpb.QueryResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).Query[0:len((*c.CallOptions).Query):len((*c.CallOptions).Query)], opts...)
	var resp *graphpb.QueryResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.homeGraphApiClient.Query(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *homeGraphApiGRPCClient) Sync(ctx context.Context, req *graphpb.SyncRequest, opts ...gax.CallOption) (*graphpb.SyncResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).Sync[0:len((*c.CallOptions).Sync):len((*c.CallOptions).Sync)], opts...)
	var resp *graphpb.SyncResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.homeGraphApiClient.Sync(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// RequestSyncDevices requests Google to send an action.devices.SYNC
// intent (at https://developers.home.google.com/cloud-to-cloud/intents/sync)
// to your smart home Action to update device metadata for the given user.
//
// The third-party user’s identity is passed via the agent_user_id
// (see
// RequestSyncDevicesRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *homeGraphApiRESTClient) RequestSyncDevices(ctx context.Context, req *graphpb.RequestSyncDevicesRequest, opts ...gax.CallOption) (*graphpb.RequestSyncDevicesResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/devices:requestSync")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).RequestSyncDevices[0:len((*c.CallOptions).RequestSyncDevices):len((*c.CallOptions).RequestSyncDevices)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &graphpb.RequestSyncDevicesResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// ReportStateAndNotification reports device state and optionally sends device notifications.
// Called by your smart home Action when the state of a third-party device
// changes or you need to send a notification about the device.
// See Implement Report
// State (at https://developers.home.google.com/cloud-to-cloud/integration/report-state)
// for more information.
//
// This method updates the device state according to its declared
// traits (at https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits).
// Publishing a new state value outside of these traits will result in an
// INVALID_ARGUMENT error response.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see
// ReportStateAndNotificationRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *homeGraphApiRESTClient) ReportStateAndNotification(ctx context.Context, req *graphpb.ReportStateAndNotificationRequest, opts ...gax.CallOption) (*graphpb.ReportStateAndNotificationResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/devices:reportStateAndNotification")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).ReportStateAndNotification[0:len((*c.CallOptions).ReportStateAndNotification):len((*c.CallOptions).ReportStateAndNotification)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &graphpb.ReportStateAndNotificationResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteAgentUser unlinks the given third-party user from your smart home Action.
// All data related to this user will be deleted.
//
// For more details on how users link their accounts, see
// fulfillment and
// authentication (at https://developers.home.google.com/cloud-to-cloud/primer/fulfillment).
//
// The third-party user’s identity is passed in via the agent_user_id
// (see
// DeleteAgentUserRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *homeGraphApiRESTClient) DeleteAgentUser(ctx context.Context, req *graphpb.DeleteAgentUserRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetAgentUserId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetRequestId() != "" {
		params.Add("requestId", fmt.Sprintf("%v", req.GetRequestId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "agent_user_id", url.QueryEscape(req.GetAgentUserId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// Query gets the current states in Home Graph for the given set of the third-party
// user’s devices.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see QueryRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *homeGraphApiRESTClient) Query(ctx context.Context, req *graphpb.QueryRequest, opts ...gax.CallOption) (*graphpb.QueryResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/devices:query")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).Query[0:len((*c.CallOptions).Query):len((*c.CallOptions).Query)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &graphpb.QueryResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// Sync gets all the devices associated with the given third-party user.
//
// The third-party user’s identity is passed in via the agent_user_id
// (see SyncRequest).
// This request must be authorized using service account credentials from your
// Actions console project.
func (c *homeGraphApiRESTClient) Sync(ctx context.Context, req *graphpb.SyncRequest, opts ...gax.CallOption) (*graphpb.SyncResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/devices:sync")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).Sync[0:len((*c.CallOptions).Sync):len((*c.CallOptions).Sync)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &graphpb.SyncResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
