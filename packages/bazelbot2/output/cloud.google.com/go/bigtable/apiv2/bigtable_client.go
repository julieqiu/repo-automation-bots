// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package bigtable

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"regexp"
	"strings"
	"time"

	bigtablepb "cloud.google.com/go/bigtable/apiv2/bigtablepb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	ReadRows                              []gax.CallOption
	SampleRowKeys                         []gax.CallOption
	MutateRow                             []gax.CallOption
	MutateRows                            []gax.CallOption
	CheckAndMutateRow                     []gax.CallOption
	PingAndWarm                           []gax.CallOption
	ReadModifyWriteRow                    []gax.CallOption
	GenerateInitialChangeStreamPartitions []gax.CallOption
	ReadChangeStream                      []gax.CallOption
	ExecuteQuery                          []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("bigtable.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("bigtable.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("bigtable.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://bigtable.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		ReadRows:      []gax.CallOption{},
		SampleRowKeys: []gax.CallOption{},
		MutateRow: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    10 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		MutateRows: []gax.CallOption{},
		CheckAndMutateRow: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		PingAndWarm: []gax.CallOption{},
		ReadModifyWriteRow: []gax.CallOption{
			gax.WithTimeout(20000 * time.Millisecond),
		},
		GenerateInitialChangeStreamPartitions: []gax.CallOption{},
		ReadChangeStream:                      []gax.CallOption{},
		ExecuteQuery:                          []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods available from Cloud Bigtable API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ReadRows(context.Context, *bigtablepb.ReadRowsRequest, ...gax.CallOption) (bigtablepb.Bigtable_ReadRowsClient, error)
	SampleRowKeys(context.Context, *bigtablepb.SampleRowKeysRequest, ...gax.CallOption) (bigtablepb.Bigtable_SampleRowKeysClient, error)
	MutateRow(context.Context, *bigtablepb.MutateRowRequest, ...gax.CallOption) (*bigtablepb.MutateRowResponse, error)
	MutateRows(context.Context, *bigtablepb.MutateRowsRequest, ...gax.CallOption) (bigtablepb.Bigtable_MutateRowsClient, error)
	CheckAndMutateRow(context.Context, *bigtablepb.CheckAndMutateRowRequest, ...gax.CallOption) (*bigtablepb.CheckAndMutateRowResponse, error)
	PingAndWarm(context.Context, *bigtablepb.PingAndWarmRequest, ...gax.CallOption) (*bigtablepb.PingAndWarmResponse, error)
	ReadModifyWriteRow(context.Context, *bigtablepb.ReadModifyWriteRowRequest, ...gax.CallOption) (*bigtablepb.ReadModifyWriteRowResponse, error)
	GenerateInitialChangeStreamPartitions(context.Context, *bigtablepb.GenerateInitialChangeStreamPartitionsRequest, ...gax.CallOption) (bigtablepb.Bigtable_GenerateInitialChangeStreamPartitionsClient, error)
	ReadChangeStream(context.Context, *bigtablepb.ReadChangeStreamRequest, ...gax.CallOption) (bigtablepb.Bigtable_ReadChangeStreamClient, error)
	ExecuteQuery(context.Context, *bigtablepb.ExecuteQueryRequest, ...gax.CallOption) (bigtablepb.Bigtable_ExecuteQueryClient, error)
}

// Client is a client for interacting with Cloud Bigtable API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for reading from and writing to existing Bigtable tables.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ReadRows streams back the contents of all requested rows in key order, optionally
// applying the same Reader filter to each. Depending on their size,
// rows and cells may be broken up across multiple responses, but
// atomicity of each row will still be preserved. See the
// ReadRowsResponse documentation for details.
func (c *Client) ReadRows(ctx context.Context, req *bigtablepb.ReadRowsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ReadRowsClient, error) {
	return c.internalClient.ReadRows(ctx, req, opts...)
}

// SampleRowKeys returns a sample of row keys in the table. The returned row keys will
// delimit contiguous sections of the table of approximately equal size,
// which can be used to break up the data for distributed tasks like
// mapreduces.
func (c *Client) SampleRowKeys(ctx context.Context, req *bigtablepb.SampleRowKeysRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_SampleRowKeysClient, error) {
	return c.internalClient.SampleRowKeys(ctx, req, opts...)
}

// MutateRow mutates a row atomically. Cells already present in the row are left
// unchanged unless explicitly changed by mutation.
func (c *Client) MutateRow(ctx context.Context, req *bigtablepb.MutateRowRequest, opts ...gax.CallOption) (*bigtablepb.MutateRowResponse, error) {
	return c.internalClient.MutateRow(ctx, req, opts...)
}

// MutateRows mutates multiple rows in a batch. Each individual row is mutated
// atomically as in MutateRow, but the entire batch is not executed
// atomically.
func (c *Client) MutateRows(ctx context.Context, req *bigtablepb.MutateRowsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_MutateRowsClient, error) {
	return c.internalClient.MutateRows(ctx, req, opts...)
}

// CheckAndMutateRow mutates a row atomically based on the output of a predicate Reader filter.
func (c *Client) CheckAndMutateRow(ctx context.Context, req *bigtablepb.CheckAndMutateRowRequest, opts ...gax.CallOption) (*bigtablepb.CheckAndMutateRowResponse, error) {
	return c.internalClient.CheckAndMutateRow(ctx, req, opts...)
}

// PingAndWarm warm up associated instance metadata for this connection.
// This call is not required but may be useful for connection keep-alive.
func (c *Client) PingAndWarm(ctx context.Context, req *bigtablepb.PingAndWarmRequest, opts ...gax.CallOption) (*bigtablepb.PingAndWarmResponse, error) {
	return c.internalClient.PingAndWarm(ctx, req, opts...)
}

// ReadModifyWriteRow modifies a row atomically on the server. The method reads the latest
// existing timestamp and value from the specified columns and writes a new
// entry based on pre-defined read/modify/write rules. The new value for the
// timestamp is the greater of the existing timestamp or the current server
// time. The method returns the new contents of all modified cells.
func (c *Client) ReadModifyWriteRow(ctx context.Context, req *bigtablepb.ReadModifyWriteRowRequest, opts ...gax.CallOption) (*bigtablepb.ReadModifyWriteRowResponse, error) {
	return c.internalClient.ReadModifyWriteRow(ctx, req, opts...)
}

// GenerateInitialChangeStreamPartitions nOTE: This API is intended to be used by Apache Beam BigtableIO.
// Returns the current list of partitions that make up the table’s
// change stream. The union of partitions will cover the entire keyspace.
// Partitions can be read with ReadChangeStream.
func (c *Client) GenerateInitialChangeStreamPartitions(ctx context.Context, req *bigtablepb.GenerateInitialChangeStreamPartitionsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_GenerateInitialChangeStreamPartitionsClient, error) {
	return c.internalClient.GenerateInitialChangeStreamPartitions(ctx, req, opts...)
}

// ReadChangeStream nOTE: This API is intended to be used by Apache Beam BigtableIO.
// Reads changes from a table’s change stream. Changes will
// reflect both user-initiated mutations and mutations that are caused by
// garbage collection.
func (c *Client) ReadChangeStream(ctx context.Context, req *bigtablepb.ReadChangeStreamRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ReadChangeStreamClient, error) {
	return c.internalClient.ReadChangeStream(ctx, req, opts...)
}

// ExecuteQuery executes a BTQL query against a particular Cloud Bigtable instance.
func (c *Client) ExecuteQuery(ctx context.Context, req *bigtablepb.ExecuteQueryRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ExecuteQueryClient, error) {
	return c.internalClient.ExecuteQuery(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Cloud Bigtable API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client bigtablepb.BigtableClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewClient creates a new bigtable client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for reading from and writing to existing Bigtable tables.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:    connPool,
		client:      bigtablepb.NewBigtableClient(connPool),
		CallOptions: &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) ReadRows(ctx context.Context, req *bigtablepb.ReadRowsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ReadRowsClient, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ReadRows[0:len((*c.CallOptions).ReadRows):len((*c.CallOptions).ReadRows)], opts...)
	var resp bigtablepb.Bigtable_ReadRowsClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ReadRows(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) SampleRowKeys(ctx context.Context, req *bigtablepb.SampleRowKeysRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_SampleRowKeysClient, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SampleRowKeys[0:len((*c.CallOptions).SampleRowKeys):len((*c.CallOptions).SampleRowKeys)], opts...)
	var resp bigtablepb.Bigtable_SampleRowKeysClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.SampleRowKeys(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) MutateRow(ctx context.Context, req *bigtablepb.MutateRowRequest, opts ...gax.CallOption) (*bigtablepb.MutateRowResponse, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).MutateRow[0:len((*c.CallOptions).MutateRow):len((*c.CallOptions).MutateRow)], opts...)
	var resp *bigtablepb.MutateRowResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.MutateRow(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) MutateRows(ctx context.Context, req *bigtablepb.MutateRowsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_MutateRowsClient, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).MutateRows[0:len((*c.CallOptions).MutateRows):len((*c.CallOptions).MutateRows)], opts...)
	var resp bigtablepb.Bigtable_MutateRowsClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.MutateRows(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CheckAndMutateRow(ctx context.Context, req *bigtablepb.CheckAndMutateRowRequest, opts ...gax.CallOption) (*bigtablepb.CheckAndMutateRowResponse, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CheckAndMutateRow[0:len((*c.CallOptions).CheckAndMutateRow):len((*c.CallOptions).CheckAndMutateRow)], opts...)
	var resp *bigtablepb.CheckAndMutateRowResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CheckAndMutateRow(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) PingAndWarm(ctx context.Context, req *bigtablepb.PingAndWarmRequest, opts ...gax.CallOption) (*bigtablepb.PingAndWarmResponse, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<name>projects/[^/]+/instances/[^/]+)"); reg.MatchString(req.GetName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetName())[1])) > 0 {
		routingHeadersMap["name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).PingAndWarm[0:len((*c.CallOptions).PingAndWarm):len((*c.CallOptions).PingAndWarm)], opts...)
	var resp *bigtablepb.PingAndWarmResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.PingAndWarm(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ReadModifyWriteRow(ctx context.Context, req *bigtablepb.ReadModifyWriteRowRequest, opts ...gax.CallOption) (*bigtablepb.ReadModifyWriteRowResponse, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<table_name>projects/[^/]+/instances/[^/]+/tables/[^/]+)"); reg.MatchString(req.GetTableName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])) > 0 {
		routingHeadersMap["table_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetTableName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	if reg := regexp.MustCompile("(?P<authorized_view_name>projects/[^/]+/instances/[^/]+/tables/[^/]+/authorizedViews/[^/]+)"); reg.MatchString(req.GetAuthorizedViewName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])) > 0 {
		routingHeadersMap["authorized_view_name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAuthorizedViewName())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ReadModifyWriteRow[0:len((*c.CallOptions).ReadModifyWriteRow):len((*c.CallOptions).ReadModifyWriteRow)], opts...)
	var resp *bigtablepb.ReadModifyWriteRowResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ReadModifyWriteRow(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GenerateInitialChangeStreamPartitions(ctx context.Context, req *bigtablepb.GenerateInitialChangeStreamPartitionsRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_GenerateInitialChangeStreamPartitionsClient, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "table_name", url.QueryEscape(req.GetTableName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GenerateInitialChangeStreamPartitions[0:len((*c.CallOptions).GenerateInitialChangeStreamPartitions):len((*c.CallOptions).GenerateInitialChangeStreamPartitions)], opts...)
	var resp bigtablepb.Bigtable_GenerateInitialChangeStreamPartitionsClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GenerateInitialChangeStreamPartitions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ReadChangeStream(ctx context.Context, req *bigtablepb.ReadChangeStreamRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ReadChangeStreamClient, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "table_name", url.QueryEscape(req.GetTableName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ReadChangeStream[0:len((*c.CallOptions).ReadChangeStream):len((*c.CallOptions).ReadChangeStream)], opts...)
	var resp bigtablepb.Bigtable_ReadChangeStreamClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ReadChangeStream(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ExecuteQuery(ctx context.Context, req *bigtablepb.ExecuteQueryRequest, opts ...gax.CallOption) (bigtablepb.Bigtable_ExecuteQueryClient, error) {
	routingHeaders := ""
	routingHeadersMap := make(map[string]string)
	if reg := regexp.MustCompile("(?P<name>projects/[^/]+/instances/[^/]+)"); reg.MatchString(req.GetInstanceName()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetInstanceName())[1])) > 0 {
		routingHeadersMap["name"] = url.QueryEscape(reg.FindStringSubmatch(req.GetInstanceName())[1])
	}
	if reg := regexp.MustCompile("(.*)"); reg.MatchString(req.GetAppProfileId()) && len(url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])) > 0 {
		routingHeadersMap["app_profile_id"] = url.QueryEscape(reg.FindStringSubmatch(req.GetAppProfileId())[1])
	}
	for headerName, headerValue := range routingHeadersMap {
		routingHeaders = fmt.Sprintf("%s%s=%s&", routingHeaders, headerName, headerValue)
	}
	routingHeaders = strings.TrimSuffix(routingHeaders, "&")
	hds := []string{"x-goog-request-params", routingHeaders}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExecuteQuery[0:len((*c.CallOptions).ExecuteQuery):len((*c.CallOptions).ExecuteQuery)], opts...)
	var resp bigtablepb.Bigtable_ExecuteQueryClient
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ExecuteQuery(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
