// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package admin

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	adminpb "cloud.google.com/go/bigtable/admin/apiv2/adminpb"
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/proto"
)

var newBigtableInstanceAdminClientHook clientHook

// BigtableInstanceAdminCallOptions contains the retry settings for each method of BigtableInstanceAdminClient.
type BigtableInstanceAdminCallOptions struct {
	CreateInstance        []gax.CallOption
	GetInstance           []gax.CallOption
	ListInstances         []gax.CallOption
	UpdateInstance        []gax.CallOption
	PartialUpdateInstance []gax.CallOption
	DeleteInstance        []gax.CallOption
	CreateCluster         []gax.CallOption
	GetCluster            []gax.CallOption
	ListClusters          []gax.CallOption
	UpdateCluster         []gax.CallOption
	PartialUpdateCluster  []gax.CallOption
	DeleteCluster         []gax.CallOption
	CreateAppProfile      []gax.CallOption
	GetAppProfile         []gax.CallOption
	ListAppProfiles       []gax.CallOption
	UpdateAppProfile      []gax.CallOption
	DeleteAppProfile      []gax.CallOption
	GetIamPolicy          []gax.CallOption
	SetIamPolicy          []gax.CallOption
	TestIamPermissions    []gax.CallOption
	ListHotTablets        []gax.CallOption
}

func defaultBigtableInstanceAdminGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("bigtableadmin.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("bigtableadmin.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("bigtableadmin.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://bigtableadmin.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultBigtableInstanceAdminCallOptions() *BigtableInstanceAdminCallOptions {
	return &BigtableInstanceAdminCallOptions{
		CreateInstance: []gax.CallOption{
			gax.WithTimeout(300000 * time.Millisecond),
		},
		GetInstance: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		ListInstances: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		UpdateInstance: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		PartialUpdateInstance: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		DeleteInstance: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateCluster: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetCluster: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		ListClusters: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		UpdateCluster: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		PartialUpdateCluster: []gax.CallOption{},
		DeleteCluster: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateAppProfile: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAppProfile: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		ListAppProfiles: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		UpdateAppProfile: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		DeleteAppProfile: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetIamPolicy: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		SetIamPolicy: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		TestIamPermissions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
		ListHotTablets: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
					codes.DeadlineExceeded,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        60000 * time.Millisecond,
					Multiplier: 2.00,
				})
			}),
		},
	}
}

// internalBigtableInstanceAdminClient is an interface that defines the methods available from Cloud Bigtable Admin API.
type internalBigtableInstanceAdminClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateInstance(context.Context, *adminpb.CreateInstanceRequest, ...gax.CallOption) (*CreateInstanceOperation, error)
	CreateInstanceOperation(name string) *CreateInstanceOperation
	GetInstance(context.Context, *adminpb.GetInstanceRequest, ...gax.CallOption) (*adminpb.Instance, error)
	ListInstances(context.Context, *adminpb.ListInstancesRequest, ...gax.CallOption) (*adminpb.ListInstancesResponse, error)
	UpdateInstance(context.Context, *adminpb.Instance, ...gax.CallOption) (*adminpb.Instance, error)
	PartialUpdateInstance(context.Context, *adminpb.PartialUpdateInstanceRequest, ...gax.CallOption) (*PartialUpdateInstanceOperation, error)
	PartialUpdateInstanceOperation(name string) *PartialUpdateInstanceOperation
	DeleteInstance(context.Context, *adminpb.DeleteInstanceRequest, ...gax.CallOption) error
	CreateCluster(context.Context, *adminpb.CreateClusterRequest, ...gax.CallOption) (*CreateClusterOperation, error)
	CreateClusterOperation(name string) *CreateClusterOperation
	GetCluster(context.Context, *adminpb.GetClusterRequest, ...gax.CallOption) (*adminpb.Cluster, error)
	ListClusters(context.Context, *adminpb.ListClustersRequest, ...gax.CallOption) (*adminpb.ListClustersResponse, error)
	UpdateCluster(context.Context, *adminpb.Cluster, ...gax.CallOption) (*UpdateClusterOperation, error)
	UpdateClusterOperation(name string) *UpdateClusterOperation
	PartialUpdateCluster(context.Context, *adminpb.PartialUpdateClusterRequest, ...gax.CallOption) (*PartialUpdateClusterOperation, error)
	PartialUpdateClusterOperation(name string) *PartialUpdateClusterOperation
	DeleteCluster(context.Context, *adminpb.DeleteClusterRequest, ...gax.CallOption) error
	CreateAppProfile(context.Context, *adminpb.CreateAppProfileRequest, ...gax.CallOption) (*adminpb.AppProfile, error)
	GetAppProfile(context.Context, *adminpb.GetAppProfileRequest, ...gax.CallOption) (*adminpb.AppProfile, error)
	ListAppProfiles(context.Context, *adminpb.ListAppProfilesRequest, ...gax.CallOption) *AppProfileIterator
	UpdateAppProfile(context.Context, *adminpb.UpdateAppProfileRequest, ...gax.CallOption) (*UpdateAppProfileOperation, error)
	UpdateAppProfileOperation(name string) *UpdateAppProfileOperation
	DeleteAppProfile(context.Context, *adminpb.DeleteAppProfileRequest, ...gax.CallOption) error
	GetIamPolicy(context.Context, *iampb.GetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)
	SetIamPolicy(context.Context, *iampb.SetIamPolicyRequest, ...gax.CallOption) (*iampb.Policy, error)
	TestIamPermissions(context.Context, *iampb.TestIamPermissionsRequest, ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error)
	ListHotTablets(context.Context, *adminpb.ListHotTabletsRequest, ...gax.CallOption) *HotTabletIterator
}

// BigtableInstanceAdminClient is a client for interacting with Cloud Bigtable Admin API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for creating, configuring, and deleting Cloud Bigtable Instances and
// Clusters. Provides access to the Instance and Cluster schemas only, not the
// tables’ metadata or data stored in those tables.
type BigtableInstanceAdminClient struct {
	// The internal transport-dependent client.
	internalClient internalBigtableInstanceAdminClient

	// The call options for this service.
	CallOptions *BigtableInstanceAdminCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *BigtableInstanceAdminClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *BigtableInstanceAdminClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *BigtableInstanceAdminClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateInstance create an instance within a project.
//
// Note that exactly one of Cluster.serve_nodes and
// Cluster.cluster_config.cluster_autoscaling_config can be set. If
// serve_nodes is set to non-zero, then the cluster is manually scaled. If
// cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
// enabled.
func (c *BigtableInstanceAdminClient) CreateInstance(ctx context.Context, req *adminpb.CreateInstanceRequest, opts ...gax.CallOption) (*CreateInstanceOperation, error) {
	return c.internalClient.CreateInstance(ctx, req, opts...)
}

// CreateInstanceOperation returns a new CreateInstanceOperation from a given name.
// The name must be that of a previously created CreateInstanceOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) CreateInstanceOperation(name string) *CreateInstanceOperation {
	return c.internalClient.CreateInstanceOperation(name)
}

// GetInstance gets information about an instance.
func (c *BigtableInstanceAdminClient) GetInstance(ctx context.Context, req *adminpb.GetInstanceRequest, opts ...gax.CallOption) (*adminpb.Instance, error) {
	return c.internalClient.GetInstance(ctx, req, opts...)
}

// ListInstances lists information about instances in a project.
func (c *BigtableInstanceAdminClient) ListInstances(ctx context.Context, req *adminpb.ListInstancesRequest, opts ...gax.CallOption) (*adminpb.ListInstancesResponse, error) {
	return c.internalClient.ListInstances(ctx, req, opts...)
}

// UpdateInstance updates an instance within a project. This method updates only the display
// name and type for an Instance. To update other Instance properties, such as
// labels, use PartialUpdateInstance.
func (c *BigtableInstanceAdminClient) UpdateInstance(ctx context.Context, req *adminpb.Instance, opts ...gax.CallOption) (*adminpb.Instance, error) {
	return c.internalClient.UpdateInstance(ctx, req, opts...)
}

// PartialUpdateInstance partially updates an instance within a project. This method can modify all
// fields of an Instance and is the preferred way to update an Instance.
func (c *BigtableInstanceAdminClient) PartialUpdateInstance(ctx context.Context, req *adminpb.PartialUpdateInstanceRequest, opts ...gax.CallOption) (*PartialUpdateInstanceOperation, error) {
	return c.internalClient.PartialUpdateInstance(ctx, req, opts...)
}

// PartialUpdateInstanceOperation returns a new PartialUpdateInstanceOperation from a given name.
// The name must be that of a previously created PartialUpdateInstanceOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) PartialUpdateInstanceOperation(name string) *PartialUpdateInstanceOperation {
	return c.internalClient.PartialUpdateInstanceOperation(name)
}

// DeleteInstance delete an instance from a project.
func (c *BigtableInstanceAdminClient) DeleteInstance(ctx context.Context, req *adminpb.DeleteInstanceRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteInstance(ctx, req, opts...)
}

// CreateCluster creates a cluster within an instance.
//
// Note that exactly one of Cluster.serve_nodes and
// Cluster.cluster_config.cluster_autoscaling_config can be set. If
// serve_nodes is set to non-zero, then the cluster is manually scaled. If
// cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
// enabled.
func (c *BigtableInstanceAdminClient) CreateCluster(ctx context.Context, req *adminpb.CreateClusterRequest, opts ...gax.CallOption) (*CreateClusterOperation, error) {
	return c.internalClient.CreateCluster(ctx, req, opts...)
}

// CreateClusterOperation returns a new CreateClusterOperation from a given name.
// The name must be that of a previously created CreateClusterOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) CreateClusterOperation(name string) *CreateClusterOperation {
	return c.internalClient.CreateClusterOperation(name)
}

// GetCluster gets information about a cluster.
func (c *BigtableInstanceAdminClient) GetCluster(ctx context.Context, req *adminpb.GetClusterRequest, opts ...gax.CallOption) (*adminpb.Cluster, error) {
	return c.internalClient.GetCluster(ctx, req, opts...)
}

// ListClusters lists information about clusters in an instance.
func (c *BigtableInstanceAdminClient) ListClusters(ctx context.Context, req *adminpb.ListClustersRequest, opts ...gax.CallOption) (*adminpb.ListClustersResponse, error) {
	return c.internalClient.ListClusters(ctx, req, opts...)
}

// UpdateCluster updates a cluster within an instance.
//
// Note that UpdateCluster does not support updating
// cluster_config.cluster_autoscaling_config. In order to update it, you
// must use PartialUpdateCluster.
func (c *BigtableInstanceAdminClient) UpdateCluster(ctx context.Context, req *adminpb.Cluster, opts ...gax.CallOption) (*UpdateClusterOperation, error) {
	return c.internalClient.UpdateCluster(ctx, req, opts...)
}

// UpdateClusterOperation returns a new UpdateClusterOperation from a given name.
// The name must be that of a previously created UpdateClusterOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) UpdateClusterOperation(name string) *UpdateClusterOperation {
	return c.internalClient.UpdateClusterOperation(name)
}

// PartialUpdateCluster partially updates a cluster within a project. This method is the preferred
// way to update a Cluster.
//
// To enable and update autoscaling, set
// cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
// serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
// are ignored. Note that an update cannot simultaneously set serve_nodes to
// non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
// also specify both in the update_mask.
//
// To disable autoscaling, clear cluster_config.cluster_autoscaling_config,
// and explicitly set a serve_node count via the update_mask.
func (c *BigtableInstanceAdminClient) PartialUpdateCluster(ctx context.Context, req *adminpb.PartialUpdateClusterRequest, opts ...gax.CallOption) (*PartialUpdateClusterOperation, error) {
	return c.internalClient.PartialUpdateCluster(ctx, req, opts...)
}

// PartialUpdateClusterOperation returns a new PartialUpdateClusterOperation from a given name.
// The name must be that of a previously created PartialUpdateClusterOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) PartialUpdateClusterOperation(name string) *PartialUpdateClusterOperation {
	return c.internalClient.PartialUpdateClusterOperation(name)
}

// DeleteCluster deletes a cluster from an instance.
func (c *BigtableInstanceAdminClient) DeleteCluster(ctx context.Context, req *adminpb.DeleteClusterRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteCluster(ctx, req, opts...)
}

// CreateAppProfile creates an app profile within an instance.
func (c *BigtableInstanceAdminClient) CreateAppProfile(ctx context.Context, req *adminpb.CreateAppProfileRequest, opts ...gax.CallOption) (*adminpb.AppProfile, error) {
	return c.internalClient.CreateAppProfile(ctx, req, opts...)
}

// GetAppProfile gets information about an app profile.
func (c *BigtableInstanceAdminClient) GetAppProfile(ctx context.Context, req *adminpb.GetAppProfileRequest, opts ...gax.CallOption) (*adminpb.AppProfile, error) {
	return c.internalClient.GetAppProfile(ctx, req, opts...)
}

// ListAppProfiles lists information about app profiles in an instance.
func (c *BigtableInstanceAdminClient) ListAppProfiles(ctx context.Context, req *adminpb.ListAppProfilesRequest, opts ...gax.CallOption) *AppProfileIterator {
	return c.internalClient.ListAppProfiles(ctx, req, opts...)
}

// UpdateAppProfile updates an app profile within an instance.
func (c *BigtableInstanceAdminClient) UpdateAppProfile(ctx context.Context, req *adminpb.UpdateAppProfileRequest, opts ...gax.CallOption) (*UpdateAppProfileOperation, error) {
	return c.internalClient.UpdateAppProfile(ctx, req, opts...)
}

// UpdateAppProfileOperation returns a new UpdateAppProfileOperation from a given name.
// The name must be that of a previously created UpdateAppProfileOperation, possibly from a different process.
func (c *BigtableInstanceAdminClient) UpdateAppProfileOperation(name string) *UpdateAppProfileOperation {
	return c.internalClient.UpdateAppProfileOperation(name)
}

// DeleteAppProfile deletes an app profile from an instance.
func (c *BigtableInstanceAdminClient) DeleteAppProfile(ctx context.Context, req *adminpb.DeleteAppProfileRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteAppProfile(ctx, req, opts...)
}

// GetIamPolicy gets the access control policy for an instance resource. Returns an empty
// policy if an instance exists but does not have a policy set.
func (c *BigtableInstanceAdminClient) GetIamPolicy(ctx context.Context, req *iampb.GetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	return c.internalClient.GetIamPolicy(ctx, req, opts...)
}

// SetIamPolicy sets the access control policy on an instance resource. Replaces any
// existing policy.
func (c *BigtableInstanceAdminClient) SetIamPolicy(ctx context.Context, req *iampb.SetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	return c.internalClient.SetIamPolicy(ctx, req, opts...)
}

// TestIamPermissions returns permissions that the caller has on the specified instance resource.
func (c *BigtableInstanceAdminClient) TestIamPermissions(ctx context.Context, req *iampb.TestIamPermissionsRequest, opts ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	return c.internalClient.TestIamPermissions(ctx, req, opts...)
}

// ListHotTablets lists hot tablets in a cluster, within the time range provided. Hot
// tablets are ordered based on CPU usage.
func (c *BigtableInstanceAdminClient) ListHotTablets(ctx context.Context, req *adminpb.ListHotTabletsRequest, opts ...gax.CallOption) *HotTabletIterator {
	return c.internalClient.ListHotTablets(ctx, req, opts...)
}

// bigtableInstanceAdminGRPCClient is a client for interacting with Cloud Bigtable Admin API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type bigtableInstanceAdminGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing BigtableInstanceAdminClient
	CallOptions **BigtableInstanceAdminCallOptions

	// The gRPC API client.
	bigtableInstanceAdminClient adminpb.BigtableInstanceAdminClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewBigtableInstanceAdminClient creates a new bigtable instance admin client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for creating, configuring, and deleting Cloud Bigtable Instances and
// Clusters. Provides access to the Instance and Cluster schemas only, not the
// tables’ metadata or data stored in those tables.
func NewBigtableInstanceAdminClient(ctx context.Context, opts ...option.ClientOption) (*BigtableInstanceAdminClient, error) {
	clientOpts := defaultBigtableInstanceAdminGRPCClientOptions()
	if newBigtableInstanceAdminClientHook != nil {
		hookOpts, err := newBigtableInstanceAdminClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := BigtableInstanceAdminClient{CallOptions: defaultBigtableInstanceAdminCallOptions()}

	c := &bigtableInstanceAdminGRPCClient{
		connPool:                    connPool,
		bigtableInstanceAdminClient: adminpb.NewBigtableInstanceAdminClient(connPool),
		CallOptions:                 &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *bigtableInstanceAdminGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *bigtableInstanceAdminGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *bigtableInstanceAdminGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *bigtableInstanceAdminGRPCClient) CreateInstance(ctx context.Context, req *adminpb.CreateInstanceRequest, opts ...gax.CallOption) (*CreateInstanceOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateInstance[0:len((*c.CallOptions).CreateInstance):len((*c.CallOptions).CreateInstance)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.CreateInstance(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateInstanceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) GetInstance(ctx context.Context, req *adminpb.GetInstanceRequest, opts ...gax.CallOption) (*adminpb.Instance, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetInstance[0:len((*c.CallOptions).GetInstance):len((*c.CallOptions).GetInstance)], opts...)
	var resp *adminpb.Instance
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.GetInstance(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) ListInstances(ctx context.Context, req *adminpb.ListInstancesRequest, opts ...gax.CallOption) (*adminpb.ListInstancesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListInstances[0:len((*c.CallOptions).ListInstances):len((*c.CallOptions).ListInstances)], opts...)
	var resp *adminpb.ListInstancesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.ListInstances(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) UpdateInstance(ctx context.Context, req *adminpb.Instance, opts ...gax.CallOption) (*adminpb.Instance, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateInstance[0:len((*c.CallOptions).UpdateInstance):len((*c.CallOptions).UpdateInstance)], opts...)
	var resp *adminpb.Instance
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.UpdateInstance(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) PartialUpdateInstance(ctx context.Context, req *adminpb.PartialUpdateInstanceRequest, opts ...gax.CallOption) (*PartialUpdateInstanceOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "instance.name", url.QueryEscape(req.GetInstance().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).PartialUpdateInstance[0:len((*c.CallOptions).PartialUpdateInstance):len((*c.CallOptions).PartialUpdateInstance)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.PartialUpdateInstance(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &PartialUpdateInstanceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) DeleteInstance(ctx context.Context, req *adminpb.DeleteInstanceRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteInstance[0:len((*c.CallOptions).DeleteInstance):len((*c.CallOptions).DeleteInstance)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.bigtableInstanceAdminClient.DeleteInstance(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *bigtableInstanceAdminGRPCClient) CreateCluster(ctx context.Context, req *adminpb.CreateClusterRequest, opts ...gax.CallOption) (*CreateClusterOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateCluster[0:len((*c.CallOptions).CreateCluster):len((*c.CallOptions).CreateCluster)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.CreateCluster(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) GetCluster(ctx context.Context, req *adminpb.GetClusterRequest, opts ...gax.CallOption) (*adminpb.Cluster, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetCluster[0:len((*c.CallOptions).GetCluster):len((*c.CallOptions).GetCluster)], opts...)
	var resp *adminpb.Cluster
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.GetCluster(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) ListClusters(ctx context.Context, req *adminpb.ListClustersRequest, opts ...gax.CallOption) (*adminpb.ListClustersResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListClusters[0:len((*c.CallOptions).ListClusters):len((*c.CallOptions).ListClusters)], opts...)
	var resp *adminpb.ListClustersResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.ListClusters(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) UpdateCluster(ctx context.Context, req *adminpb.Cluster, opts ...gax.CallOption) (*UpdateClusterOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateCluster[0:len((*c.CallOptions).UpdateCluster):len((*c.CallOptions).UpdateCluster)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.UpdateCluster(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) PartialUpdateCluster(ctx context.Context, req *adminpb.PartialUpdateClusterRequest, opts ...gax.CallOption) (*PartialUpdateClusterOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "cluster.name", url.QueryEscape(req.GetCluster().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).PartialUpdateCluster[0:len((*c.CallOptions).PartialUpdateCluster):len((*c.CallOptions).PartialUpdateCluster)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.PartialUpdateCluster(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &PartialUpdateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) DeleteCluster(ctx context.Context, req *adminpb.DeleteClusterRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteCluster[0:len((*c.CallOptions).DeleteCluster):len((*c.CallOptions).DeleteCluster)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.bigtableInstanceAdminClient.DeleteCluster(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *bigtableInstanceAdminGRPCClient) CreateAppProfile(ctx context.Context, req *adminpb.CreateAppProfileRequest, opts ...gax.CallOption) (*adminpb.AppProfile, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateAppProfile[0:len((*c.CallOptions).CreateAppProfile):len((*c.CallOptions).CreateAppProfile)], opts...)
	var resp *adminpb.AppProfile
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.CreateAppProfile(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) GetAppProfile(ctx context.Context, req *adminpb.GetAppProfileRequest, opts ...gax.CallOption) (*adminpb.AppProfile, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetAppProfile[0:len((*c.CallOptions).GetAppProfile):len((*c.CallOptions).GetAppProfile)], opts...)
	var resp *adminpb.AppProfile
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.GetAppProfile(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) ListAppProfiles(ctx context.Context, req *adminpb.ListAppProfilesRequest, opts ...gax.CallOption) *AppProfileIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListAppProfiles[0:len((*c.CallOptions).ListAppProfiles):len((*c.CallOptions).ListAppProfiles)], opts...)
	it := &AppProfileIterator{}
	req = proto.Clone(req).(*adminpb.ListAppProfilesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*adminpb.AppProfile, string, error) {
		resp := &adminpb.ListAppProfilesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.bigtableInstanceAdminClient.ListAppProfiles(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetAppProfiles(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *bigtableInstanceAdminGRPCClient) UpdateAppProfile(ctx context.Context, req *adminpb.UpdateAppProfileRequest, opts ...gax.CallOption) (*UpdateAppProfileOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "app_profile.name", url.QueryEscape(req.GetAppProfile().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateAppProfile[0:len((*c.CallOptions).UpdateAppProfile):len((*c.CallOptions).UpdateAppProfile)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.UpdateAppProfile(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateAppProfileOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *bigtableInstanceAdminGRPCClient) DeleteAppProfile(ctx context.Context, req *adminpb.DeleteAppProfileRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteAppProfile[0:len((*c.CallOptions).DeleteAppProfile):len((*c.CallOptions).DeleteAppProfile)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.bigtableInstanceAdminClient.DeleteAppProfile(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *bigtableInstanceAdminGRPCClient) GetIamPolicy(ctx context.Context, req *iampb.GetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetIamPolicy[0:len((*c.CallOptions).GetIamPolicy):len((*c.CallOptions).GetIamPolicy)], opts...)
	var resp *iampb.Policy
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.GetIamPolicy(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) SetIamPolicy(ctx context.Context, req *iampb.SetIamPolicyRequest, opts ...gax.CallOption) (*iampb.Policy, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SetIamPolicy[0:len((*c.CallOptions).SetIamPolicy):len((*c.CallOptions).SetIamPolicy)], opts...)
	var resp *iampb.Policy
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.SetIamPolicy(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) TestIamPermissions(ctx context.Context, req *iampb.TestIamPermissionsRequest, opts ...gax.CallOption) (*iampb.TestIamPermissionsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "resource", url.QueryEscape(req.GetResource()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).TestIamPermissions[0:len((*c.CallOptions).TestIamPermissions):len((*c.CallOptions).TestIamPermissions)], opts...)
	var resp *iampb.TestIamPermissionsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.bigtableInstanceAdminClient.TestIamPermissions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *bigtableInstanceAdminGRPCClient) ListHotTablets(ctx context.Context, req *adminpb.ListHotTabletsRequest, opts ...gax.CallOption) *HotTabletIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListHotTablets[0:len((*c.CallOptions).ListHotTablets):len((*c.CallOptions).ListHotTablets)], opts...)
	it := &HotTabletIterator{}
	req = proto.Clone(req).(*adminpb.ListHotTabletsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*adminpb.HotTablet, string, error) {
		resp := &adminpb.ListHotTabletsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.bigtableInstanceAdminClient.ListHotTablets(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetHotTablets(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateClusterOperation returns a new CreateClusterOperation from a given name.
// The name must be that of a previously created CreateClusterOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) CreateClusterOperation(name string) *CreateClusterOperation {
	return &CreateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateInstanceOperation returns a new CreateInstanceOperation from a given name.
// The name must be that of a previously created CreateInstanceOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) CreateInstanceOperation(name string) *CreateInstanceOperation {
	return &CreateInstanceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// PartialUpdateClusterOperation returns a new PartialUpdateClusterOperation from a given name.
// The name must be that of a previously created PartialUpdateClusterOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) PartialUpdateClusterOperation(name string) *PartialUpdateClusterOperation {
	return &PartialUpdateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// PartialUpdateInstanceOperation returns a new PartialUpdateInstanceOperation from a given name.
// The name must be that of a previously created PartialUpdateInstanceOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) PartialUpdateInstanceOperation(name string) *PartialUpdateInstanceOperation {
	return &PartialUpdateInstanceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// UpdateAppProfileOperation returns a new UpdateAppProfileOperation from a given name.
// The name must be that of a previously created UpdateAppProfileOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) UpdateAppProfileOperation(name string) *UpdateAppProfileOperation {
	return &UpdateAppProfileOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// UpdateClusterOperation returns a new UpdateClusterOperation from a given name.
// The name must be that of a previously created UpdateClusterOperation, possibly from a different process.
func (c *bigtableInstanceAdminGRPCClient) UpdateClusterOperation(name string) *UpdateClusterOperation {
	return &UpdateClusterOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}
