// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/gdchardwaremanagement/v1alpha/resources.proto

package gdchardwaremanagementpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	datetime "google.golang.org/genproto/googleapis/type/datetime"
	dayofweek "google.golang.org/genproto/googleapis/type/dayofweek"
	postaladdress "google.golang.org/genproto/googleapis/type/postaladdress"
	timeofday "google.golang.org/genproto/googleapis/type/timeofday"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The power supply options.
type PowerSupply int32

const (
	// Power supply is unspecified.
	PowerSupply_POWER_SUPPLY_UNSPECIFIED PowerSupply = 0
	// AC power supply.
	PowerSupply_POWER_SUPPLY_AC PowerSupply = 1
	// DC power supply.
	PowerSupply_POWER_SUPPLY_DC PowerSupply = 2
)

// Enum value maps for PowerSupply.
var (
	PowerSupply_name = map[int32]string{
		0: "POWER_SUPPLY_UNSPECIFIED",
		1: "POWER_SUPPLY_AC",
		2: "POWER_SUPPLY_DC",
	}
	PowerSupply_value = map[string]int32{
		"POWER_SUPPLY_UNSPECIFIED": 0,
		"POWER_SUPPLY_AC":          1,
		"POWER_SUPPLY_DC":          2,
	}
)

func (x PowerSupply) Enum() *PowerSupply {
	p := new(PowerSupply)
	*p = x
	return p
}

func (x PowerSupply) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerSupply) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[0].Descriptor()
}

func (PowerSupply) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[0]
}

func (x PowerSupply) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerSupply.Descriptor instead.
func (PowerSupply) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{0}
}

// Entity is used to denote an organization or party.
type Entity int32

const (
	// Entity is unspecified.
	Entity_ENTITY_UNSPECIFIED Entity = 0
	// Google.
	Entity_GOOGLE Entity = 1
	// Customer.
	Entity_CUSTOMER Entity = 2
	// Vendor.
	Entity_VENDOR Entity = 3
)

// Enum value maps for Entity.
var (
	Entity_name = map[int32]string{
		0: "ENTITY_UNSPECIFIED",
		1: "GOOGLE",
		2: "CUSTOMER",
		3: "VENDOR",
	}
	Entity_value = map[string]int32{
		"ENTITY_UNSPECIFIED": 0,
		"GOOGLE":             1,
		"CUSTOMER":           2,
		"VENDOR":             3,
	}
)

func (x Entity) Enum() *Entity {
	p := new(Entity)
	*p = x
	return p
}

func (x Entity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Entity) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[1].Descriptor()
}

func (Entity) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[1]
}

func (x Entity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Entity.Descriptor instead.
func (Entity) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{1}
}

// Valid states of an order.
type Order_State int32

const (
	// State of the order is unspecified.
	Order_STATE_UNSPECIFIED Order_State = 0
	// Order is being drafted by the customer and has not been submitted yet.
	Order_DRAFT Order_State = 1
	// Order has been submitted to Google.
	Order_SUBMITTED Order_State = 2
	// All information required from the customer for fulfillment of the order
	// is complete.
	Order_INFO_COMPLETE Order_State = 12
	// Order has been accepted by Google.
	Order_ACCEPTED Order_State = 3
	// Order needs more information from the customer.
	Order_ADDITIONAL_INFO_NEEDED Order_State = 4
	// Google has initiated building hardware for the order.
	Order_BUILDING Order_State = 5
	// The hardware has been built and is being shipped.
	Order_SHIPPING Order_State = 6
	// The hardware is being installed.
	Order_INSTALLING Order_State = 7
	// An error occurred in processing the order and customer intervention is
	// required.
	Order_FAILED Order_State = 8
	// Order has been partially completed i.e., some hardware have been
	// delivered and installed.
	Order_PARTIALLY_COMPLETED Order_State = 9
	// Order has been completed.
	Order_COMPLETED Order_State = 10
	// Order has been cancelled.
	Order_CANCELLED Order_State = 11
)

// Enum value maps for Order_State.
var (
	Order_State_name = map[int32]string{
		0:  "STATE_UNSPECIFIED",
		1:  "DRAFT",
		2:  "SUBMITTED",
		12: "INFO_COMPLETE",
		3:  "ACCEPTED",
		4:  "ADDITIONAL_INFO_NEEDED",
		5:  "BUILDING",
		6:  "SHIPPING",
		7:  "INSTALLING",
		8:  "FAILED",
		9:  "PARTIALLY_COMPLETED",
		10: "COMPLETED",
		11: "CANCELLED",
	}
	Order_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"DRAFT":                  1,
		"SUBMITTED":              2,
		"INFO_COMPLETE":          12,
		"ACCEPTED":               3,
		"ADDITIONAL_INFO_NEEDED": 4,
		"BUILDING":               5,
		"SHIPPING":               6,
		"INSTALLING":             7,
		"FAILED":                 8,
		"PARTIALLY_COMPLETED":    9,
		"COMPLETED":              10,
		"CANCELLED":              11,
	}
)

func (x Order_State) Enum() *Order_State {
	p := new(Order_State)
	*p = x
	return p
}

func (x Order_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[2].Descriptor()
}

func (Order_State) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[2]
}

func (x Order_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_State.Descriptor instead.
func (Order_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{0, 0}
}

// Valid types of an Order.
type Order_Type int32

const (
	// Type of the order is unspecified.
	Order_TYPE_UNSPECIFIED Order_Type = 0
	// Paid by the customer.
	Order_PAID Order_Type = 1
	// Proof of concept for the customer.
	Order_POC Order_Type = 2
)

// Enum value maps for Order_Type.
var (
	Order_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "PAID",
		2: "POC",
	}
	Order_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"PAID":             1,
		"POC":              2,
	}
)

func (x Order_Type) Enum() *Order_Type {
	p := new(Order_Type)
	*p = x
	return p
}

func (x Order_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Order_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[3].Descriptor()
}

func (Order_Type) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[3]
}

func (x Order_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Order_Type.Descriptor instead.
func (Order_Type) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{0, 1}
}

// Valid states of a HardwareGroup.
type HardwareGroup_State int32

const (
	// State of the HardwareGroup is unspecified.
	HardwareGroup_STATE_UNSPECIFIED HardwareGroup_State = 0
	// More information is required from the customer to make progress.
	HardwareGroup_ADDITIONAL_INFO_NEEDED HardwareGroup_State = 1
	// Google has initiated building hardware for this HardwareGroup.
	HardwareGroup_BUILDING HardwareGroup_State = 2
	// The hardware has been built and is being shipped.
	HardwareGroup_SHIPPING HardwareGroup_State = 3
	// The hardware is being installed.
	HardwareGroup_INSTALLING HardwareGroup_State = 4
	// Some hardware in the HardwareGroup have been installed.
	HardwareGroup_PARTIALLY_INSTALLED HardwareGroup_State = 5
	// All hardware in the HardwareGroup have been installed.
	HardwareGroup_INSTALLED HardwareGroup_State = 6
	// An error occurred and customer intervention is required.
	HardwareGroup_FAILED HardwareGroup_State = 7
)

// Enum value maps for HardwareGroup_State.
var (
	HardwareGroup_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ADDITIONAL_INFO_NEEDED",
		2: "BUILDING",
		3: "SHIPPING",
		4: "INSTALLING",
		5: "PARTIALLY_INSTALLED",
		6: "INSTALLED",
		7: "FAILED",
	}
	HardwareGroup_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"ADDITIONAL_INFO_NEEDED": 1,
		"BUILDING":               2,
		"SHIPPING":               3,
		"INSTALLING":             4,
		"PARTIALLY_INSTALLED":    5,
		"INSTALLED":              6,
		"FAILED":                 7,
	}
)

func (x HardwareGroup_State) Enum() *HardwareGroup_State {
	p := new(HardwareGroup_State)
	*p = x
	return p
}

func (x HardwareGroup_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareGroup_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[4].Descriptor()
}

func (HardwareGroup_State) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[4]
}

func (x HardwareGroup_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareGroup_State.Descriptor instead.
func (HardwareGroup_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{2, 0}
}

// Valid states for hardware.
type Hardware_State int32

const (
	// State of the Hardware is unspecified.
	Hardware_STATE_UNSPECIFIED Hardware_State = 0
	// More information is required from the customer to make progress.
	Hardware_ADDITIONAL_INFO_NEEDED Hardware_State = 1
	// Google has initiated building hardware for this Hardware.
	Hardware_BUILDING Hardware_State = 2
	// The hardware has been built and is being shipped.
	Hardware_SHIPPING Hardware_State = 3
	// The hardware is being installed.
	Hardware_INSTALLING Hardware_State = 4
	// The hardware has been installed.
	Hardware_INSTALLED Hardware_State = 5
	// An error occurred and customer intervention is required.
	Hardware_FAILED Hardware_State = 6
)

// Enum value maps for Hardware_State.
var (
	Hardware_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ADDITIONAL_INFO_NEEDED",
		2: "BUILDING",
		3: "SHIPPING",
		4: "INSTALLING",
		5: "INSTALLED",
		6: "FAILED",
	}
	Hardware_State_value = map[string]int32{
		"STATE_UNSPECIFIED":      0,
		"ADDITIONAL_INFO_NEEDED": 1,
		"BUILDING":               2,
		"SHIPPING":               3,
		"INSTALLING":             4,
		"INSTALLED":              5,
		"FAILED":                 6,
	}
)

func (x Hardware_State) Enum() *Hardware_State {
	p := new(Hardware_State)
	*p = x
	return p
}

func (x Hardware_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hardware_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[5].Descriptor()
}

func (Hardware_State) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[5]
}

func (x Hardware_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hardware_State.Descriptor instead.
func (Hardware_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3, 0}
}

// Enum for the different types of MAC address.
type Hardware_MacAddress_AddressType int32

const (
	// Unspecified address type.
	Hardware_MacAddress_ADDRESS_TYPE_UNSPECIFIED Hardware_MacAddress_AddressType = 0
	// Address of a network interface card.
	Hardware_MacAddress_NIC Hardware_MacAddress_AddressType = 1
	// Address of a baseboard management controller.
	Hardware_MacAddress_BMC Hardware_MacAddress_AddressType = 2
	// Address of a virtual interface.
	Hardware_MacAddress_VIRTUAL Hardware_MacAddress_AddressType = 3
)

// Enum value maps for Hardware_MacAddress_AddressType.
var (
	Hardware_MacAddress_AddressType_name = map[int32]string{
		0: "ADDRESS_TYPE_UNSPECIFIED",
		1: "NIC",
		2: "BMC",
		3: "VIRTUAL",
	}
	Hardware_MacAddress_AddressType_value = map[string]int32{
		"ADDRESS_TYPE_UNSPECIFIED": 0,
		"NIC":                      1,
		"BMC":                      2,
		"VIRTUAL":                  3,
	}
)

func (x Hardware_MacAddress_AddressType) Enum() *Hardware_MacAddress_AddressType {
	p := new(Hardware_MacAddress_AddressType)
	*p = x
	return p
}

func (x Hardware_MacAddress_AddressType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Hardware_MacAddress_AddressType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[6].Descriptor()
}

func (Hardware_MacAddress_AddressType) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[6]
}

func (x Hardware_MacAddress_AddressType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Hardware_MacAddress_AddressType.Descriptor instead.
func (Hardware_MacAddress_AddressType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3, 0, 0}
}

// Valid types of a SKU.
type Sku_Type int32

const (
	// Type of the SKU is unspecified. This is not an allowed value.
	Sku_TYPE_UNSPECIFIED Sku_Type = 0
	// Rack SKU.
	Sku_RACK Sku_Type = 1
	// Server SKU.
	Sku_SERVER Sku_Type = 2
)

// Enum value maps for Sku_Type.
var (
	Sku_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "RACK",
		2: "SERVER",
	}
	Sku_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"RACK":             1,
		"SERVER":           2,
	}
)

func (x Sku_Type) Enum() *Sku_Type {
	p := new(Sku_Type)
	*p = x
	return p
}

func (x Sku_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Sku_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[7].Descriptor()
}

func (Sku_Type) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[7]
}

func (x Sku_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Sku_Type.Descriptor instead.
func (Sku_Type) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{6, 0}
}

// Valid states for a zone.
type Zone_State int32

const (
	// State of the Zone is unspecified.
	Zone_STATE_UNSPECIFIED Zone_State = 0
	// More information is required from the customer to make progress.
	Zone_ADDITIONAL_INFO_NEEDED Zone_State = 1
	// Google is preparing the Zone.
	Zone_PREPARING Zone_State = 2
	// Factory turnup has succeeded.
	Zone_READY_FOR_CUSTOMER_FACTORY_TURNUP_CHECKS Zone_State = 5
	// The Zone is ready for site turnup.
	Zone_READY_FOR_SITE_TURNUP Zone_State = 6
	// The Zone failed in factory turnup checks.
	Zone_CUSTOMER_FACTORY_TURNUP_CHECKS_FAILED Zone_State = 7
	// The Zone is available to use.
	Zone_ACTIVE Zone_State = 3
	// The Zone has been cancelled.
	Zone_CANCELLED Zone_State = 4
)

// Enum value maps for Zone_State.
var (
	Zone_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ADDITIONAL_INFO_NEEDED",
		2: "PREPARING",
		5: "READY_FOR_CUSTOMER_FACTORY_TURNUP_CHECKS",
		6: "READY_FOR_SITE_TURNUP",
		7: "CUSTOMER_FACTORY_TURNUP_CHECKS_FAILED",
		3: "ACTIVE",
		4: "CANCELLED",
	}
	Zone_State_value = map[string]int32{
		"STATE_UNSPECIFIED":                        0,
		"ADDITIONAL_INFO_NEEDED":                   1,
		"PREPARING":                                2,
		"READY_FOR_CUSTOMER_FACTORY_TURNUP_CHECKS": 5,
		"READY_FOR_SITE_TURNUP":                    6,
		"CUSTOMER_FACTORY_TURNUP_CHECKS_FAILED":    7,
		"ACTIVE":                                   3,
		"CANCELLED":                                4,
	}
)

func (x Zone_State) Enum() *Zone_State {
	p := new(Zone_State)
	*p = x
	return p
}

func (x Zone_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Zone_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[8].Descriptor()
}

func (Zone_State) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[8]
}

func (x Zone_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Zone_State.Descriptor instead.
func (Zone_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{7, 0}
}

// Valid power receptacle types.
type HardwarePhysicalInfo_PowerReceptacleType int32

const (
	// Facility plug type is unspecified.
	HardwarePhysicalInfo_POWER_RECEPTACLE_TYPE_UNSPECIFIED HardwarePhysicalInfo_PowerReceptacleType = 0
	// NEMA 5-15.
	HardwarePhysicalInfo_NEMA_5_15 HardwarePhysicalInfo_PowerReceptacleType = 1
	// C13.
	HardwarePhysicalInfo_C_13 HardwarePhysicalInfo_PowerReceptacleType = 2
	// Standard european receptacle.
	HardwarePhysicalInfo_STANDARD_EU HardwarePhysicalInfo_PowerReceptacleType = 3
)

// Enum value maps for HardwarePhysicalInfo_PowerReceptacleType.
var (
	HardwarePhysicalInfo_PowerReceptacleType_name = map[int32]string{
		0: "POWER_RECEPTACLE_TYPE_UNSPECIFIED",
		1: "NEMA_5_15",
		2: "C_13",
		3: "STANDARD_EU",
	}
	HardwarePhysicalInfo_PowerReceptacleType_value = map[string]int32{
		"POWER_RECEPTACLE_TYPE_UNSPECIFIED": 0,
		"NEMA_5_15":                         1,
		"C_13":                              2,
		"STANDARD_EU":                       3,
	}
)

func (x HardwarePhysicalInfo_PowerReceptacleType) Enum() *HardwarePhysicalInfo_PowerReceptacleType {
	p := new(HardwarePhysicalInfo_PowerReceptacleType)
	*p = x
	return p
}

func (x HardwarePhysicalInfo_PowerReceptacleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwarePhysicalInfo_PowerReceptacleType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[9].Descriptor()
}

func (HardwarePhysicalInfo_PowerReceptacleType) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[9]
}

func (x HardwarePhysicalInfo_PowerReceptacleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwarePhysicalInfo_PowerReceptacleType.Descriptor instead.
func (HardwarePhysicalInfo_PowerReceptacleType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{13, 0}
}

// Valid network uplink types.
type HardwarePhysicalInfo_NetworkUplinkType int32

const (
	// Network uplink type is unspecified.
	HardwarePhysicalInfo_NETWORK_UPLINK_TYPE_UNSPECIFIED HardwarePhysicalInfo_NetworkUplinkType = 0
	// RJ-45.
	HardwarePhysicalInfo_RJ_45 HardwarePhysicalInfo_NetworkUplinkType = 1
)

// Enum value maps for HardwarePhysicalInfo_NetworkUplinkType.
var (
	HardwarePhysicalInfo_NetworkUplinkType_name = map[int32]string{
		0: "NETWORK_UPLINK_TYPE_UNSPECIFIED",
		1: "RJ_45",
	}
	HardwarePhysicalInfo_NetworkUplinkType_value = map[string]int32{
		"NETWORK_UPLINK_TYPE_UNSPECIFIED": 0,
		"RJ_45":                           1,
	}
)

func (x HardwarePhysicalInfo_NetworkUplinkType) Enum() *HardwarePhysicalInfo_NetworkUplinkType {
	p := new(HardwarePhysicalInfo_NetworkUplinkType)
	*p = x
	return p
}

func (x HardwarePhysicalInfo_NetworkUplinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwarePhysicalInfo_NetworkUplinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[10].Descriptor()
}

func (HardwarePhysicalInfo_NetworkUplinkType) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[10]
}

func (x HardwarePhysicalInfo_NetworkUplinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwarePhysicalInfo_NetworkUplinkType.Descriptor instead.
func (HardwarePhysicalInfo_NetworkUplinkType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{13, 1}
}

// Valid voltage values.
type HardwarePhysicalInfo_Voltage int32

const (
	// Voltage is unspecified.
	HardwarePhysicalInfo_VOLTAGE_UNSPECIFIED HardwarePhysicalInfo_Voltage = 0
	// 120V.
	HardwarePhysicalInfo_VOLTAGE_110 HardwarePhysicalInfo_Voltage = 1
	// 220V.
	HardwarePhysicalInfo_VOLTAGE_220 HardwarePhysicalInfo_Voltage = 3
)

// Enum value maps for HardwarePhysicalInfo_Voltage.
var (
	HardwarePhysicalInfo_Voltage_name = map[int32]string{
		0: "VOLTAGE_UNSPECIFIED",
		1: "VOLTAGE_110",
		3: "VOLTAGE_220",
	}
	HardwarePhysicalInfo_Voltage_value = map[string]int32{
		"VOLTAGE_UNSPECIFIED": 0,
		"VOLTAGE_110":         1,
		"VOLTAGE_220":         3,
	}
)

func (x HardwarePhysicalInfo_Voltage) Enum() *HardwarePhysicalInfo_Voltage {
	p := new(HardwarePhysicalInfo_Voltage)
	*p = x
	return p
}

func (x HardwarePhysicalInfo_Voltage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwarePhysicalInfo_Voltage) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[11].Descriptor()
}

func (HardwarePhysicalInfo_Voltage) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[11]
}

func (x HardwarePhysicalInfo_Voltage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwarePhysicalInfo_Voltage.Descriptor instead.
func (HardwarePhysicalInfo_Voltage) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{13, 2}
}

// Valid amperes values.
type HardwarePhysicalInfo_Amperes int32

const (
	// Amperes is unspecified.
	HardwarePhysicalInfo_AMPERES_UNSPECIFIED HardwarePhysicalInfo_Amperes = 0
	// 15A.
	HardwarePhysicalInfo_AMPERES_15 HardwarePhysicalInfo_Amperes = 1
)

// Enum value maps for HardwarePhysicalInfo_Amperes.
var (
	HardwarePhysicalInfo_Amperes_name = map[int32]string{
		0: "AMPERES_UNSPECIFIED",
		1: "AMPERES_15",
	}
	HardwarePhysicalInfo_Amperes_value = map[string]int32{
		"AMPERES_UNSPECIFIED": 0,
		"AMPERES_15":          1,
	}
)

func (x HardwarePhysicalInfo_Amperes) Enum() *HardwarePhysicalInfo_Amperes {
	p := new(HardwarePhysicalInfo_Amperes)
	*p = x
	return p
}

func (x HardwarePhysicalInfo_Amperes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwarePhysicalInfo_Amperes) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[12].Descriptor()
}

func (HardwarePhysicalInfo_Amperes) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[12]
}

func (x HardwarePhysicalInfo_Amperes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwarePhysicalInfo_Amperes.Descriptor instead.
func (HardwarePhysicalInfo_Amperes) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{13, 3}
}

// Valid rack types.
type HardwareInstallationInfo_RackType int32

const (
	// Rack type is unspecified.
	HardwareInstallationInfo_RACK_TYPE_UNSPECIFIED HardwareInstallationInfo_RackType = 0
	// Two post rack.
	HardwareInstallationInfo_TWO_POST HardwareInstallationInfo_RackType = 1
	// Four post rack.
	HardwareInstallationInfo_FOUR_POST HardwareInstallationInfo_RackType = 2
)

// Enum value maps for HardwareInstallationInfo_RackType.
var (
	HardwareInstallationInfo_RackType_name = map[int32]string{
		0: "RACK_TYPE_UNSPECIFIED",
		1: "TWO_POST",
		2: "FOUR_POST",
	}
	HardwareInstallationInfo_RackType_value = map[string]int32{
		"RACK_TYPE_UNSPECIFIED": 0,
		"TWO_POST":              1,
		"FOUR_POST":             2,
	}
)

func (x HardwareInstallationInfo_RackType) Enum() *HardwareInstallationInfo_RackType {
	p := new(HardwareInstallationInfo_RackType)
	*p = x
	return p
}

func (x HardwareInstallationInfo_RackType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HardwareInstallationInfo_RackType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[13].Descriptor()
}

func (HardwareInstallationInfo_RackType) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[13]
}

func (x HardwareInstallationInfo_RackType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HardwareInstallationInfo_RackType.Descriptor instead.
func (HardwareInstallationInfo_RackType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{14, 0}
}

// Enum to represent the state of the subscription.
type SubscriptionConfig_SubscriptionState int32

const (
	// State is unspecified.
	SubscriptionConfig_SUBSCRIPTION_STATE_UNSPECIFIED SubscriptionConfig_SubscriptionState = 0
	// Active state means that the subscription has been created successfully
	// and billing is happening.
	SubscriptionConfig_ACTIVE SubscriptionConfig_SubscriptionState = 1
	// Inactive means that the subscription has been created successfully, but
	// billing has not started yet.
	SubscriptionConfig_INACTIVE SubscriptionConfig_SubscriptionState = 2
	// The subscription is in an erroneous state.
	SubscriptionConfig_ERROR SubscriptionConfig_SubscriptionState = 3
	// The subscription state failed to be retrieved. This may be a transient
	// issue. The user should retry the request.
	SubscriptionConfig_FAILED_TO_RETRIEVE SubscriptionConfig_SubscriptionState = 4
	// The subscription has been completed, because it has reached the end date.
	SubscriptionConfig_COMPLETED SubscriptionConfig_SubscriptionState = 5
)

// Enum value maps for SubscriptionConfig_SubscriptionState.
var (
	SubscriptionConfig_SubscriptionState_name = map[int32]string{
		0: "SUBSCRIPTION_STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ERROR",
		4: "FAILED_TO_RETRIEVE",
		5: "COMPLETED",
	}
	SubscriptionConfig_SubscriptionState_value = map[string]int32{
		"SUBSCRIPTION_STATE_UNSPECIFIED": 0,
		"ACTIVE":                         1,
		"INACTIVE":                       2,
		"ERROR":                          3,
		"FAILED_TO_RETRIEVE":             4,
		"COMPLETED":                      5,
	}
)

func (x SubscriptionConfig_SubscriptionState) Enum() *SubscriptionConfig_SubscriptionState {
	p := new(SubscriptionConfig_SubscriptionState)
	*p = x
	return p
}

func (x SubscriptionConfig_SubscriptionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionConfig_SubscriptionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[14].Descriptor()
}

func (SubscriptionConfig_SubscriptionState) Type() protoreflect.EnumType {
	return &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes[14]
}

func (x SubscriptionConfig_SubscriptionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionConfig_SubscriptionState.Descriptor instead.
func (SubscriptionConfig_SubscriptionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{21, 0}
}

// An order for GDC hardware.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this order.
	// Format: `projects/{project}/locations/{location}/orders/{order}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Display name of this order.
	DisplayName string `protobuf:"bytes,13,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Time when this order was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this order was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels associated with this order as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. State of this order. On order creation, state will be set to
	// DRAFT.
	State Order_State `protobuf:"varint,5,opt,name=state,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Order_State" json:"state,omitempty"`
	// Required. Customer contact information.
	OrganizationContact *OrganizationContact `protobuf:"bytes,6,opt,name=organization_contact,json=organizationContact,proto3" json:"organization_contact,omitempty"`
	// Optional. Customer specified workloads of interest targeted by this order.
	// This must contain <= 20 elements and the length of each element must be <=
	// 50 characters.
	TargetWorkloads []string `protobuf:"bytes,7,rep,name=target_workloads,json=targetWorkloads,proto3" json:"target_workloads,omitempty"`
	// Required. Information about the customer's motivation for this order. The
	// length of this field must be <= 1000 characters.
	CustomerMotivation string `protobuf:"bytes,8,opt,name=customer_motivation,json=customerMotivation,proto3" json:"customer_motivation,omitempty"`
	// Required. Customer specified deadline by when this order should be
	// fulfilled.
	FulfillmentTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=fulfillment_time,json=fulfillmentTime,proto3" json:"fulfillment_time,omitempty"`
	// Required. [Unicode CLDR](http://cldr.unicode.org/) region code where this
	// order will be deployed. For a list of valid CLDR region codes, see the
	// [Language Subtag
	// Registry](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry).
	RegionCode string `protobuf:"bytes,10,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// Output only. Link to the order form.
	OrderFormUri string `protobuf:"bytes,11,opt,name=order_form_uri,json=orderFormUri,proto3" json:"order_form_uri,omitempty"`
	// Output only. Type of this Order.
	Type Order_Type `protobuf:"varint,12,opt,name=type,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Order_Type" json:"type,omitempty"`
	// Output only. Time when the order was submitted. Is auto-populated to the
	// current time when an order is submitted.
	SubmitTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	// Required. The Google Cloud Billing ID to be charged for this order.
	BillingId string `protobuf:"bytes,15,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// Optional. Existing hardware to be removed as part of this order.
	// Note: any hardware removed will be recycled unless otherwise agreed.
	ExistingHardware []*HardwareLocation `protobuf:"bytes,16,rep,name=existing_hardware,json=existingHardware,proto3" json:"existing_hardware,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Order) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Order) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Order) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Order) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Order) GetState() Order_State {
	if x != nil {
		return x.State
	}
	return Order_STATE_UNSPECIFIED
}

func (x *Order) GetOrganizationContact() *OrganizationContact {
	if x != nil {
		return x.OrganizationContact
	}
	return nil
}

func (x *Order) GetTargetWorkloads() []string {
	if x != nil {
		return x.TargetWorkloads
	}
	return nil
}

func (x *Order) GetCustomerMotivation() string {
	if x != nil {
		return x.CustomerMotivation
	}
	return ""
}

func (x *Order) GetFulfillmentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FulfillmentTime
	}
	return nil
}

func (x *Order) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *Order) GetOrderFormUri() string {
	if x != nil {
		return x.OrderFormUri
	}
	return ""
}

func (x *Order) GetType() Order_Type {
	if x != nil {
		return x.Type
	}
	return Order_TYPE_UNSPECIFIED
}

func (x *Order) GetSubmitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *Order) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *Order) GetExistingHardware() []*HardwareLocation {
	if x != nil {
		return x.ExistingHardware
	}
	return nil
}

// A physical site where hardware will be installed.
type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of the site.
	// Format: `projects/{project}/locations/{location}/sites/{site}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Display name of this Site.
	DisplayName string `protobuf:"bytes,24,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Optional. Description of this Site.
	Description string `protobuf:"bytes,25,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. Time when this site was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this site was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels associated with this site as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Required. Contact information for this site.
	OrganizationContact *OrganizationContact `protobuf:"bytes,5,opt,name=organization_contact,json=organizationContact,proto3" json:"organization_contact,omitempty"`
	// Optional. A URL to the Google Maps address location of the site.
	// An example value is `https://goo.gl/maps/xxxxxxxxx`.
	GoogleMapsPinUri string `protobuf:"bytes,6,opt,name=google_maps_pin_uri,json=googleMapsPinUri,proto3" json:"google_maps_pin_uri,omitempty"`
	// Optional. The time periods when the site is accessible.
	// If this field is empty, the site is accessible at all times.
	//
	// This field is used by Google to schedule the initial installation as well
	// as any later hardware maintenance. You may update this at any time. For
	// example, if the initial installation is requested during off-hours but
	// maintenance should be performed during regular business hours, you should
	// update the access times after initial installation is complete.
	AccessTimes []*TimePeriod `protobuf:"bytes,26,rep,name=access_times,json=accessTimes,proto3" json:"access_times,omitempty"`
	// Optional. Any additional notes for this Site. Please include information
	// about:
	//   - security or access restrictions
	//   - any regulations affecting the technicians visiting the site
	//   - any special process or approval required to move the equipment
	//   - whether a representative will be available during site visits
	Notes string `protobuf:"bytes,27,opt,name=notes,proto3" json:"notes,omitempty"`
	// Optional. Customer defined identifier for this Site. This can be used to
	// identify the site in the customer's own systems.
	CustomerSiteId string `protobuf:"bytes,28,opt,name=customer_site_id,json=customerSiteId,proto3" json:"customer_site_id,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Site) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Site) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Site) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Site) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Site) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Site) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Site) GetOrganizationContact() *OrganizationContact {
	if x != nil {
		return x.OrganizationContact
	}
	return nil
}

func (x *Site) GetGoogleMapsPinUri() string {
	if x != nil {
		return x.GoogleMapsPinUri
	}
	return ""
}

func (x *Site) GetAccessTimes() []*TimePeriod {
	if x != nil {
		return x.AccessTimes
	}
	return nil
}

func (x *Site) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Site) GetCustomerSiteId() string {
	if x != nil {
		return x.CustomerSiteId
	}
	return ""
}

// A group of hardware that is part of the same order, has the same SKU, and is
// delivered to the same site.
type HardwareGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this hardware group.
	// Format:
	// `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when this hardware group was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this hardware group was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels associated with this hardware group as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Required. Number of hardware in this HardwareGroup.
	HardwareCount int32 `protobuf:"varint,5,opt,name=hardware_count,json=hardwareCount,proto3" json:"hardware_count,omitempty"`
	// Required. Configuration for hardware in this HardwareGroup.
	Config *HardwareConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// Required. Name of the site where the hardware in this HardwareGroup will be
	// delivered.
	// Format: `projects/{project}/locations/{location}/sites/{site}`
	Site string `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	// Output only. Current state of this HardwareGroup.
	State HardwareGroup_State `protobuf:"varint,8,opt,name=state,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup_State" json:"state,omitempty"`
	// Optional. Name of the zone that the hardware in this HardwareGroup belongs
	// to. Format: `projects/{project}/locations/{location}/zones/{zone}`
	Zone string `protobuf:"bytes,9,opt,name=zone,proto3" json:"zone,omitempty"`
	// Optional. Requested installation date for the hardware in this
	// HardwareGroup. Filled in by the customer.
	RequestedInstallationDate *date.Date `protobuf:"bytes,10,opt,name=requested_installation_date,json=requestedInstallationDate,proto3" json:"requested_installation_date,omitempty"`
}

func (x *HardwareGroup) Reset() {
	*x = HardwareGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareGroup) ProtoMessage() {}

func (x *HardwareGroup) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareGroup.ProtoReflect.Descriptor instead.
func (*HardwareGroup) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{2}
}

func (x *HardwareGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HardwareGroup) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *HardwareGroup) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *HardwareGroup) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *HardwareGroup) GetHardwareCount() int32 {
	if x != nil {
		return x.HardwareCount
	}
	return 0
}

func (x *HardwareGroup) GetConfig() *HardwareConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *HardwareGroup) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *HardwareGroup) GetState() HardwareGroup_State {
	if x != nil {
		return x.State
	}
	return HardwareGroup_STATE_UNSPECIFIED
}

func (x *HardwareGroup) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *HardwareGroup) GetRequestedInstallationDate() *date.Date {
	if x != nil {
		return x.RequestedInstallationDate
	}
	return nil
}

// An instance of hardware installed at a site.
type Hardware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this hardware.
	// Format: `projects/{project}/locations/{location}/hardware/{hardware}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. Display name for this hardware.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Time when this hardware was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this hardware was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels associated with this hardware as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Required. Name of the order that this hardware belongs to.
	// Format: `projects/{project}/locations/{location}/orders/{order}`
	Order string `protobuf:"bytes,6,opt,name=order,proto3" json:"order,omitempty"`
	// Output only. Name for the hardware group that this hardware belongs to.
	// Format:
	// `projects/{project}/locations/{location}/orders/{order}/hardwareGroups/{hardware_group}`
	HardwareGroup string `protobuf:"bytes,7,opt,name=hardware_group,json=hardwareGroup,proto3" json:"hardware_group,omitempty"`
	// Required. Name for the site that this hardware belongs to.
	// Format: `projects/{project}/locations/{location}/sites/{site}`
	Site string `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`
	// Output only. Current state for this hardware.
	State Hardware_State `protobuf:"varint,9,opt,name=state,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Hardware_State" json:"state,omitempty"`
	// Output only. Link to the Customer Intake Questionnaire (CIQ) sheet for this
	// Hardware.
	CiqUri string `protobuf:"bytes,10,opt,name=ciq_uri,json=ciqUri,proto3" json:"ciq_uri,omitempty"`
	// Required. Configuration for this hardware.
	Config *HardwareConfig `protobuf:"bytes,11,opt,name=config,proto3" json:"config,omitempty"`
	// Output only. Estimated installation date for this hardware.
	EstimatedInstallationDate *date.Date `protobuf:"bytes,12,opt,name=estimated_installation_date,json=estimatedInstallationDate,proto3" json:"estimated_installation_date,omitempty"`
	// Optional. Physical properties of this hardware.
	PhysicalInfo *HardwarePhysicalInfo `protobuf:"bytes,13,opt,name=physical_info,json=physicalInfo,proto3" json:"physical_info,omitempty"`
	// Optional. Information for installation of this hardware.
	InstallationInfo *HardwareInstallationInfo `protobuf:"bytes,14,opt,name=installation_info,json=installationInfo,proto3" json:"installation_info,omitempty"`
	// Required. Name for the zone that this hardware belongs to.
	// Format: `projects/{project}/locations/{location}/zones/{zone}`
	Zone string `protobuf:"bytes,15,opt,name=zone,proto3" json:"zone,omitempty"`
	// Optional. Requested installation date for this hardware. If not specified,
	// this is auto-populated from the order's fulfillment_time upon submission or
	// from the HardwareGroup's requested_installation_date upon order acceptance.
	RequestedInstallationDate *date.Date `protobuf:"bytes,16,opt,name=requested_installation_date,json=requestedInstallationDate,proto3" json:"requested_installation_date,omitempty"`
	// Output only. Actual installation date for this hardware. Filled in by
	// Google.
	ActualInstallationDate *date.Date `protobuf:"bytes,17,opt,name=actual_installation_date,json=actualInstallationDate,proto3" json:"actual_installation_date,omitempty"`
	// Output only. Per machine asset information needed for turnup.
	MachineInfos []*Hardware_MachineInfo `protobuf:"bytes,20,rep,name=machine_infos,json=machineInfos,proto3" json:"machine_infos,omitempty"`
}

func (x *Hardware) Reset() {
	*x = Hardware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware) ProtoMessage() {}

func (x *Hardware) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware.ProtoReflect.Descriptor instead.
func (*Hardware) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3}
}

func (x *Hardware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hardware) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Hardware) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Hardware) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Hardware) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Hardware) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *Hardware) GetHardwareGroup() string {
	if x != nil {
		return x.HardwareGroup
	}
	return ""
}

func (x *Hardware) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Hardware) GetState() Hardware_State {
	if x != nil {
		return x.State
	}
	return Hardware_STATE_UNSPECIFIED
}

func (x *Hardware) GetCiqUri() string {
	if x != nil {
		return x.CiqUri
	}
	return ""
}

func (x *Hardware) GetConfig() *HardwareConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Hardware) GetEstimatedInstallationDate() *date.Date {
	if x != nil {
		return x.EstimatedInstallationDate
	}
	return nil
}

func (x *Hardware) GetPhysicalInfo() *HardwarePhysicalInfo {
	if x != nil {
		return x.PhysicalInfo
	}
	return nil
}

func (x *Hardware) GetInstallationInfo() *HardwareInstallationInfo {
	if x != nil {
		return x.InstallationInfo
	}
	return nil
}

func (x *Hardware) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Hardware) GetRequestedInstallationDate() *date.Date {
	if x != nil {
		return x.RequestedInstallationDate
	}
	return nil
}

func (x *Hardware) GetActualInstallationDate() *date.Date {
	if x != nil {
		return x.ActualInstallationDate
	}
	return nil
}

func (x *Hardware) GetMachineInfos() []*Hardware_MachineInfo {
	if x != nil {
		return x.MachineInfos
	}
	return nil
}

// A comment on an order.
type Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this comment.
	// Format:
	// `projects/{project}/locations/{location}/orders/{order}/comments/{comment}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when this comment was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. Labels associated with this comment as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Username of the author of this comment. This is auto-populated
	// from the credentials used during creation of the comment.
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// Required. Text of this comment. The length of text must be <= 1000
	// characters.
	Text string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Output only. Timestamp of the first time this comment was viewed by the
	// customer. If the comment wasn't viewed then this timestamp will be unset.
	CustomerViewedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=customer_viewed_time,json=customerViewedTime,proto3" json:"customer_viewed_time,omitempty"`
	// Output only. The entity the author belongs to.
	AuthorEntity Entity `protobuf:"varint,7,opt,name=author_entity,json=authorEntity,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Entity" json:"author_entity,omitempty"`
}

func (x *Comment) Reset() {
	*x = Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comment) ProtoMessage() {}

func (x *Comment) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comment.ProtoReflect.Descriptor instead.
func (*Comment) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{4}
}

func (x *Comment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Comment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Comment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Comment) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Comment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Comment) GetCustomerViewedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CustomerViewedTime
	}
	return nil
}

func (x *Comment) GetAuthorEntity() Entity {
	if x != nil {
		return x.AuthorEntity
	}
	return Entity_ENTITY_UNSPECIFIED
}

// A log entry of a change made to an order.
type ChangeLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this change log entry.
	// Format:
	// `projects/{project}/locations/{location}/orders/{order}/changeLogEntries/{change_log_entry}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when this change log entry was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. Labels associated with this change log entry as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Output only. Content of this log entry.
	Log string `protobuf:"bytes,4,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *ChangeLogEntry) Reset() {
	*x = ChangeLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLogEntry) ProtoMessage() {}

func (x *ChangeLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLogEntry.ProtoReflect.Descriptor instead.
func (*ChangeLogEntry) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeLogEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChangeLogEntry) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ChangeLogEntry) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ChangeLogEntry) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

// A stock keeping unit (SKU) of GDC hardware.
type Sku struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this SKU.
	// Format: `projects/{project}/locations/{location}/skus/{sku}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Display name of this SKU.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Time when this SKU was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this SKU was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Output only. Configuration for this SKU.
	Config *SkuConfig `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	// Output only. Available instances of this SKU. This field should be used for
	// checking availability of a SKU.
	Instances []*SkuInstance `protobuf:"bytes,7,rep,name=instances,proto3" json:"instances,omitempty"`
	// Output only. Description of this SKU.
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// Output only. The SKU revision ID.
	// A new revision is created whenever `config` is updated. The format is an
	// 8-character hexadecimal string.
	RevisionId string `protobuf:"bytes,9,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Output only. Flag to indicate whether or not this revision is active. Only
	// an active revision can be used in a new Order.
	IsActive bool `protobuf:"varint,10,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// Output only. Type of this SKU.
	Type Sku_Type `protobuf:"varint,11,opt,name=type,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Sku_Type" json:"type,omitempty"`
	// Output only. The vCPU count associated with this SKU.
	VcpuCount int32 `protobuf:"varint,12,opt,name=vcpu_count,json=vcpuCount,proto3" json:"vcpu_count,omitempty"`
}

func (x *Sku) Reset() {
	*x = Sku{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sku) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sku) ProtoMessage() {}

func (x *Sku) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sku.ProtoReflect.Descriptor instead.
func (*Sku) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{6}
}

func (x *Sku) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sku) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Sku) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Sku) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Sku) GetConfig() *SkuConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Sku) GetInstances() []*SkuInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *Sku) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Sku) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *Sku) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Sku) GetType() Sku_Type {
	if x != nil {
		return x.Type
	}
	return Sku_TYPE_UNSPECIFIED
}

func (x *Sku) GetVcpuCount() int32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

// A zone holding a set of hardware.
type Zone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier. Name of this zone.
	// Format: `projects/{project}/locations/{location}/zones/{zone}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Time when this zone was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. Time when this zone was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Optional. Labels associated with this zone as key value pairs.
	// For more information about labels, see [Create and manage
	// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Human friendly display name of this zone.
	DisplayName string `protobuf:"bytes,5,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Output only. Current state for this zone.
	State Zone_State `protobuf:"varint,8,opt,name=state,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Zone_State" json:"state,omitempty"`
	// Required. The points of contact.
	Contacts []*Contact `protobuf:"bytes,9,rep,name=contacts,proto3" json:"contacts,omitempty"`
	// Output only. Link to the Customer Intake Questionnaire (CIQ) sheet for this
	// zone.
	CiqUri string `protobuf:"bytes,10,opt,name=ciq_uri,json=ciqUri,proto3" json:"ciq_uri,omitempty"`
	// Optional. Networking configuration for this zone.
	NetworkConfig *ZoneNetworkConfig `protobuf:"bytes,11,opt,name=network_config,json=networkConfig,proto3" json:"network_config,omitempty"`
	// Output only. Globally unique identifier generated for this Edge Zone.
	GloballyUniqueId string `protobuf:"bytes,12,opt,name=globally_unique_id,json=globallyUniqueId,proto3" json:"globally_unique_id,omitempty"`
	// Output only. Subscription configurations for this zone.
	SubscriptionConfigs []*SubscriptionConfig `protobuf:"bytes,13,rep,name=subscription_configs,json=subscriptionConfigs,proto3" json:"subscription_configs,omitempty"`
}

func (x *Zone) Reset() {
	*x = Zone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Zone) ProtoMessage() {}

func (x *Zone) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Zone.ProtoReflect.Descriptor instead.
func (*Zone) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{7}
}

func (x *Zone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Zone) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Zone) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Zone) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Zone) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Zone) GetState() Zone_State {
	if x != nil {
		return x.State
	}
	return Zone_STATE_UNSPECIFIED
}

func (x *Zone) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *Zone) GetCiqUri() string {
	if x != nil {
		return x.CiqUri
	}
	return ""
}

func (x *Zone) GetNetworkConfig() *ZoneNetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *Zone) GetGloballyUniqueId() string {
	if x != nil {
		return x.GloballyUniqueId
	}
	return ""
}

func (x *Zone) GetSubscriptionConfigs() []*SubscriptionConfig {
	if x != nil {
		return x.SubscriptionConfigs
	}
	return nil
}

// Contact information of the customer organization.
type OrganizationContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The organization's address.
	Address *postaladdress.PostalAddress `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Optional. The organization's email.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Optional. The organization's phone number.
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// Required. The individual points of contact in the organization at this
	// location.
	Contacts []*Contact `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *OrganizationContact) Reset() {
	*x = OrganizationContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationContact) ProtoMessage() {}

func (x *OrganizationContact) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationContact.ProtoReflect.Descriptor instead.
func (*OrganizationContact) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{8}
}

func (x *OrganizationContact) GetAddress() *postaladdress.PostalAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *OrganizationContact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OrganizationContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OrganizationContact) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// Contact details of a point of contact.
type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Given name of the contact.
	GivenName string `protobuf:"bytes,1,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	// Optional. Family name of the contact.
	FamilyName string `protobuf:"bytes,2,opt,name=family_name,json=familyName,proto3" json:"family_name,omitempty"`
	// Required. Email of the contact.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// Required. Phone number of the contact.
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// Optional. Time zone of the contact.
	TimeZone *datetime.TimeZone `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	// Optional. The time periods when the contact is reachable.
	// If this field is empty, the contact is reachable at all times.
	ReachableTimes []*TimePeriod `protobuf:"bytes,6,rep,name=reachable_times,json=reachableTimes,proto3" json:"reachable_times,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{9}
}

func (x *Contact) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *Contact) GetFamilyName() string {
	if x != nil {
		return x.FamilyName
	}
	return ""
}

func (x *Contact) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Contact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Contact) GetTimeZone() *datetime.TimeZone {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *Contact) GetReachableTimes() []*TimePeriod {
	if x != nil {
		return x.ReachableTimes
	}
	return nil
}

// Configuration for GDC hardware.
type HardwareConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Reference to the SKU for this hardware. This can point to a
	// specific SKU revision in the form of `resource_name@revision_id` as defined
	// in [AIP-162](https://google.aip.dev/162). If no revision_id is specified,
	// it refers to the latest revision.
	Sku string `protobuf:"bytes,1,opt,name=sku,proto3" json:"sku,omitempty"`
	// Required. Power supply type for this hardware.
	PowerSupply PowerSupply `protobuf:"varint,2,opt,name=power_supply,json=powerSupply,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.PowerSupply" json:"power_supply,omitempty"`
	// Optional. Subscription duration for the hardware in months.
	SubscriptionDurationMonths int32 `protobuf:"varint,3,opt,name=subscription_duration_months,json=subscriptionDurationMonths,proto3" json:"subscription_duration_months,omitempty"`
}

func (x *HardwareConfig) Reset() {
	*x = HardwareConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareConfig) ProtoMessage() {}

func (x *HardwareConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareConfig.ProtoReflect.Descriptor instead.
func (*HardwareConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{10}
}

func (x *HardwareConfig) GetSku() string {
	if x != nil {
		return x.Sku
	}
	return ""
}

func (x *HardwareConfig) GetPowerSupply() PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return PowerSupply_POWER_SUPPLY_UNSPECIFIED
}

func (x *HardwareConfig) GetSubscriptionDurationMonths() int32 {
	if x != nil {
		return x.SubscriptionDurationMonths
	}
	return 0
}

// Configuration for a SKU.
type SkuConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about CPU configuration.
	Cpu string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Information about GPU configuration.
	Gpu string `protobuf:"bytes,2,opt,name=gpu,proto3" json:"gpu,omitempty"`
	// Information about RAM configuration.
	Ram string `protobuf:"bytes,3,opt,name=ram,proto3" json:"ram,omitempty"`
	// Information about storage configuration.
	Storage string `protobuf:"bytes,4,opt,name=storage,proto3" json:"storage,omitempty"`
}

func (x *SkuConfig) Reset() {
	*x = SkuConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuConfig) ProtoMessage() {}

func (x *SkuConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuConfig.ProtoReflect.Descriptor instead.
func (*SkuConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{11}
}

func (x *SkuConfig) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *SkuConfig) GetGpu() string {
	if x != nil {
		return x.Gpu
	}
	return ""
}

func (x *SkuConfig) GetRam() string {
	if x != nil {
		return x.Ram
	}
	return ""
}

func (x *SkuConfig) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

// A specific instance of the SKU.
type SkuInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The [Unicode CLDR](https://cldr.unicode.org) region code where this
	// instance is available.
	RegionCode string `protobuf:"bytes,1,opt,name=region_code,json=regionCode,proto3" json:"region_code,omitempty"`
	// Power supply type for this instance.
	PowerSupply PowerSupply `protobuf:"varint,2,opt,name=power_supply,json=powerSupply,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.PowerSupply" json:"power_supply,omitempty"`
	// Reference to the corresponding SKU in the Cloud Billing API.
	// The estimated price information can be retrieved using that API.
	// Format: `services/{service}/skus/{sku}`
	BillingSku string `protobuf:"bytes,3,opt,name=billing_sku,json=billingSku,proto3" json:"billing_sku,omitempty"`
	// Reference to the corresponding SKU per vCPU in the Cloud Billing API.
	// The estimated price information can be retrieved using that API.
	// Format: `services/{service}/skus/{sku}`
	BillingSkuPerVcpu string `protobuf:"bytes,4,opt,name=billing_sku_per_vcpu,json=billingSkuPerVcpu,proto3" json:"billing_sku_per_vcpu,omitempty"`
	// Subscription duration for the hardware in months.
	SubscriptionDurationMonths int32 `protobuf:"varint,5,opt,name=subscription_duration_months,json=subscriptionDurationMonths,proto3" json:"subscription_duration_months,omitempty"`
}

func (x *SkuInstance) Reset() {
	*x = SkuInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuInstance) ProtoMessage() {}

func (x *SkuInstance) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuInstance.ProtoReflect.Descriptor instead.
func (*SkuInstance) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{12}
}

func (x *SkuInstance) GetRegionCode() string {
	if x != nil {
		return x.RegionCode
	}
	return ""
}

func (x *SkuInstance) GetPowerSupply() PowerSupply {
	if x != nil {
		return x.PowerSupply
	}
	return PowerSupply_POWER_SUPPLY_UNSPECIFIED
}

func (x *SkuInstance) GetBillingSku() string {
	if x != nil {
		return x.BillingSku
	}
	return ""
}

func (x *SkuInstance) GetBillingSkuPerVcpu() string {
	if x != nil {
		return x.BillingSkuPerVcpu
	}
	return ""
}

func (x *SkuInstance) GetSubscriptionDurationMonths() int32 {
	if x != nil {
		return x.SubscriptionDurationMonths
	}
	return 0
}

// Physical properties of a hardware.
type HardwarePhysicalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The power receptacle type.
	PowerReceptacle HardwarePhysicalInfo_PowerReceptacleType `protobuf:"varint,1,opt,name=power_receptacle,json=powerReceptacle,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo_PowerReceptacleType" json:"power_receptacle,omitempty"`
	// Required. Type of the uplink network connection.
	NetworkUplink HardwarePhysicalInfo_NetworkUplinkType `protobuf:"varint,2,opt,name=network_uplink,json=networkUplink,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo_NetworkUplinkType" json:"network_uplink,omitempty"`
	// Required. Voltage of the power supply.
	Voltage HardwarePhysicalInfo_Voltage `protobuf:"varint,3,opt,name=voltage,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo_Voltage" json:"voltage,omitempty"`
	// Required. Amperes of the power supply.
	Amperes HardwarePhysicalInfo_Amperes `protobuf:"varint,4,opt,name=amperes,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo_Amperes" json:"amperes,omitempty"`
}

func (x *HardwarePhysicalInfo) Reset() {
	*x = HardwarePhysicalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwarePhysicalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwarePhysicalInfo) ProtoMessage() {}

func (x *HardwarePhysicalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwarePhysicalInfo.ProtoReflect.Descriptor instead.
func (*HardwarePhysicalInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{13}
}

func (x *HardwarePhysicalInfo) GetPowerReceptacle() HardwarePhysicalInfo_PowerReceptacleType {
	if x != nil {
		return x.PowerReceptacle
	}
	return HardwarePhysicalInfo_POWER_RECEPTACLE_TYPE_UNSPECIFIED
}

func (x *HardwarePhysicalInfo) GetNetworkUplink() HardwarePhysicalInfo_NetworkUplinkType {
	if x != nil {
		return x.NetworkUplink
	}
	return HardwarePhysicalInfo_NETWORK_UPLINK_TYPE_UNSPECIFIED
}

func (x *HardwarePhysicalInfo) GetVoltage() HardwarePhysicalInfo_Voltage {
	if x != nil {
		return x.Voltage
	}
	return HardwarePhysicalInfo_VOLTAGE_UNSPECIFIED
}

func (x *HardwarePhysicalInfo) GetAmperes() HardwarePhysicalInfo_Amperes {
	if x != nil {
		return x.Amperes
	}
	return HardwarePhysicalInfo_AMPERES_UNSPECIFIED
}

// Information for installation of a Hardware.
type HardwareInstallationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Location of the rack in the site e.g. Floor 2, Room 201, Row 7,
	// Rack 3.
	RackLocation string `protobuf:"bytes,1,opt,name=rack_location,json=rackLocation,proto3" json:"rack_location,omitempty"`
	// Required. Distance from the power outlet in meters.
	PowerDistanceMeters int32 `protobuf:"varint,2,opt,name=power_distance_meters,json=powerDistanceMeters,proto3" json:"power_distance_meters,omitempty"`
	// Required. Distance from the network switch in meters.
	SwitchDistanceMeters int32 `protobuf:"varint,3,opt,name=switch_distance_meters,json=switchDistanceMeters,proto3" json:"switch_distance_meters,omitempty"`
	// Required. Dimensions of the rack unit.
	RackUnitDimensions *Dimensions `protobuf:"bytes,4,opt,name=rack_unit_dimensions,json=rackUnitDimensions,proto3" json:"rack_unit_dimensions,omitempty"`
	// Required. Rack space allocated for the hardware.
	RackSpace *RackSpace `protobuf:"bytes,5,opt,name=rack_space,json=rackSpace,proto3" json:"rack_space,omitempty"`
	// Required. Type of the rack.
	RackType HardwareInstallationInfo_RackType `protobuf:"varint,6,opt,name=rack_type,json=rackType,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo_RackType" json:"rack_type,omitempty"`
}

func (x *HardwareInstallationInfo) Reset() {
	*x = HardwareInstallationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareInstallationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInstallationInfo) ProtoMessage() {}

func (x *HardwareInstallationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInstallationInfo.ProtoReflect.Descriptor instead.
func (*HardwareInstallationInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{14}
}

func (x *HardwareInstallationInfo) GetRackLocation() string {
	if x != nil {
		return x.RackLocation
	}
	return ""
}

func (x *HardwareInstallationInfo) GetPowerDistanceMeters() int32 {
	if x != nil {
		return x.PowerDistanceMeters
	}
	return 0
}

func (x *HardwareInstallationInfo) GetSwitchDistanceMeters() int32 {
	if x != nil {
		return x.SwitchDistanceMeters
	}
	return 0
}

func (x *HardwareInstallationInfo) GetRackUnitDimensions() *Dimensions {
	if x != nil {
		return x.RackUnitDimensions
	}
	return nil
}

func (x *HardwareInstallationInfo) GetRackSpace() *RackSpace {
	if x != nil {
		return x.RackSpace
	}
	return nil
}

func (x *HardwareInstallationInfo) GetRackType() HardwareInstallationInfo_RackType {
	if x != nil {
		return x.RackType
	}
	return HardwareInstallationInfo_RACK_TYPE_UNSPECIFIED
}

// Networking configuration for a zone.
type ZoneNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. An IPv4 address block for machine management.
	// Should be a private RFC1918 or public CIDR block large enough to allocate
	// at least one address per machine in the Zone.
	// Should be in `management_ipv4_subnet`, and disjoint with other address
	// ranges.
	MachineMgmtIpv4Range string `protobuf:"bytes,1,opt,name=machine_mgmt_ipv4_range,json=machineMgmtIpv4Range,proto3" json:"machine_mgmt_ipv4_range,omitempty"`
	// Required. An IPv4 address block for kubernetes nodes.
	// Should be a private RFC1918 or public CIDR block large enough to allocate
	// at least one address per machine in the Zone.
	// Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
	// ranges.
	KubernetesNodeIpv4Range string `protobuf:"bytes,2,opt,name=kubernetes_node_ipv4_range,json=kubernetesNodeIpv4Range,proto3" json:"kubernetes_node_ipv4_range,omitempty"`
	// Required. An IPv4 address block for kubernetes control plane.
	// Should be a private RFC1918 or public CIDR block large enough to allocate
	// at least one address per cluster in the Zone.
	// Should be in `kubernetes_ipv4_subnet`, and disjoint with other address
	// ranges.
	KubernetesControlPlaneIpv4Range string `protobuf:"bytes,3,opt,name=kubernetes_control_plane_ipv4_range,json=kubernetesControlPlaneIpv4Range,proto3" json:"kubernetes_control_plane_ipv4_range,omitempty"`
	// Required. An IPv4 subnet for the management network.
	ManagementIpv4Subnet *Subnet `protobuf:"bytes,4,opt,name=management_ipv4_subnet,json=managementIpv4Subnet,proto3" json:"management_ipv4_subnet,omitempty"`
	// Optional. An IPv4 subnet for the kubernetes network.
	// If unspecified, the kubernetes subnet will be the same as the management
	// subnet.
	KubernetesIpv4Subnet *Subnet `protobuf:"bytes,5,opt,name=kubernetes_ipv4_subnet,json=kubernetesIpv4Subnet,proto3" json:"kubernetes_ipv4_subnet,omitempty"`
}

func (x *ZoneNetworkConfig) Reset() {
	*x = ZoneNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZoneNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneNetworkConfig) ProtoMessage() {}

func (x *ZoneNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneNetworkConfig.ProtoReflect.Descriptor instead.
func (*ZoneNetworkConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{15}
}

func (x *ZoneNetworkConfig) GetMachineMgmtIpv4Range() string {
	if x != nil {
		return x.MachineMgmtIpv4Range
	}
	return ""
}

func (x *ZoneNetworkConfig) GetKubernetesNodeIpv4Range() string {
	if x != nil {
		return x.KubernetesNodeIpv4Range
	}
	return ""
}

func (x *ZoneNetworkConfig) GetKubernetesControlPlaneIpv4Range() string {
	if x != nil {
		return x.KubernetesControlPlaneIpv4Range
	}
	return ""
}

func (x *ZoneNetworkConfig) GetManagementIpv4Subnet() *Subnet {
	if x != nil {
		return x.ManagementIpv4Subnet
	}
	return nil
}

func (x *ZoneNetworkConfig) GetKubernetesIpv4Subnet() *Subnet {
	if x != nil {
		return x.KubernetesIpv4Subnet
	}
	return nil
}

// Represents a subnet.
type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Address range for this subnet in CIDR notation.
	AddressRange string `protobuf:"bytes,1,opt,name=address_range,json=addressRange,proto3" json:"address_range,omitempty"`
	// Required. Default gateway for this subnet.
	DefaultGatewayIpAddress string `protobuf:"bytes,2,opt,name=default_gateway_ip_address,json=defaultGatewayIpAddress,proto3" json:"default_gateway_ip_address,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{16}
}

func (x *Subnet) GetAddressRange() string {
	if x != nil {
		return x.AddressRange
	}
	return ""
}

func (x *Subnet) GetDefaultGatewayIpAddress() string {
	if x != nil {
		return x.DefaultGatewayIpAddress
	}
	return ""
}

// Represents a time period in a week.
type TimePeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The start of the time period.
	StartTime *timeofday.TimeOfDay `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Required. The end of the time period.
	EndTime *timeofday.TimeOfDay `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Required. The days of the week that the time period is active.
	Days []dayofweek.DayOfWeek `protobuf:"varint,3,rep,packed,name=days,proto3,enum=google.type.DayOfWeek" json:"days,omitempty"`
}

func (x *TimePeriod) Reset() {
	*x = TimePeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePeriod) ProtoMessage() {}

func (x *TimePeriod) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePeriod.ProtoReflect.Descriptor instead.
func (*TimePeriod) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{17}
}

func (x *TimePeriod) GetStartTime() *timeofday.TimeOfDay {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimePeriod) GetEndTime() *timeofday.TimeOfDay {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TimePeriod) GetDays() []dayofweek.DayOfWeek {
	if x != nil {
		return x.Days
	}
	return nil
}

// Represents the dimensions of an object.
type Dimensions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Width in inches.
	WidthInches float32 `protobuf:"fixed32,1,opt,name=width_inches,json=widthInches,proto3" json:"width_inches,omitempty"`
	// Required. Height in inches.
	HeightInches float32 `protobuf:"fixed32,2,opt,name=height_inches,json=heightInches,proto3" json:"height_inches,omitempty"`
	// Required. Depth in inches.
	DepthInches float32 `protobuf:"fixed32,3,opt,name=depth_inches,json=depthInches,proto3" json:"depth_inches,omitempty"`
}

func (x *Dimensions) Reset() {
	*x = Dimensions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimensions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimensions) ProtoMessage() {}

func (x *Dimensions) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimensions.ProtoReflect.Descriptor instead.
func (*Dimensions) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{18}
}

func (x *Dimensions) GetWidthInches() float32 {
	if x != nil {
		return x.WidthInches
	}
	return 0
}

func (x *Dimensions) GetHeightInches() float32 {
	if x != nil {
		return x.HeightInches
	}
	return 0
}

func (x *Dimensions) GetDepthInches() float32 {
	if x != nil {
		return x.DepthInches
	}
	return 0
}

// Represents contiguous space in a rack.
type RackSpace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. First rack unit of the rack space (inclusive).
	StartRackUnit int32 `protobuf:"varint,1,opt,name=start_rack_unit,json=startRackUnit,proto3" json:"start_rack_unit,omitempty"`
	// Required. Last rack unit of the rack space (inclusive).
	EndRackUnit int32 `protobuf:"varint,2,opt,name=end_rack_unit,json=endRackUnit,proto3" json:"end_rack_unit,omitempty"`
}

func (x *RackSpace) Reset() {
	*x = RackSpace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RackSpace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RackSpace) ProtoMessage() {}

func (x *RackSpace) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RackSpace.ProtoReflect.Descriptor instead.
func (*RackSpace) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{19}
}

func (x *RackSpace) GetStartRackUnit() int32 {
	if x != nil {
		return x.StartRackUnit
	}
	return 0
}

func (x *RackSpace) GetEndRackUnit() int32 {
	if x != nil {
		return x.EndRackUnit
	}
	return 0
}

// Represents the location of one or many hardware.
type HardwareLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the site where the hardware are present.
	// Format: `projects/{project}/locations/{location}/sites/{site}`
	Site string `protobuf:"bytes,1,opt,name=site,proto3" json:"site,omitempty"`
	// Required. Location of the rack in the site e.g. Floor 2, Room 201, Row 7,
	// Rack 3.
	RackLocation string `protobuf:"bytes,2,opt,name=rack_location,json=rackLocation,proto3" json:"rack_location,omitempty"`
	// Optional. Spaces occupied by the hardware in the rack.
	// If unset, this location is assumed to be the entire rack.
	RackSpace []*RackSpace `protobuf:"bytes,3,rep,name=rack_space,json=rackSpace,proto3" json:"rack_space,omitempty"`
}

func (x *HardwareLocation) Reset() {
	*x = HardwareLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareLocation) ProtoMessage() {}

func (x *HardwareLocation) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareLocation.ProtoReflect.Descriptor instead.
func (*HardwareLocation) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{20}
}

func (x *HardwareLocation) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *HardwareLocation) GetRackLocation() string {
	if x != nil {
		return x.RackLocation
	}
	return ""
}

func (x *HardwareLocation) GetRackSpace() []*RackSpace {
	if x != nil {
		return x.RackSpace
	}
	return nil
}

// A message to store a subscription configuration.
type SubscriptionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The unique identifier of the subscription.
	SubscriptionId string `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	// Output only. The Google Cloud Billing ID that the subscription is created
	// under.
	BillingId string `protobuf:"bytes,2,opt,name=billing_id,json=billingId,proto3" json:"billing_id,omitempty"`
	// Output only. The current state of the subscription.
	State SubscriptionConfig_SubscriptionState `protobuf:"varint,3,opt,name=state,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig_SubscriptionState" json:"state,omitempty"`
}

func (x *SubscriptionConfig) Reset() {
	*x = SubscriptionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionConfig) ProtoMessage() {}

func (x *SubscriptionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionConfig.ProtoReflect.Descriptor instead.
func (*SubscriptionConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{21}
}

func (x *SubscriptionConfig) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SubscriptionConfig) GetBillingId() string {
	if x != nil {
		return x.BillingId
	}
	return ""
}

func (x *SubscriptionConfig) GetState() SubscriptionConfig_SubscriptionState {
	if x != nil {
		return x.State
	}
	return SubscriptionConfig_SUBSCRIPTION_STATE_UNSPECIFIED
}

// Message to describe the MAC address of a machine.
type Hardware_MacAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Address string.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Output only. Address type for this MAC address.
	Type Hardware_MacAddress_AddressType `protobuf:"varint,2,opt,name=type,proto3,enum=google.cloud.gdchardwaremanagement.v1alpha.Hardware_MacAddress_AddressType" json:"type,omitempty"`
}

func (x *Hardware_MacAddress) Reset() {
	*x = Hardware_MacAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_MacAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_MacAddress) ProtoMessage() {}

func (x *Hardware_MacAddress) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_MacAddress.ProtoReflect.Descriptor instead.
func (*Hardware_MacAddress) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Hardware_MacAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Hardware_MacAddress) GetType() Hardware_MacAddress_AddressType {
	if x != nil {
		return x.Type
	}
	return Hardware_MacAddress_ADDRESS_TYPE_UNSPECIFIED
}

// Information about individual disks on a machine.
type Hardware_DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Disk manufacturer.
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Output only. Disk slot number.
	Slot int32 `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	// Output only. Disk serial number.
	SerialNumber string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Output only. Disk PSID.
	Psid string `protobuf:"bytes,4,opt,name=psid,proto3" json:"psid,omitempty"`
	// Output only. Disk part number.
	PartNumber string `protobuf:"bytes,5,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	// Output only. Disk model number.
	ModelNumber string `protobuf:"bytes,6,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
}

func (x *Hardware_DiskInfo) Reset() {
	*x = Hardware_DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_DiskInfo) ProtoMessage() {}

func (x *Hardware_DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_DiskInfo.ProtoReflect.Descriptor instead.
func (*Hardware_DiskInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Hardware_DiskInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Hardware_DiskInfo) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Hardware_DiskInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Hardware_DiskInfo) GetPsid() string {
	if x != nil {
		return x.Psid
	}
	return ""
}

func (x *Hardware_DiskInfo) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Hardware_DiskInfo) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

// Information about individual machines vendors will provide during turnup.
type Hardware_MachineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. Machine service tag.
	ServiceTag string `protobuf:"bytes,1,opt,name=service_tag,json=serviceTag,proto3" json:"service_tag,omitempty"`
	// Output only. Each associated MAC address.
	MacAddresses []*Hardware_MacAddress `protobuf:"bytes,2,rep,name=mac_addresses,json=macAddresses,proto3" json:"mac_addresses,omitempty"`
	// Output only. Machine name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. Information for each disk installed.
	DiskInfos []*Hardware_DiskInfo `protobuf:"bytes,4,rep,name=disk_infos,json=diskInfos,proto3" json:"disk_infos,omitempty"`
}

func (x *Hardware_MachineInfo) Reset() {
	*x = Hardware_MachineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hardware_MachineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hardware_MachineInfo) ProtoMessage() {}

func (x *Hardware_MachineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hardware_MachineInfo.ProtoReflect.Descriptor instead.
func (*Hardware_MachineInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Hardware_MachineInfo) GetServiceTag() string {
	if x != nil {
		return x.ServiceTag
	}
	return ""
}

func (x *Hardware_MachineInfo) GetMacAddresses() []*Hardware_MacAddress {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

func (x *Hardware_MachineInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Hardware_MachineInfo) GetDiskInfos() []*Hardware_DiskInfo {
	if x != nil {
		return x.DiskInfos
	}
	return nil
}

var File_google_cloud_gdchardwaremanagement_v1alpha_resources_proto protoreflect.FileDescriptor

var file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x79, 0x6f, 0x66, 0x77, 0x65, 0x65, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x66, 0x64, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xea, 0x0b, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x52, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x77, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x13, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x6f, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x66, 0x75, 0x6c,
	0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x69, 0x12, 0x4f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x10, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe4, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e,
	0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x49, 0x44, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x50, 0x4f, 0x43, 0x10, 0x02, 0x3a, 0x76, 0xea, 0x41, 0x73, 0x0a, 0x2a, 0x67, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x36, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d,
	0x2a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xd2, 0x06, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x77, 0x0a, 0x14, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x70, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x50, 0x69, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x5e, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x69, 0x74, 0x65, 0x49, 0x64, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x3a, 0x71, 0xea, 0x41, 0x6e, 0x0a, 0x29, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x34, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x69, 0x74, 0x65, 0x7d, 0x2a, 0x05, 0x73, 0x69, 0x74, 0x65, 0x73, 0x32, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x22, 0xe1, 0x08, 0x0a, 0x0d, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2b, 0x0a, 0x29, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0,
	0x41, 0x01, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x3a, 0xaf, 0x01, 0xea, 0x41, 0xab, 0x01, 0x0a, 0x32, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x56, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x32, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xac, 0x13, 0x0a, 0x08, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2c,
	0x0a, 0x2a, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x03,
	0xfa, 0x41, 0x34, 0x0a, 0x32, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x67, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x55, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x69, 0x71, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x69, 0x71, 0x55,
	0x72, 0x69, 0x12, 0x57, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x56, 0x0a, 0x1b, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x19, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x0c, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x76, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x56,
	0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x19, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x16, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x1a, 0xdd, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x4d, 0x43, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x03, 0x1a, 0xdd, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x27, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x04, 0x70, 0x73, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x04, 0x70, 0x73, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x1a, 0x9a, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x67, 0x12, 0x69, 0x0a, 0x0d, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x49, 0x50, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x3a, 0x84, 0x01, 0xea, 0x41, 0x80, 0x01, 0x0a, 0x2d, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x12, 0x3b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x7b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x7d, 0x2a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x32, 0x08, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x90,
	0x01, 0xea, 0x41, 0x8c, 0x01, 0x0a, 0x2c, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x49, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x2a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x63, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xb7, 0x01, 0xea, 0x41, 0xb3, 0x01, 0x0a, 0x33, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x5a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x7d, 0x2a, 0x10,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x32, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0xfe, 0x05, 0x0a, 0x03, 0x53, 0x6b, 0x75, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6b, 0x75, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x5a, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x53, 0x6b, 0x75, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x6b, 0x75, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x76,
	0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x76, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x32, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x10, 0x02, 0x3a, 0x6c, 0xea, 0x41, 0x69, 0x0a, 0x28, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53,
	0x6b, 0x75, 0x12, 0x32, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x73, 0x6b, 0x75, 0x73,
	0x2f, 0x7b, 0x73, 0x6b, 0x75, 0x7d, 0x2a, 0x04, 0x73, 0x6b, 0x75, 0x73, 0x32, 0x03, 0x73, 0x6b,
	0x75, 0x22, 0x8c, 0x09, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x54, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x69, 0x71, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x69, 0x71, 0x55, 0x72,
	0x69, 0x12, 0x69, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x12,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x6c, 0x79, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12,
	0x76, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x2c,
	0x0a, 0x28, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x55, 0x52,
	0x4e, 0x55, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x5f, 0x54,
	0x55, 0x52, 0x4e, 0x55, 0x50, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x55, 0x52, 0x4e,
	0x55, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x3a, 0x71, 0xea,
	0x41, 0x6e, 0x0a, 0x29, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x7a, 0x6f,
	0x6e, 0x65, 0x7d, 0x2a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x32, 0x04, 0x7a, 0x6f, 0x6e, 0x65,
	0x22, 0xdc, 0x01, 0x0a, 0x13, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22,
	0xa8, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a,
	0x03, 0x73, 0x6b, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x2a, 0x0a, 0x28, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6b, 0x75, 0x52, 0x03, 0x73, 0x6b,
	0x75, 0x12, 0x5f, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x45, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1a, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0x5b, 0x0a, 0x09, 0x53, 0x6b, 0x75,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63,
	0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x6b, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x6b, 0x75, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x6b, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x6b, 0x75, 0x50, 0x65,
	0x72, 0x56, 0x63, 0x70, 0x75, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x22, 0x96, 0x06, 0x0a, 0x14, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x84, 0x01, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x7e, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x52, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x67, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x67, 0x0a, 0x07, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x13, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x21, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x50, 0x54,
	0x41, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x4d, 0x41, 0x5f,
	0x35, 0x5f, 0x31, 0x35, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x5f, 0x31, 0x33, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x55, 0x10,
	0x03, 0x22, 0x43, 0x0a, 0x11, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x55, 0x50, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x4a, 0x5f, 0x34, 0x35, 0x10, 0x01, 0x22, 0x44, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x4f,
	0x4c, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x31, 0x31, 0x30, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x56,
	0x4f, 0x4c, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x32, 0x32, 0x30, 0x10, 0x03, 0x22, 0x32, 0x0a, 0x07,
	0x41, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4d, 0x50, 0x45, 0x52,
	0x45, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x45, 0x53, 0x5f, 0x31, 0x35, 0x10, 0x01,
	0x22, 0xb7, 0x04, 0x0a, 0x18, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x15, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x0a, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x63, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x72, 0x61,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x41, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x4f, 0x55, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x22, 0xda, 0x03, 0x0a, 0x11, 0x5a,
	0x6f, 0x6e, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x42, 0x0a, 0x17, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x67, 0x6d, 0x74,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x02, 0x52, 0x14,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x76, 0x34, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xe2, 0x8c, 0xcf,
	0xd7, 0x08, 0x02, 0x08, 0x02, 0x52, 0x17, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x76, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x59,
	0x0a, 0x23, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x02, 0x52, 0x1f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x49, 0x70, 0x76, 0x34, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x6d, 0x0a, 0x16, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x70,
	0x76, 0x34, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x6d, 0x0a, 0x16, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x14, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x49, 0x70, 0x76,
	0x34, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xe2, 0x8c,
	0xcf, 0xd7, 0x08, 0x02, 0x08, 0x02, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xe2, 0x8c, 0xcf,
	0xd7, 0x08, 0x02, 0x08, 0x02, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xb1,
	0x01, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x44, 0x61, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61,
	0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x64, 0x61,
	0x79, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0c, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x49, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x49, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x09, 0x52,
	0x61, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x61, 0x63,
	0x6b, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x63,
	0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xde,
	0x01, 0x0a, 0x10, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x2b, 0x0a, 0x29, 0x67, 0x64, 0x63, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0a, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xd9, 0x02, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x6b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x55, 0x0a, 0x0b, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x43,
	0x10, 0x02, 0x2a, 0x46, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x10, 0x03, 0x42, 0xb2, 0x02, 0x0a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x64, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x67, 0x64, 0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70, 0x62, 0x3b, 0x67, 0x64,
	0x63, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x70, 0x62, 0xaa, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x47, 0x64, 0x63, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0xca, 0x02, 0x2a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x47, 0x64, 0x63, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xea,
	0x02, 0x2d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a,
	0x3a, 0x47, 0x44, 0x43, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescOnce sync.Once
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescData = file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDesc
)

func file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescGZIP() []byte {
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescOnce.Do(func() {
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescData)
	})
	return file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDescData
}

var file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_goTypes = []any{
	(PowerSupply)(0),                     // 0: google.cloud.gdchardwaremanagement.v1alpha.PowerSupply
	(Entity)(0),                          // 1: google.cloud.gdchardwaremanagement.v1alpha.Entity
	(Order_State)(0),                     // 2: google.cloud.gdchardwaremanagement.v1alpha.Order.State
	(Order_Type)(0),                      // 3: google.cloud.gdchardwaremanagement.v1alpha.Order.Type
	(HardwareGroup_State)(0),             // 4: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.State
	(Hardware_State)(0),                  // 5: google.cloud.gdchardwaremanagement.v1alpha.Hardware.State
	(Hardware_MacAddress_AddressType)(0), // 6: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MacAddress.AddressType
	(Sku_Type)(0),                        // 7: google.cloud.gdchardwaremanagement.v1alpha.Sku.Type
	(Zone_State)(0),                      // 8: google.cloud.gdchardwaremanagement.v1alpha.Zone.State
	(HardwarePhysicalInfo_PowerReceptacleType)(0), // 9: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.PowerReceptacleType
	(HardwarePhysicalInfo_NetworkUplinkType)(0),   // 10: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.NetworkUplinkType
	(HardwarePhysicalInfo_Voltage)(0),             // 11: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.Voltage
	(HardwarePhysicalInfo_Amperes)(0),             // 12: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.Amperes
	(HardwareInstallationInfo_RackType)(0),        // 13: google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo.RackType
	(SubscriptionConfig_SubscriptionState)(0),     // 14: google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig.SubscriptionState
	(*Order)(nil),                       // 15: google.cloud.gdchardwaremanagement.v1alpha.Order
	(*Site)(nil),                        // 16: google.cloud.gdchardwaremanagement.v1alpha.Site
	(*HardwareGroup)(nil),               // 17: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup
	(*Hardware)(nil),                    // 18: google.cloud.gdchardwaremanagement.v1alpha.Hardware
	(*Comment)(nil),                     // 19: google.cloud.gdchardwaremanagement.v1alpha.Comment
	(*ChangeLogEntry)(nil),              // 20: google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry
	(*Sku)(nil),                         // 21: google.cloud.gdchardwaremanagement.v1alpha.Sku
	(*Zone)(nil),                        // 22: google.cloud.gdchardwaremanagement.v1alpha.Zone
	(*OrganizationContact)(nil),         // 23: google.cloud.gdchardwaremanagement.v1alpha.OrganizationContact
	(*Contact)(nil),                     // 24: google.cloud.gdchardwaremanagement.v1alpha.Contact
	(*HardwareConfig)(nil),              // 25: google.cloud.gdchardwaremanagement.v1alpha.HardwareConfig
	(*SkuConfig)(nil),                   // 26: google.cloud.gdchardwaremanagement.v1alpha.SkuConfig
	(*SkuInstance)(nil),                 // 27: google.cloud.gdchardwaremanagement.v1alpha.SkuInstance
	(*HardwarePhysicalInfo)(nil),        // 28: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo
	(*HardwareInstallationInfo)(nil),    // 29: google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo
	(*ZoneNetworkConfig)(nil),           // 30: google.cloud.gdchardwaremanagement.v1alpha.ZoneNetworkConfig
	(*Subnet)(nil),                      // 31: google.cloud.gdchardwaremanagement.v1alpha.Subnet
	(*TimePeriod)(nil),                  // 32: google.cloud.gdchardwaremanagement.v1alpha.TimePeriod
	(*Dimensions)(nil),                  // 33: google.cloud.gdchardwaremanagement.v1alpha.Dimensions
	(*RackSpace)(nil),                   // 34: google.cloud.gdchardwaremanagement.v1alpha.RackSpace
	(*HardwareLocation)(nil),            // 35: google.cloud.gdchardwaremanagement.v1alpha.HardwareLocation
	(*SubscriptionConfig)(nil),          // 36: google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig
	nil,                                 // 37: google.cloud.gdchardwaremanagement.v1alpha.Order.LabelsEntry
	nil,                                 // 38: google.cloud.gdchardwaremanagement.v1alpha.Site.LabelsEntry
	nil,                                 // 39: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.LabelsEntry
	(*Hardware_MacAddress)(nil),         // 40: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MacAddress
	(*Hardware_DiskInfo)(nil),           // 41: google.cloud.gdchardwaremanagement.v1alpha.Hardware.DiskInfo
	(*Hardware_MachineInfo)(nil),        // 42: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MachineInfo
	nil,                                 // 43: google.cloud.gdchardwaremanagement.v1alpha.Hardware.LabelsEntry
	nil,                                 // 44: google.cloud.gdchardwaremanagement.v1alpha.Comment.LabelsEntry
	nil,                                 // 45: google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry.LabelsEntry
	nil,                                 // 46: google.cloud.gdchardwaremanagement.v1alpha.Zone.LabelsEntry
	(*timestamppb.Timestamp)(nil),       // 47: google.protobuf.Timestamp
	(*date.Date)(nil),                   // 48: google.type.Date
	(*postaladdress.PostalAddress)(nil), // 49: google.type.PostalAddress
	(*datetime.TimeZone)(nil),           // 50: google.type.TimeZone
	(*timeofday.TimeOfDay)(nil),         // 51: google.type.TimeOfDay
	(dayofweek.DayOfWeek)(0),            // 52: google.type.DayOfWeek
}
var file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_depIdxs = []int32{
	47, // 0: google.cloud.gdchardwaremanagement.v1alpha.Order.create_time:type_name -> google.protobuf.Timestamp
	47, // 1: google.cloud.gdchardwaremanagement.v1alpha.Order.update_time:type_name -> google.protobuf.Timestamp
	37, // 2: google.cloud.gdchardwaremanagement.v1alpha.Order.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Order.LabelsEntry
	2,  // 3: google.cloud.gdchardwaremanagement.v1alpha.Order.state:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Order.State
	23, // 4: google.cloud.gdchardwaremanagement.v1alpha.Order.organization_contact:type_name -> google.cloud.gdchardwaremanagement.v1alpha.OrganizationContact
	47, // 5: google.cloud.gdchardwaremanagement.v1alpha.Order.fulfillment_time:type_name -> google.protobuf.Timestamp
	3,  // 6: google.cloud.gdchardwaremanagement.v1alpha.Order.type:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Order.Type
	47, // 7: google.cloud.gdchardwaremanagement.v1alpha.Order.submit_time:type_name -> google.protobuf.Timestamp
	35, // 8: google.cloud.gdchardwaremanagement.v1alpha.Order.existing_hardware:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareLocation
	47, // 9: google.cloud.gdchardwaremanagement.v1alpha.Site.create_time:type_name -> google.protobuf.Timestamp
	47, // 10: google.cloud.gdchardwaremanagement.v1alpha.Site.update_time:type_name -> google.protobuf.Timestamp
	38, // 11: google.cloud.gdchardwaremanagement.v1alpha.Site.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Site.LabelsEntry
	23, // 12: google.cloud.gdchardwaremanagement.v1alpha.Site.organization_contact:type_name -> google.cloud.gdchardwaremanagement.v1alpha.OrganizationContact
	32, // 13: google.cloud.gdchardwaremanagement.v1alpha.Site.access_times:type_name -> google.cloud.gdchardwaremanagement.v1alpha.TimePeriod
	47, // 14: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.create_time:type_name -> google.protobuf.Timestamp
	47, // 15: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.update_time:type_name -> google.protobuf.Timestamp
	39, // 16: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.LabelsEntry
	25, // 17: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.config:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareConfig
	4,  // 18: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.state:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.State
	48, // 19: google.cloud.gdchardwaremanagement.v1alpha.HardwareGroup.requested_installation_date:type_name -> google.type.Date
	47, // 20: google.cloud.gdchardwaremanagement.v1alpha.Hardware.create_time:type_name -> google.protobuf.Timestamp
	47, // 21: google.cloud.gdchardwaremanagement.v1alpha.Hardware.update_time:type_name -> google.protobuf.Timestamp
	43, // 22: google.cloud.gdchardwaremanagement.v1alpha.Hardware.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.LabelsEntry
	5,  // 23: google.cloud.gdchardwaremanagement.v1alpha.Hardware.state:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.State
	25, // 24: google.cloud.gdchardwaremanagement.v1alpha.Hardware.config:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareConfig
	48, // 25: google.cloud.gdchardwaremanagement.v1alpha.Hardware.estimated_installation_date:type_name -> google.type.Date
	28, // 26: google.cloud.gdchardwaremanagement.v1alpha.Hardware.physical_info:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo
	29, // 27: google.cloud.gdchardwaremanagement.v1alpha.Hardware.installation_info:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo
	48, // 28: google.cloud.gdchardwaremanagement.v1alpha.Hardware.requested_installation_date:type_name -> google.type.Date
	48, // 29: google.cloud.gdchardwaremanagement.v1alpha.Hardware.actual_installation_date:type_name -> google.type.Date
	42, // 30: google.cloud.gdchardwaremanagement.v1alpha.Hardware.machine_infos:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.MachineInfo
	47, // 31: google.cloud.gdchardwaremanagement.v1alpha.Comment.create_time:type_name -> google.protobuf.Timestamp
	44, // 32: google.cloud.gdchardwaremanagement.v1alpha.Comment.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Comment.LabelsEntry
	47, // 33: google.cloud.gdchardwaremanagement.v1alpha.Comment.customer_viewed_time:type_name -> google.protobuf.Timestamp
	1,  // 34: google.cloud.gdchardwaremanagement.v1alpha.Comment.author_entity:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Entity
	47, // 35: google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry.create_time:type_name -> google.protobuf.Timestamp
	45, // 36: google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.ChangeLogEntry.LabelsEntry
	47, // 37: google.cloud.gdchardwaremanagement.v1alpha.Sku.create_time:type_name -> google.protobuf.Timestamp
	47, // 38: google.cloud.gdchardwaremanagement.v1alpha.Sku.update_time:type_name -> google.protobuf.Timestamp
	26, // 39: google.cloud.gdchardwaremanagement.v1alpha.Sku.config:type_name -> google.cloud.gdchardwaremanagement.v1alpha.SkuConfig
	27, // 40: google.cloud.gdchardwaremanagement.v1alpha.Sku.instances:type_name -> google.cloud.gdchardwaremanagement.v1alpha.SkuInstance
	7,  // 41: google.cloud.gdchardwaremanagement.v1alpha.Sku.type:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Sku.Type
	47, // 42: google.cloud.gdchardwaremanagement.v1alpha.Zone.create_time:type_name -> google.protobuf.Timestamp
	47, // 43: google.cloud.gdchardwaremanagement.v1alpha.Zone.update_time:type_name -> google.protobuf.Timestamp
	46, // 44: google.cloud.gdchardwaremanagement.v1alpha.Zone.labels:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Zone.LabelsEntry
	8,  // 45: google.cloud.gdchardwaremanagement.v1alpha.Zone.state:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Zone.State
	24, // 46: google.cloud.gdchardwaremanagement.v1alpha.Zone.contacts:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Contact
	30, // 47: google.cloud.gdchardwaremanagement.v1alpha.Zone.network_config:type_name -> google.cloud.gdchardwaremanagement.v1alpha.ZoneNetworkConfig
	36, // 48: google.cloud.gdchardwaremanagement.v1alpha.Zone.subscription_configs:type_name -> google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig
	49, // 49: google.cloud.gdchardwaremanagement.v1alpha.OrganizationContact.address:type_name -> google.type.PostalAddress
	24, // 50: google.cloud.gdchardwaremanagement.v1alpha.OrganizationContact.contacts:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Contact
	50, // 51: google.cloud.gdchardwaremanagement.v1alpha.Contact.time_zone:type_name -> google.type.TimeZone
	32, // 52: google.cloud.gdchardwaremanagement.v1alpha.Contact.reachable_times:type_name -> google.cloud.gdchardwaremanagement.v1alpha.TimePeriod
	0,  // 53: google.cloud.gdchardwaremanagement.v1alpha.HardwareConfig.power_supply:type_name -> google.cloud.gdchardwaremanagement.v1alpha.PowerSupply
	0,  // 54: google.cloud.gdchardwaremanagement.v1alpha.SkuInstance.power_supply:type_name -> google.cloud.gdchardwaremanagement.v1alpha.PowerSupply
	9,  // 55: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.power_receptacle:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.PowerReceptacleType
	10, // 56: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.network_uplink:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.NetworkUplinkType
	11, // 57: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.voltage:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.Voltage
	12, // 58: google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.amperes:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwarePhysicalInfo.Amperes
	33, // 59: google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo.rack_unit_dimensions:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Dimensions
	34, // 60: google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo.rack_space:type_name -> google.cloud.gdchardwaremanagement.v1alpha.RackSpace
	13, // 61: google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo.rack_type:type_name -> google.cloud.gdchardwaremanagement.v1alpha.HardwareInstallationInfo.RackType
	31, // 62: google.cloud.gdchardwaremanagement.v1alpha.ZoneNetworkConfig.management_ipv4_subnet:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Subnet
	31, // 63: google.cloud.gdchardwaremanagement.v1alpha.ZoneNetworkConfig.kubernetes_ipv4_subnet:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Subnet
	51, // 64: google.cloud.gdchardwaremanagement.v1alpha.TimePeriod.start_time:type_name -> google.type.TimeOfDay
	51, // 65: google.cloud.gdchardwaremanagement.v1alpha.TimePeriod.end_time:type_name -> google.type.TimeOfDay
	52, // 66: google.cloud.gdchardwaremanagement.v1alpha.TimePeriod.days:type_name -> google.type.DayOfWeek
	34, // 67: google.cloud.gdchardwaremanagement.v1alpha.HardwareLocation.rack_space:type_name -> google.cloud.gdchardwaremanagement.v1alpha.RackSpace
	14, // 68: google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig.state:type_name -> google.cloud.gdchardwaremanagement.v1alpha.SubscriptionConfig.SubscriptionState
	6,  // 69: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MacAddress.type:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.MacAddress.AddressType
	40, // 70: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MachineInfo.mac_addresses:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.MacAddress
	41, // 71: google.cloud.gdchardwaremanagement.v1alpha.Hardware.MachineInfo.disk_infos:type_name -> google.cloud.gdchardwaremanagement.v1alpha.Hardware.DiskInfo
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_init() }
func file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_init() {
	if File_google_cloud_gdchardwaremanagement_v1alpha_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Hardware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Sku); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Zone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*OrganizationContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SkuConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*SkuInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*HardwarePhysicalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareInstallationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ZoneNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TimePeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Dimensions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RackSpace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*HardwareLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*SubscriptionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Hardware_MacAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Hardware_DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Hardware_MachineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_goTypes,
		DependencyIndexes: file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_depIdxs,
		EnumInfos:         file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_enumTypes,
		MessageInfos:      file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_msgTypes,
	}.Build()
	File_google_cloud_gdchardwaremanagement_v1alpha_resources_proto = out.File
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_rawDesc = nil
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_goTypes = nil
	file_google_cloud_gdchardwaremanagement_v1alpha_resources_proto_depIdxs = nil
}
