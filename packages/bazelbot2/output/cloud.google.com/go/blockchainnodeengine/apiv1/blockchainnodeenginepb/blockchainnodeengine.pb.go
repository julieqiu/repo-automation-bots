// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/blockchainnodeengine/v1/blockchainnodeengine.proto

package blockchainnodeenginepb

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The blockchain type of the node.
type BlockchainNode_BlockchainType int32

const (
	// Blockchain type has not been specified, but should be.
	BlockchainNode_BLOCKCHAIN_TYPE_UNSPECIFIED BlockchainNode_BlockchainType = 0
	// The blockchain type is Ethereum.
	BlockchainNode_ETHEREUM BlockchainNode_BlockchainType = 1
)

// Enum value maps for BlockchainNode_BlockchainType.
var (
	BlockchainNode_BlockchainType_name = map[int32]string{
		0: "BLOCKCHAIN_TYPE_UNSPECIFIED",
		1: "ETHEREUM",
	}
	BlockchainNode_BlockchainType_value = map[string]int32{
		"BLOCKCHAIN_TYPE_UNSPECIFIED": 0,
		"ETHEREUM":                    1,
	}
)

func (x BlockchainNode_BlockchainType) Enum() *BlockchainNode_BlockchainType {
	p := new(BlockchainNode_BlockchainType)
	*p = x
	return p
}

func (x BlockchainNode_BlockchainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_BlockchainType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[0].Descriptor()
}

func (BlockchainNode_BlockchainType) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[0]
}

func (x BlockchainNode_BlockchainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_BlockchainType.Descriptor instead.
func (BlockchainNode_BlockchainType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 0}
}

// All possible states for a given blockchain node.
type BlockchainNode_State int32

const (
	// The state has not been specified.
	BlockchainNode_STATE_UNSPECIFIED BlockchainNode_State = 0
	// The node has been requested and is in the process of being created.
	BlockchainNode_CREATING BlockchainNode_State = 1
	// The existing node is undergoing deletion, but is not yet finished.
	BlockchainNode_DELETING BlockchainNode_State = 2
	// The node is running and ready for use.
	BlockchainNode_RUNNING BlockchainNode_State = 4
	// The node is in an unexpected or errored state.
	BlockchainNode_ERROR BlockchainNode_State = 5
	// The node is currently being updated.
	BlockchainNode_UPDATING BlockchainNode_State = 6
	// The node is currently being repaired.
	BlockchainNode_REPAIRING BlockchainNode_State = 7
	// The node is currently being reconciled.
	BlockchainNode_RECONCILING BlockchainNode_State = 8
	// The node is syncing, which is the process by which it obtains the latest
	// block and current global state.
	BlockchainNode_SYNCING BlockchainNode_State = 9
)

// Enum value maps for BlockchainNode_State.
var (
	BlockchainNode_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "DELETING",
		4: "RUNNING",
		5: "ERROR",
		6: "UPDATING",
		7: "REPAIRING",
		8: "RECONCILING",
		9: "SYNCING",
	}
	BlockchainNode_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"DELETING":          2,
		"RUNNING":           4,
		"ERROR":             5,
		"UPDATING":          6,
		"REPAIRING":         7,
		"RECONCILING":       8,
		"SYNCING":           9,
	}
)

func (x BlockchainNode_State) Enum() *BlockchainNode_State {
	p := new(BlockchainNode_State)
	*p = x
	return p
}

func (x BlockchainNode_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[1].Descriptor()
}

func (BlockchainNode_State) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[1]
}

func (x BlockchainNode_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_State.Descriptor instead.
func (BlockchainNode_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1}
}

// The Ethereum environment being accessed.
//
// See [Networks](https://ethereum.org/en/developers/docs/networks)
// for more details.
type BlockchainNode_EthereumDetails_Network int32

const (
	// The network has not been specified, but should be.
	BlockchainNode_EthereumDetails_NETWORK_UNSPECIFIED BlockchainNode_EthereumDetails_Network = 0
	// The Ethereum Mainnet.
	BlockchainNode_EthereumDetails_MAINNET BlockchainNode_EthereumDetails_Network = 1
	// Deprecated: The Ethereum Testnet based on Goerli protocol. Please
	// use another test network.
	//
	// Deprecated: Marked as deprecated in google/cloud/blockchainnodeengine/v1/blockchainnodeengine.proto.
	BlockchainNode_EthereumDetails_TESTNET_GOERLI_PRATER BlockchainNode_EthereumDetails_Network = 2
	// The Ethereum Testnet based on Sepolia/Bepolia protocol.
	// See https://github.com/eth-clients/sepolia.
	BlockchainNode_EthereumDetails_TESTNET_SEPOLIA BlockchainNode_EthereumDetails_Network = 3
	// The Ethereum Testnet based on Holesky specification.
	// See https://github.com/eth-clients/holesky.
	BlockchainNode_EthereumDetails_TESTNET_HOLESKY BlockchainNode_EthereumDetails_Network = 4
)

// Enum value maps for BlockchainNode_EthereumDetails_Network.
var (
	BlockchainNode_EthereumDetails_Network_name = map[int32]string{
		0: "NETWORK_UNSPECIFIED",
		1: "MAINNET",
		2: "TESTNET_GOERLI_PRATER",
		3: "TESTNET_SEPOLIA",
		4: "TESTNET_HOLESKY",
	}
	BlockchainNode_EthereumDetails_Network_value = map[string]int32{
		"NETWORK_UNSPECIFIED":   0,
		"MAINNET":               1,
		"TESTNET_GOERLI_PRATER": 2,
		"TESTNET_SEPOLIA":       3,
		"TESTNET_HOLESKY":       4,
	}
)

func (x BlockchainNode_EthereumDetails_Network) Enum() *BlockchainNode_EthereumDetails_Network {
	p := new(BlockchainNode_EthereumDetails_Network)
	*p = x
	return p
}

func (x BlockchainNode_EthereumDetails_Network) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_EthereumDetails_Network) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[2].Descriptor()
}

func (BlockchainNode_EthereumDetails_Network) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[2]
}

func (x BlockchainNode_EthereumDetails_Network) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_Network.Descriptor instead.
func (BlockchainNode_EthereumDetails_Network) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 0}
}

// The type of Ethereum node.
//
// See
// [Node
// Types](https://ethereum.org/en/developers/docs/nodes-and-clients/#node-types)
// for more details.
type BlockchainNode_EthereumDetails_NodeType int32

const (
	// Node type has not been specified, but should be.
	BlockchainNode_EthereumDetails_NODE_TYPE_UNSPECIFIED BlockchainNode_EthereumDetails_NodeType = 0
	// An Ethereum node that only downloads Ethereum block headers.
	BlockchainNode_EthereumDetails_LIGHT BlockchainNode_EthereumDetails_NodeType = 1
	// Keeps a complete copy of the blockchain data, and contributes to the
	// network by receiving, validating, and forwarding transactions.
	BlockchainNode_EthereumDetails_FULL BlockchainNode_EthereumDetails_NodeType = 2
	// Holds the same data as full node as well as all of the blockchain's
	// history state data dating back to the Genesis Block.
	BlockchainNode_EthereumDetails_ARCHIVE BlockchainNode_EthereumDetails_NodeType = 3
)

// Enum value maps for BlockchainNode_EthereumDetails_NodeType.
var (
	BlockchainNode_EthereumDetails_NodeType_name = map[int32]string{
		0: "NODE_TYPE_UNSPECIFIED",
		1: "LIGHT",
		2: "FULL",
		3: "ARCHIVE",
	}
	BlockchainNode_EthereumDetails_NodeType_value = map[string]int32{
		"NODE_TYPE_UNSPECIFIED": 0,
		"LIGHT":                 1,
		"FULL":                  2,
		"ARCHIVE":               3,
	}
)

func (x BlockchainNode_EthereumDetails_NodeType) Enum() *BlockchainNode_EthereumDetails_NodeType {
	p := new(BlockchainNode_EthereumDetails_NodeType)
	*p = x
	return p
}

func (x BlockchainNode_EthereumDetails_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_EthereumDetails_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[3].Descriptor()
}

func (BlockchainNode_EthereumDetails_NodeType) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[3]
}

func (x BlockchainNode_EthereumDetails_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_NodeType.Descriptor instead.
func (BlockchainNode_EthereumDetails_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 1}
}

// The execution client (i.e., Execution Engine or EL client) listens to new
// transactions broadcast in the network, executes them in EVM, and holds
// the latest state and database of all current Ethereum data.
//
// See
// [What are nodes and
// clients?](https://ethereum.org/en/developers/docs/nodes-and-clients/#what-are-nodes-and-clients)
// for more details.
type BlockchainNode_EthereumDetails_ExecutionClient int32

const (
	// Execution client has not been specified, but should be.
	BlockchainNode_EthereumDetails_EXECUTION_CLIENT_UNSPECIFIED BlockchainNode_EthereumDetails_ExecutionClient = 0
	// Official Go implementation of the Ethereum protocol.
	// See [go-ethereum](https://geth.ethereum.org/) for details.
	BlockchainNode_EthereumDetails_GETH BlockchainNode_EthereumDetails_ExecutionClient = 1
	// An implementation of Ethereum (execution client), on the efficiency
	// frontier, written in Go. See [Erigon on
	// GitHub](https://github.com/ledgerwatch/erigon) for details.
	BlockchainNode_EthereumDetails_ERIGON BlockchainNode_EthereumDetails_ExecutionClient = 2
)

// Enum value maps for BlockchainNode_EthereumDetails_ExecutionClient.
var (
	BlockchainNode_EthereumDetails_ExecutionClient_name = map[int32]string{
		0: "EXECUTION_CLIENT_UNSPECIFIED",
		1: "GETH",
		2: "ERIGON",
	}
	BlockchainNode_EthereumDetails_ExecutionClient_value = map[string]int32{
		"EXECUTION_CLIENT_UNSPECIFIED": 0,
		"GETH":                         1,
		"ERIGON":                       2,
	}
)

func (x BlockchainNode_EthereumDetails_ExecutionClient) Enum() *BlockchainNode_EthereumDetails_ExecutionClient {
	p := new(BlockchainNode_EthereumDetails_ExecutionClient)
	*p = x
	return p
}

func (x BlockchainNode_EthereumDetails_ExecutionClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_EthereumDetails_ExecutionClient) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[4].Descriptor()
}

func (BlockchainNode_EthereumDetails_ExecutionClient) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[4]
}

func (x BlockchainNode_EthereumDetails_ExecutionClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_ExecutionClient.Descriptor instead.
func (BlockchainNode_EthereumDetails_ExecutionClient) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 2}
}

// The consensus client (also referred to as beacon node or CL client)
// implements the proof-of-stake consensus algorithm, which enables the
// network to achieve agreement based on validated data from the
// execution client.
//
// See
// [What are nodes and
// clients?](https://ethereum.org/en/developers/docs/nodes-and-clients/#what-are-nodes-and-clients)
// for more details.
type BlockchainNode_EthereumDetails_ConsensusClient int32

const (
	// Consensus client has not been specified, but should be.
	BlockchainNode_EthereumDetails_CONSENSUS_CLIENT_UNSPECIFIED BlockchainNode_EthereumDetails_ConsensusClient = 0
	// Consensus client implementation written in Rust, maintained by Sigma
	// Prime. See [Lighthouse - Sigma
	// Prime](https://lighthouse.sigmaprime.io/) for details.
	BlockchainNode_EthereumDetails_LIGHTHOUSE BlockchainNode_EthereumDetails_ConsensusClient = 1
)

// Enum value maps for BlockchainNode_EthereumDetails_ConsensusClient.
var (
	BlockchainNode_EthereumDetails_ConsensusClient_name = map[int32]string{
		0: "CONSENSUS_CLIENT_UNSPECIFIED",
		1: "LIGHTHOUSE",
	}
	BlockchainNode_EthereumDetails_ConsensusClient_value = map[string]int32{
		"CONSENSUS_CLIENT_UNSPECIFIED": 0,
		"LIGHTHOUSE":                   1,
	}
)

func (x BlockchainNode_EthereumDetails_ConsensusClient) Enum() *BlockchainNode_EthereumDetails_ConsensusClient {
	p := new(BlockchainNode_EthereumDetails_ConsensusClient)
	*p = x
	return p
}

func (x BlockchainNode_EthereumDetails_ConsensusClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_EthereumDetails_ConsensusClient) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[5].Descriptor()
}

func (BlockchainNode_EthereumDetails_ConsensusClient) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[5]
}

func (x BlockchainNode_EthereumDetails_ConsensusClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_ConsensusClient.Descriptor instead.
func (BlockchainNode_EthereumDetails_ConsensusClient) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 3}
}

// Blockchain garbage collection modes. Only applicable when `NodeType` is
// `FULL` or `ARCHIVE`.
type BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode int32

const (
	// The garbage collection has not been specified.
	BlockchainNode_EthereumDetails_GethDetails_GARBAGE_COLLECTION_MODE_UNSPECIFIED BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode = 0
	// Configures Geth's garbage collection so that older data not needed
	// for a full node is deleted. This is the default mode when creating a
	// full node.
	BlockchainNode_EthereumDetails_GethDetails_FULL BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode = 1
	// Configures Geth's garbage collection so that old data is never
	// deleted. This is the default mode when creating an archive node. This
	// value can also be chosen when creating a full node in order to create
	// a partial/recent archive node. See
	// [Sync modes](https://geth.ethereum.org/docs/fundamentals/sync-modes)
	// for more details.
	BlockchainNode_EthereumDetails_GethDetails_ARCHIVE BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode = 2
)

// Enum value maps for BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode.
var (
	BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode_name = map[int32]string{
		0: "GARBAGE_COLLECTION_MODE_UNSPECIFIED",
		1: "FULL",
		2: "ARCHIVE",
	}
	BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode_value = map[string]int32{
		"GARBAGE_COLLECTION_MODE_UNSPECIFIED": 0,
		"FULL":                                1,
		"ARCHIVE":                             2,
	}
)

func (x BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) Enum() *BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode {
	p := new(BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode)
	*p = x
	return p
}

func (x BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[6].Descriptor()
}

func (BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) Type() protoreflect.EnumType {
	return &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes[6]
}

func (x BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode.Descriptor instead.
func (BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

// A representation of a blockchain node.
type BlockchainNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information that is specific to a particular blockchain type.
	//
	// Types that are assignable to BlockchainTypeDetails:
	//
	//	*BlockchainNode_EthereumDetails_
	BlockchainTypeDetails isBlockchainNode_BlockchainTypeDetails `protobuf_oneof:"blockchain_type_details"`
	// Output only. The fully qualified name of the blockchain node.
	// e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The timestamp at which the blockchain node was first created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The timestamp at which the blockchain node was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// User-provided key-value pairs.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Immutable. The blockchain type of the node.
	BlockchainType *BlockchainNode_BlockchainType `protobuf:"varint,5,opt,name=blockchain_type,json=blockchainType,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_BlockchainType,oneof" json:"blockchain_type,omitempty"`
	// Output only. The connection information used to interact with a blockchain
	// node.
	ConnectionInfo *BlockchainNode_ConnectionInfo `protobuf:"bytes,6,opt,name=connection_info,json=connectionInfo,proto3" json:"connection_info,omitempty"`
	// Output only. A status representing the state of the node.
	State BlockchainNode_State `protobuf:"varint,8,opt,name=state,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_State" json:"state,omitempty"`
	// Optional. When true, the node is only accessible via Private Service
	// Connect; no public endpoints are exposed. Otherwise, the node is only
	// accessible via public endpoints. Warning: Private Service Connect enabled
	// nodes may require a manual migration effort to remain compatible with
	// future versions of the product. If this feature is enabled, you will be
	// notified of these changes along with any required action to avoid
	// disruption. See https://cloud.google.com/vpc/docs/private-service-connect.
	PrivateServiceConnectEnabled bool `protobuf:"varint,12,opt,name=private_service_connect_enabled,json=privateServiceConnectEnabled,proto3" json:"private_service_connect_enabled,omitempty"`
}

func (x *BlockchainNode) Reset() {
	*x = BlockchainNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode) ProtoMessage() {}

func (x *BlockchainNode) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode.ProtoReflect.Descriptor instead.
func (*BlockchainNode) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0}
}

func (m *BlockchainNode) GetBlockchainTypeDetails() isBlockchainNode_BlockchainTypeDetails {
	if m != nil {
		return m.BlockchainTypeDetails
	}
	return nil
}

func (x *BlockchainNode) GetEthereumDetails() *BlockchainNode_EthereumDetails {
	if x, ok := x.GetBlockchainTypeDetails().(*BlockchainNode_EthereumDetails_); ok {
		return x.EthereumDetails
	}
	return nil
}

func (x *BlockchainNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BlockchainNode) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *BlockchainNode) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *BlockchainNode) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *BlockchainNode) GetBlockchainType() BlockchainNode_BlockchainType {
	if x != nil && x.BlockchainType != nil {
		return *x.BlockchainType
	}
	return BlockchainNode_BLOCKCHAIN_TYPE_UNSPECIFIED
}

func (x *BlockchainNode) GetConnectionInfo() *BlockchainNode_ConnectionInfo {
	if x != nil {
		return x.ConnectionInfo
	}
	return nil
}

func (x *BlockchainNode) GetState() BlockchainNode_State {
	if x != nil {
		return x.State
	}
	return BlockchainNode_STATE_UNSPECIFIED
}

func (x *BlockchainNode) GetPrivateServiceConnectEnabled() bool {
	if x != nil {
		return x.PrivateServiceConnectEnabled
	}
	return false
}

type isBlockchainNode_BlockchainTypeDetails interface {
	isBlockchainNode_BlockchainTypeDetails()
}

type BlockchainNode_EthereumDetails_ struct {
	// Ethereum-specific blockchain node details.
	EthereumDetails *BlockchainNode_EthereumDetails `protobuf:"bytes,7,opt,name=ethereum_details,json=ethereumDetails,proto3,oneof"`
}

func (*BlockchainNode_EthereumDetails_) isBlockchainNode_BlockchainTypeDetails() {}

// Message for requesting list of blockchain nodes.
type ListBlockchainNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Parent value for `ListNodesRequest`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Requested page size. Server may return fewer items than requested.
	// If unspecified, server will pick an appropriate default.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A token identifying a page of results the server should return.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filtering results.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Hint for how to order the results.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ListBlockchainNodesRequest) Reset() {
	*x = ListBlockchainNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockchainNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockchainNodesRequest) ProtoMessage() {}

func (x *ListBlockchainNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockchainNodesRequest.ProtoReflect.Descriptor instead.
func (*ListBlockchainNodesRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{1}
}

func (x *ListBlockchainNodesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBlockchainNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBlockchainNodesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBlockchainNodesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListBlockchainNodesRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

// Message for response to listing blockchain nodes.
type ListBlockchainNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of nodes
	BlockchainNodes []*BlockchainNode `protobuf:"bytes,1,rep,name=blockchain_nodes,json=blockchainNodes,proto3" json:"blockchain_nodes,omitempty"`
	// A token identifying a page of results the server should return.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Locations that could not be reached.
	Unreachable []string `protobuf:"bytes,3,rep,name=unreachable,proto3" json:"unreachable,omitempty"`
}

func (x *ListBlockchainNodesResponse) Reset() {
	*x = ListBlockchainNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlockchainNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlockchainNodesResponse) ProtoMessage() {}

func (x *ListBlockchainNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlockchainNodesResponse.ProtoReflect.Descriptor instead.
func (*ListBlockchainNodesResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{2}
}

func (x *ListBlockchainNodesResponse) GetBlockchainNodes() []*BlockchainNode {
	if x != nil {
		return x.BlockchainNodes
	}
	return nil
}

func (x *ListBlockchainNodesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListBlockchainNodesResponse) GetUnreachable() []string {
	if x != nil {
		return x.Unreachable
	}
	return nil
}

// Message for getting a blockchain node.
type GetBlockchainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The fully qualified name of the blockchain node to fetch.
	// e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBlockchainNodeRequest) Reset() {
	*x = GetBlockchainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainNodeRequest) ProtoMessage() {}

func (x *GetBlockchainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainNodeRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainNodeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{3}
}

func (x *GetBlockchainNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Message for creating a blockchain node.
type CreateBlockchainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Value for parent.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. ID of the requesting object.
	BlockchainNodeId string `protobuf:"bytes,2,opt,name=blockchain_node_id,json=blockchainNodeId,proto3" json:"blockchain_node_id,omitempty"`
	// Required. The resource being created.
	BlockchainNode *BlockchainNode `protobuf:"bytes,3,opt,name=blockchain_node,json=blockchainNode,proto3" json:"blockchain_node,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CreateBlockchainNodeRequest) Reset() {
	*x = CreateBlockchainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBlockchainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBlockchainNodeRequest) ProtoMessage() {}

func (x *CreateBlockchainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBlockchainNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateBlockchainNodeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBlockchainNodeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBlockchainNodeRequest) GetBlockchainNodeId() string {
	if x != nil {
		return x.BlockchainNodeId
	}
	return ""
}

func (x *CreateBlockchainNodeRequest) GetBlockchainNode() *BlockchainNode {
	if x != nil {
		return x.BlockchainNode
	}
	return nil
}

func (x *CreateBlockchainNodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message for updating a blockchain node.
type UpdateBlockchainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Field mask is used to specify the fields to be overwritten in the
	// Blockchain node resource by the update.
	// The fields specified in the `update_mask` are relative to the resource, not
	// the full request. A field will be overwritten if it is in the mask. If the
	// user does not provide a mask then all fields will be overwritten.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,1,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Required. The resource being updated.
	BlockchainNode *BlockchainNode `protobuf:"bytes,2,opt,name=blockchain_node,json=blockchainNode,proto3" json:"blockchain_node,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes since the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *UpdateBlockchainNodeRequest) Reset() {
	*x = UpdateBlockchainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBlockchainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlockchainNodeRequest) ProtoMessage() {}

func (x *UpdateBlockchainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlockchainNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlockchainNodeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBlockchainNodeRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateBlockchainNodeRequest) GetBlockchainNode() *BlockchainNode {
	if x != nil {
		return x.BlockchainNode
	}
	return nil
}

func (x *UpdateBlockchainNodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message for deleting a blockchain node.
type DeleteBlockchainNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The fully qualified name of the blockchain node to delete.
	// e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional. An optional request ID to identify requests. Specify a unique
	// request ID so that if you must retry your request, the server will know to
	// ignore the request if it has already been completed. The server will
	// guarantee that for at least 60 minutes after the first request.
	//
	// For example, consider a situation where you make an initial request and
	// the request times out. If you make the request again with the same request
	// ID, the server can check if original operation with the same request ID
	// was received, and if so, will ignore the second request. This prevents
	// clients from accidentally creating duplicate commitments.
	//
	// The request ID must be a valid UUID with the exception that zero UUID is
	// not supported (00000000-0000-0000-0000-000000000000).
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteBlockchainNodeRequest) Reset() {
	*x = DeleteBlockchainNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBlockchainNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBlockchainNodeRequest) ProtoMessage() {}

func (x *DeleteBlockchainNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBlockchainNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteBlockchainNodeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteBlockchainNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBlockchainNodeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Represents the metadata of the long-running operation.
type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The time the operation was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time the operation finished running.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Output only. Server-defined resource path for the target of the operation.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Output only. Name of the verb executed by the operation.
	Verb string `protobuf:"bytes,4,opt,name=verb,proto3" json:"verb,omitempty"`
	// Output only. Human-readable status of the operation, if any.
	StatusMessage string `protobuf:"bytes,5,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Output only. Identifies whether the user has requested cancellation
	// of the operation. Operations that have been cancelled successfully
	// have `[Operation.error][]` value with a
	// `[google.rpc.Status.code][google.rpc.Status.code]` of `1`, corresponding to
	// `Code.CANCELLED`.
	RequestedCancellation bool `protobuf:"varint,6,opt,name=requested_cancellation,json=requestedCancellation,proto3" json:"requested_cancellation,omitempty"`
	// Output only. API version used to start the operation.
	ApiVersion string `protobuf:"bytes,7,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{7}
}

func (x *OperationMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *OperationMetadata) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *OperationMetadata) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *OperationMetadata) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *OperationMetadata) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *OperationMetadata) GetRequestedCancellation() bool {
	if x != nil {
		return x.RequestedCancellation
	}
	return false
}

func (x *OperationMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

// The connection information through which to interact with a blockchain
// node.
type BlockchainNode_ConnectionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The endpoint information through which to interact with a
	// blockchain node.
	EndpointInfo *BlockchainNode_ConnectionInfo_EndpointInfo `protobuf:"bytes,2,opt,name=endpoint_info,json=endpointInfo,proto3" json:"endpoint_info,omitempty"`
	// Output only. A service attachment that exposes a node, and has the
	// following format:
	// projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
	ServiceAttachment string `protobuf:"bytes,3,opt,name=service_attachment,json=serviceAttachment,proto3" json:"service_attachment,omitempty"`
}

func (x *BlockchainNode_ConnectionInfo) Reset() {
	*x = BlockchainNode_ConnectionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_ConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_ConnectionInfo) ProtoMessage() {}

func (x *BlockchainNode_ConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_ConnectionInfo.ProtoReflect.Descriptor instead.
func (*BlockchainNode_ConnectionInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BlockchainNode_ConnectionInfo) GetEndpointInfo() *BlockchainNode_ConnectionInfo_EndpointInfo {
	if x != nil {
		return x.EndpointInfo
	}
	return nil
}

func (x *BlockchainNode_ConnectionInfo) GetServiceAttachment() string {
	if x != nil {
		return x.ServiceAttachment
	}
	return ""
}

// Ethereum-specific blockchain node details.
type BlockchainNode_EthereumDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options for the execution client.
	//
	// Types that are assignable to ExecutionClientDetails:
	//
	//	*BlockchainNode_EthereumDetails_GethDetails_
	ExecutionClientDetails isBlockchainNode_EthereumDetails_ExecutionClientDetails `protobuf_oneof:"execution_client_details"`
	// Immutable. The Ethereum environment being accessed.
	Network *BlockchainNode_EthereumDetails_Network `protobuf:"varint,1,opt,name=network,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_EthereumDetails_Network,oneof" json:"network,omitempty"`
	// Immutable. The type of Ethereum node.
	NodeType *BlockchainNode_EthereumDetails_NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_EthereumDetails_NodeType,oneof" json:"node_type,omitempty"`
	// Immutable. The execution client
	ExecutionClient *BlockchainNode_EthereumDetails_ExecutionClient `protobuf:"varint,3,opt,name=execution_client,json=executionClient,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_EthereumDetails_ExecutionClient,oneof" json:"execution_client,omitempty"`
	// Immutable. The consensus client.
	ConsensusClient *BlockchainNode_EthereumDetails_ConsensusClient `protobuf:"varint,4,opt,name=consensus_client,json=consensusClient,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_EthereumDetails_ConsensusClient,oneof" json:"consensus_client,omitempty"`
	// Immutable. Enables JSON-RPC access to functions in the `admin` namespace.
	// Defaults to `false`.
	ApiEnableAdmin *bool `protobuf:"varint,5,opt,name=api_enable_admin,json=apiEnableAdmin,proto3,oneof" json:"api_enable_admin,omitempty"`
	// Immutable. Enables JSON-RPC access to functions in the `debug` namespace.
	// Defaults to `false`.
	ApiEnableDebug *bool `protobuf:"varint,6,opt,name=api_enable_debug,json=apiEnableDebug,proto3,oneof" json:"api_enable_debug,omitempty"`
	// Output only. Ethereum-specific endpoint information.
	AdditionalEndpoints *BlockchainNode_EthereumDetails_EthereumEndpoints `protobuf:"bytes,7,opt,name=additional_endpoints,json=additionalEndpoints,proto3,oneof" json:"additional_endpoints,omitempty"`
	// Configuration for validator-related parameters on the beacon client,
	// and for any GCP-managed validator client.
	ValidatorConfig *BlockchainNode_EthereumDetails_ValidatorConfig `protobuf:"bytes,10,opt,name=validator_config,json=validatorConfig,proto3,oneof" json:"validator_config,omitempty"`
}

func (x *BlockchainNode_EthereumDetails) Reset() {
	*x = BlockchainNode_EthereumDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_EthereumDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_EthereumDetails) ProtoMessage() {}

func (x *BlockchainNode_EthereumDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails.ProtoReflect.Descriptor instead.
func (*BlockchainNode_EthereumDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1}
}

func (m *BlockchainNode_EthereumDetails) GetExecutionClientDetails() isBlockchainNode_EthereumDetails_ExecutionClientDetails {
	if m != nil {
		return m.ExecutionClientDetails
	}
	return nil
}

func (x *BlockchainNode_EthereumDetails) GetGethDetails() *BlockchainNode_EthereumDetails_GethDetails {
	if x, ok := x.GetExecutionClientDetails().(*BlockchainNode_EthereumDetails_GethDetails_); ok {
		return x.GethDetails
	}
	return nil
}

func (x *BlockchainNode_EthereumDetails) GetNetwork() BlockchainNode_EthereumDetails_Network {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return BlockchainNode_EthereumDetails_NETWORK_UNSPECIFIED
}

func (x *BlockchainNode_EthereumDetails) GetNodeType() BlockchainNode_EthereumDetails_NodeType {
	if x != nil && x.NodeType != nil {
		return *x.NodeType
	}
	return BlockchainNode_EthereumDetails_NODE_TYPE_UNSPECIFIED
}

func (x *BlockchainNode_EthereumDetails) GetExecutionClient() BlockchainNode_EthereumDetails_ExecutionClient {
	if x != nil && x.ExecutionClient != nil {
		return *x.ExecutionClient
	}
	return BlockchainNode_EthereumDetails_EXECUTION_CLIENT_UNSPECIFIED
}

func (x *BlockchainNode_EthereumDetails) GetConsensusClient() BlockchainNode_EthereumDetails_ConsensusClient {
	if x != nil && x.ConsensusClient != nil {
		return *x.ConsensusClient
	}
	return BlockchainNode_EthereumDetails_CONSENSUS_CLIENT_UNSPECIFIED
}

func (x *BlockchainNode_EthereumDetails) GetApiEnableAdmin() bool {
	if x != nil && x.ApiEnableAdmin != nil {
		return *x.ApiEnableAdmin
	}
	return false
}

func (x *BlockchainNode_EthereumDetails) GetApiEnableDebug() bool {
	if x != nil && x.ApiEnableDebug != nil {
		return *x.ApiEnableDebug
	}
	return false
}

func (x *BlockchainNode_EthereumDetails) GetAdditionalEndpoints() *BlockchainNode_EthereumDetails_EthereumEndpoints {
	if x != nil {
		return x.AdditionalEndpoints
	}
	return nil
}

func (x *BlockchainNode_EthereumDetails) GetValidatorConfig() *BlockchainNode_EthereumDetails_ValidatorConfig {
	if x != nil {
		return x.ValidatorConfig
	}
	return nil
}

type isBlockchainNode_EthereumDetails_ExecutionClientDetails interface {
	isBlockchainNode_EthereumDetails_ExecutionClientDetails()
}

type BlockchainNode_EthereumDetails_GethDetails_ struct {
	// Details for the Geth execution client.
	GethDetails *BlockchainNode_EthereumDetails_GethDetails `protobuf:"bytes,8,opt,name=geth_details,json=gethDetails,proto3,oneof"`
}

func (*BlockchainNode_EthereumDetails_GethDetails_) isBlockchainNode_EthereumDetails_ExecutionClientDetails() {
}

// Contains endpoint information through which to interact with a blockchain
// node.
type BlockchainNode_ConnectionInfo_EndpointInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The assigned URL for the node JSON-RPC API endpoint.
	JsonRpcApiEndpoint string `protobuf:"bytes,1,opt,name=json_rpc_api_endpoint,json=jsonRpcApiEndpoint,proto3" json:"json_rpc_api_endpoint,omitempty"`
	// Output only. The assigned URL for the node WebSockets API endpoint.
	WebsocketsApiEndpoint string `protobuf:"bytes,2,opt,name=websockets_api_endpoint,json=websocketsApiEndpoint,proto3" json:"websockets_api_endpoint,omitempty"`
}

func (x *BlockchainNode_ConnectionInfo_EndpointInfo) Reset() {
	*x = BlockchainNode_ConnectionInfo_EndpointInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_ConnectionInfo_EndpointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_ConnectionInfo_EndpointInfo) ProtoMessage() {}

func (x *BlockchainNode_ConnectionInfo_EndpointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_ConnectionInfo_EndpointInfo.ProtoReflect.Descriptor instead.
func (*BlockchainNode_ConnectionInfo_EndpointInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *BlockchainNode_ConnectionInfo_EndpointInfo) GetJsonRpcApiEndpoint() string {
	if x != nil {
		return x.JsonRpcApiEndpoint
	}
	return ""
}

func (x *BlockchainNode_ConnectionInfo_EndpointInfo) GetWebsocketsApiEndpoint() string {
	if x != nil {
		return x.WebsocketsApiEndpoint
	}
	return ""
}

// Options for the Geth execution client.
//
// See [Command-line
// Options](https://geth.ethereum.org/docs/fundamentals/command-line-options)
// for more details.
type BlockchainNode_EthereumDetails_GethDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Immutable. Blockchain garbage collection mode.
	GarbageCollectionMode *BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode `protobuf:"varint,1,opt,name=garbage_collection_mode,json=garbageCollectionMode,proto3,enum=google.cloud.blockchainnodeengine.v1.BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode,oneof" json:"garbage_collection_mode,omitempty"`
}

func (x *BlockchainNode_EthereumDetails_GethDetails) Reset() {
	*x = BlockchainNode_EthereumDetails_GethDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_EthereumDetails_GethDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_EthereumDetails_GethDetails) ProtoMessage() {}

func (x *BlockchainNode_EthereumDetails_GethDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_GethDetails.ProtoReflect.Descriptor instead.
func (*BlockchainNode_EthereumDetails_GethDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *BlockchainNode_EthereumDetails_GethDetails) GetGarbageCollectionMode() BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode {
	if x != nil && x.GarbageCollectionMode != nil {
		return *x.GarbageCollectionMode
	}
	return BlockchainNode_EthereumDetails_GethDetails_GARBAGE_COLLECTION_MODE_UNSPECIFIED
}

// Contains endpoint information specific to Ethereum nodes.
type BlockchainNode_EthereumDetails_EthereumEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The assigned URL for the node's Beacon API endpoint.
	BeaconApiEndpoint string `protobuf:"bytes,1,opt,name=beacon_api_endpoint,json=beaconApiEndpoint,proto3" json:"beacon_api_endpoint,omitempty"`
	// Output only. The assigned URL for the node's Beacon Prometheus metrics
	// endpoint. See [Prometheus
	// Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html)
	// for more details.
	BeaconPrometheusMetricsApiEndpoint string `protobuf:"bytes,2,opt,name=beacon_prometheus_metrics_api_endpoint,json=beaconPrometheusMetricsApiEndpoint,proto3" json:"beacon_prometheus_metrics_api_endpoint,omitempty"`
	// Output only. The assigned URL for the node's execution client's
	// Prometheus metrics endpoint.
	ExecutionClientPrometheusMetricsApiEndpoint string `protobuf:"bytes,3,opt,name=execution_client_prometheus_metrics_api_endpoint,json=executionClientPrometheusMetricsApiEndpoint,proto3" json:"execution_client_prometheus_metrics_api_endpoint,omitempty"`
}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) Reset() {
	*x = BlockchainNode_EthereumDetails_EthereumEndpoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_EthereumDetails_EthereumEndpoints) ProtoMessage() {}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_EthereumEndpoints.ProtoReflect.Descriptor instead.
func (*BlockchainNode_EthereumDetails_EthereumEndpoints) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) GetBeaconApiEndpoint() string {
	if x != nil {
		return x.BeaconApiEndpoint
	}
	return ""
}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) GetBeaconPrometheusMetricsApiEndpoint() string {
	if x != nil {
		return x.BeaconPrometheusMetricsApiEndpoint
	}
	return ""
}

func (x *BlockchainNode_EthereumDetails_EthereumEndpoints) GetExecutionClientPrometheusMetricsApiEndpoint() string {
	if x != nil {
		return x.ExecutionClientPrometheusMetricsApiEndpoint
	}
	return ""
}

// Configuration for validator-related parameters on the beacon client,
// and for any GCP-managed validator client.
type BlockchainNode_EthereumDetails_ValidatorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URLs for MEV-relay services to use for block building. When set, a
	// GCP-managed MEV-boost service is configured on the beacon client.
	MevRelayUrls []string `protobuf:"bytes,1,rep,name=mev_relay_urls,json=mevRelayUrls,proto3" json:"mev_relay_urls,omitempty"`
	// Immutable. When true, deploys a GCP-managed validator client alongside
	// the beacon client.
	ManagedValidatorClient bool `protobuf:"varint,2,opt,name=managed_validator_client,json=managedValidatorClient,proto3" json:"managed_validator_client,omitempty"`
	// An Ethereum address which the beacon client will send fee rewards to if
	// no recipient is configured in the validator client.
	//
	// See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html
	// or https://docs.prylabs.network/docs/execution-node/fee-recipient for
	// examples of how this is used.
	//
	// Note that while this is often described as "suggested", as we run the
	// execution node we can trust the execution node, and therefore this is
	// considered enforced.
	BeaconFeeRecipient *string `protobuf:"bytes,3,opt,name=beacon_fee_recipient,json=beaconFeeRecipient,proto3,oneof" json:"beacon_fee_recipient,omitempty"`
}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) Reset() {
	*x = BlockchainNode_EthereumDetails_ValidatorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockchainNode_EthereumDetails_ValidatorConfig) ProtoMessage() {}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockchainNode_EthereumDetails_ValidatorConfig.ProtoReflect.Descriptor instead.
func (*BlockchainNode_EthereumDetails_ValidatorConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) GetMevRelayUrls() []string {
	if x != nil {
		return x.MevRelayUrls
	}
	return nil
}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) GetManagedValidatorClient() bool {
	if x != nil {
		return x.ManagedValidatorClient
	}
	return false
}

func (x *BlockchainNode_EthereumDetails_ValidatorConfig) GetBeaconFeeRecipient() string {
	if x != nil && x.BeaconFeeRecipient != nil {
		return *x.BeaconFeeRecipient
	}
	return ""
}

var File_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto protoreflect.FileDescriptor

var file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x24, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb5, 0x1e, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x76, 0x0a, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x48,
	0x01, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x71, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x1f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x1c, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xc6, 0x02, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7a, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x83, 0x01,
	0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x15, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x12, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x70, 0x63, 0x41, 0x70, 0x69, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x1a, 0xa1, 0x12, 0x0a, 0x0f, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x68, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48,
	0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x70,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x03, 0xe0,
	0x41, 0x05, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x12, 0x74, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65,
	0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x48, 0x02, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x48, 0x03, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x48, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x48, 0x05, 0x52,
	0x0e, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x05, 0x48, 0x06, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x88, 0x01, 0x01, 0x12, 0x93, 0x01, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x48, 0x07, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x84, 0x01, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x08, 0x52,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x88, 0x01, 0x01, 0x1a, 0xad, 0x02, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x68, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x17, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x66, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e,
	0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x05, 0x48, 0x00, 0x52, 0x15, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x22, 0x57,
	0x0a, 0x15, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x47, 0x41, 0x52, 0x42, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x67, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x1a, 0x8d, 0x02, 0x0a, 0x11, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x57,
	0x0a, 0x26, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68,
	0x65, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x70, 0x69, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x22, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x6a, 0x0a, 0x30, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x2b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75,
	0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x41, 0x70, 0x69, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x1a, 0xc6, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x76, 0x5f, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x76, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x18, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x05, 0x52, 0x16, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x14,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x78, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x15, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x47, 0x4f, 0x45, 0x52, 0x4c, 0x49, 0x5f,
	0x50, 0x52, 0x41, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x41, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x53, 0x54, 0x4e, 0x45, 0x54, 0x5f, 0x48, 0x4f, 0x4c,
	0x45, 0x53, 0x4b, 0x59, 0x10, 0x04, 0x22, 0x47, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x03, 0x22,
	0x49, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x45, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x52, 0x49, 0x47, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x43, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x1c, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x42,
	0x1a, 0x0a, 0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3f, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41,
	0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52, 0x45, 0x55,
	0x4d, 0x10, 0x01, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e,
	0x47, 0x10, 0x09, 0x3a, 0x82, 0x01, 0xea, 0x41, 0x7f, 0x0a, 0x32, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x7d, 0x42, 0x19, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x12, 0x32,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64,
	0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x6a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x0a, 0x32, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xac, 0x02, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x12, 0x32, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0xe7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x62, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x34, 0x0a,
	0x32, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0xd5, 0x02,
	0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x17,
	0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0xc8, 0x0a, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0xe0,
	0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0xda, 0x41, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0xcd, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x42, 0xda,
	0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0x99, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0xca,
	0x41, 0x23, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x29, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69,
	0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x3a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x9b, 0x02,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0xca, 0x41, 0x23, 0x0a, 0x0e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x11,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xda, 0x41, 0x1b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x56, 0x3a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x32, 0x43, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xe9, 0x01, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f,
	0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0xca, 0x41, 0x2a, 0x0a, 0x15, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x35, 0x2a, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x1a, 0x57, 0xca, 0x41, 0x23, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2,
	0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74,
	0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x9d, 0x02, 0x0a, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x19, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5c, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70,
	0x62, 0x3b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6e, 0x6f, 0x64, 0x65,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x27, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a,
	0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescOnce sync.Once
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescData = file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDesc
)

func file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescGZIP() []byte {
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescOnce.Do(func() {
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescData)
	})
	return file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDescData
}

var file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_goTypes = []any{
	(BlockchainNode_BlockchainType)(0),                                    // 0: google.cloud.blockchainnodeengine.v1.BlockchainNode.BlockchainType
	(BlockchainNode_State)(0),                                             // 1: google.cloud.blockchainnodeengine.v1.BlockchainNode.State
	(BlockchainNode_EthereumDetails_Network)(0),                           // 2: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.Network
	(BlockchainNode_EthereumDetails_NodeType)(0),                          // 3: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.NodeType
	(BlockchainNode_EthereumDetails_ExecutionClient)(0),                   // 4: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ExecutionClient
	(BlockchainNode_EthereumDetails_ConsensusClient)(0),                   // 5: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ConsensusClient
	(BlockchainNode_EthereumDetails_GethDetails_GarbageCollectionMode)(0), // 6: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.GethDetails.GarbageCollectionMode
	(*BlockchainNode)(nil),                                                // 7: google.cloud.blockchainnodeengine.v1.BlockchainNode
	(*ListBlockchainNodesRequest)(nil),                                    // 8: google.cloud.blockchainnodeengine.v1.ListBlockchainNodesRequest
	(*ListBlockchainNodesResponse)(nil),                                   // 9: google.cloud.blockchainnodeengine.v1.ListBlockchainNodesResponse
	(*GetBlockchainNodeRequest)(nil),                                      // 10: google.cloud.blockchainnodeengine.v1.GetBlockchainNodeRequest
	(*CreateBlockchainNodeRequest)(nil),                                   // 11: google.cloud.blockchainnodeengine.v1.CreateBlockchainNodeRequest
	(*UpdateBlockchainNodeRequest)(nil),                                   // 12: google.cloud.blockchainnodeengine.v1.UpdateBlockchainNodeRequest
	(*DeleteBlockchainNodeRequest)(nil),                                   // 13: google.cloud.blockchainnodeengine.v1.DeleteBlockchainNodeRequest
	(*OperationMetadata)(nil),                                             // 14: google.cloud.blockchainnodeengine.v1.OperationMetadata
	(*BlockchainNode_ConnectionInfo)(nil),                                 // 15: google.cloud.blockchainnodeengine.v1.BlockchainNode.ConnectionInfo
	(*BlockchainNode_EthereumDetails)(nil),                                // 16: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails
	nil,                                                                   // 17: google.cloud.blockchainnodeengine.v1.BlockchainNode.LabelsEntry
	(*BlockchainNode_ConnectionInfo_EndpointInfo)(nil),                    // 18: google.cloud.blockchainnodeengine.v1.BlockchainNode.ConnectionInfo.EndpointInfo
	(*BlockchainNode_EthereumDetails_GethDetails)(nil),                    // 19: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.GethDetails
	(*BlockchainNode_EthereumDetails_EthereumEndpoints)(nil),              // 20: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.EthereumEndpoints
	(*BlockchainNode_EthereumDetails_ValidatorConfig)(nil),                // 21: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ValidatorConfig
	(*timestamppb.Timestamp)(nil),                                         // 22: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                                         // 23: google.protobuf.FieldMask
	(*longrunningpb.Operation)(nil),                                       // 24: google.longrunning.Operation
}
var file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_depIdxs = []int32{
	16, // 0: google.cloud.blockchainnodeengine.v1.BlockchainNode.ethereum_details:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails
	22, // 1: google.cloud.blockchainnodeengine.v1.BlockchainNode.create_time:type_name -> google.protobuf.Timestamp
	22, // 2: google.cloud.blockchainnodeengine.v1.BlockchainNode.update_time:type_name -> google.protobuf.Timestamp
	17, // 3: google.cloud.blockchainnodeengine.v1.BlockchainNode.labels:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.LabelsEntry
	0,  // 4: google.cloud.blockchainnodeengine.v1.BlockchainNode.blockchain_type:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.BlockchainType
	15, // 5: google.cloud.blockchainnodeengine.v1.BlockchainNode.connection_info:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.ConnectionInfo
	1,  // 6: google.cloud.blockchainnodeengine.v1.BlockchainNode.state:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.State
	7,  // 7: google.cloud.blockchainnodeengine.v1.ListBlockchainNodesResponse.blockchain_nodes:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode
	7,  // 8: google.cloud.blockchainnodeengine.v1.CreateBlockchainNodeRequest.blockchain_node:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode
	23, // 9: google.cloud.blockchainnodeengine.v1.UpdateBlockchainNodeRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 10: google.cloud.blockchainnodeengine.v1.UpdateBlockchainNodeRequest.blockchain_node:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode
	22, // 11: google.cloud.blockchainnodeengine.v1.OperationMetadata.create_time:type_name -> google.protobuf.Timestamp
	22, // 12: google.cloud.blockchainnodeengine.v1.OperationMetadata.end_time:type_name -> google.protobuf.Timestamp
	18, // 13: google.cloud.blockchainnodeengine.v1.BlockchainNode.ConnectionInfo.endpoint_info:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.ConnectionInfo.EndpointInfo
	19, // 14: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.geth_details:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.GethDetails
	2,  // 15: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.network:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.Network
	3,  // 16: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.node_type:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.NodeType
	4,  // 17: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.execution_client:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ExecutionClient
	5,  // 18: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.consensus_client:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ConsensusClient
	20, // 19: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.additional_endpoints:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.EthereumEndpoints
	21, // 20: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.validator_config:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.ValidatorConfig
	6,  // 21: google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.GethDetails.garbage_collection_mode:type_name -> google.cloud.blockchainnodeengine.v1.BlockchainNode.EthereumDetails.GethDetails.GarbageCollectionMode
	8,  // 22: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.ListBlockchainNodes:input_type -> google.cloud.blockchainnodeengine.v1.ListBlockchainNodesRequest
	10, // 23: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.GetBlockchainNode:input_type -> google.cloud.blockchainnodeengine.v1.GetBlockchainNodeRequest
	11, // 24: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.CreateBlockchainNode:input_type -> google.cloud.blockchainnodeengine.v1.CreateBlockchainNodeRequest
	12, // 25: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.UpdateBlockchainNode:input_type -> google.cloud.blockchainnodeengine.v1.UpdateBlockchainNodeRequest
	13, // 26: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.DeleteBlockchainNode:input_type -> google.cloud.blockchainnodeengine.v1.DeleteBlockchainNodeRequest
	9,  // 27: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.ListBlockchainNodes:output_type -> google.cloud.blockchainnodeengine.v1.ListBlockchainNodesResponse
	7,  // 28: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.GetBlockchainNode:output_type -> google.cloud.blockchainnodeengine.v1.BlockchainNode
	24, // 29: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.CreateBlockchainNode:output_type -> google.longrunning.Operation
	24, // 30: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.UpdateBlockchainNode:output_type -> google.longrunning.Operation
	24, // 31: google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine.DeleteBlockchainNode:output_type -> google.longrunning.Operation
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_init() }
func file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_init() {
	if File_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ListBlockchainNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListBlockchainNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetBlockchainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CreateBlockchainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateBlockchainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteBlockchainNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*OperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_ConnectionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_EthereumDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_ConnectionInfo_EndpointInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_EthereumDetails_GethDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_EthereumDetails_EthereumEndpoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*BlockchainNode_EthereumDetails_ValidatorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[0].OneofWrappers = []any{
		(*BlockchainNode_EthereumDetails_)(nil),
	}
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[9].OneofWrappers = []any{
		(*BlockchainNode_EthereumDetails_GethDetails_)(nil),
	}
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[12].OneofWrappers = []any{}
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_goTypes,
		DependencyIndexes: file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_depIdxs,
		EnumInfos:         file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_enumTypes,
		MessageInfos:      file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_msgTypes,
	}.Build()
	File_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto = out.File
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_rawDesc = nil
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_goTypes = nil
	file_google_cloud_blockchainnodeengine_v1_blockchainnodeengine_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockchainNodeEngineClient is the client API for BlockchainNodeEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockchainNodeEngineClient interface {
	// Lists blockchain nodes in a given project and location.
	ListBlockchainNodes(ctx context.Context, in *ListBlockchainNodesRequest, opts ...grpc.CallOption) (*ListBlockchainNodesResponse, error)
	// Gets details of a single blockchain node.
	GetBlockchainNode(ctx context.Context, in *GetBlockchainNodeRequest, opts ...grpc.CallOption) (*BlockchainNode, error)
	// Creates a new blockchain node in a given project and location.
	CreateBlockchainNode(ctx context.Context, in *CreateBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Updates the parameters of a single blockchain node.
	UpdateBlockchainNode(ctx context.Context, in *UpdateBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
	// Deletes a single blockchain node.
	DeleteBlockchainNode(ctx context.Context, in *DeleteBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error)
}

type blockchainNodeEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockchainNodeEngineClient(cc grpc.ClientConnInterface) BlockchainNodeEngineClient {
	return &blockchainNodeEngineClient{cc}
}

func (c *blockchainNodeEngineClient) ListBlockchainNodes(ctx context.Context, in *ListBlockchainNodesRequest, opts ...grpc.CallOption) (*ListBlockchainNodesResponse, error) {
	out := new(ListBlockchainNodesResponse)
	err := c.cc.Invoke(ctx, "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/ListBlockchainNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainNodeEngineClient) GetBlockchainNode(ctx context.Context, in *GetBlockchainNodeRequest, opts ...grpc.CallOption) (*BlockchainNode, error) {
	out := new(BlockchainNode)
	err := c.cc.Invoke(ctx, "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/GetBlockchainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainNodeEngineClient) CreateBlockchainNode(ctx context.Context, in *CreateBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/CreateBlockchainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainNodeEngineClient) UpdateBlockchainNode(ctx context.Context, in *UpdateBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/UpdateBlockchainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockchainNodeEngineClient) DeleteBlockchainNode(ctx context.Context, in *DeleteBlockchainNodeRequest, opts ...grpc.CallOption) (*longrunningpb.Operation, error) {
	out := new(longrunningpb.Operation)
	err := c.cc.Invoke(ctx, "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/DeleteBlockchainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockchainNodeEngineServer is the server API for BlockchainNodeEngine service.
type BlockchainNodeEngineServer interface {
	// Lists blockchain nodes in a given project and location.
	ListBlockchainNodes(context.Context, *ListBlockchainNodesRequest) (*ListBlockchainNodesResponse, error)
	// Gets details of a single blockchain node.
	GetBlockchainNode(context.Context, *GetBlockchainNodeRequest) (*BlockchainNode, error)
	// Creates a new blockchain node in a given project and location.
	CreateBlockchainNode(context.Context, *CreateBlockchainNodeRequest) (*longrunningpb.Operation, error)
	// Updates the parameters of a single blockchain node.
	UpdateBlockchainNode(context.Context, *UpdateBlockchainNodeRequest) (*longrunningpb.Operation, error)
	// Deletes a single blockchain node.
	DeleteBlockchainNode(context.Context, *DeleteBlockchainNodeRequest) (*longrunningpb.Operation, error)
}

// UnimplementedBlockchainNodeEngineServer can be embedded to have forward compatible implementations.
type UnimplementedBlockchainNodeEngineServer struct {
}

func (*UnimplementedBlockchainNodeEngineServer) ListBlockchainNodes(context.Context, *ListBlockchainNodesRequest) (*ListBlockchainNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockchainNodes not implemented")
}
func (*UnimplementedBlockchainNodeEngineServer) GetBlockchainNode(context.Context, *GetBlockchainNodeRequest) (*BlockchainNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainNode not implemented")
}
func (*UnimplementedBlockchainNodeEngineServer) CreateBlockchainNode(context.Context, *CreateBlockchainNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlockchainNode not implemented")
}
func (*UnimplementedBlockchainNodeEngineServer) UpdateBlockchainNode(context.Context, *UpdateBlockchainNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlockchainNode not implemented")
}
func (*UnimplementedBlockchainNodeEngineServer) DeleteBlockchainNode(context.Context, *DeleteBlockchainNodeRequest) (*longrunningpb.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlockchainNode not implemented")
}

func RegisterBlockchainNodeEngineServer(s *grpc.Server, srv BlockchainNodeEngineServer) {
	s.RegisterService(&_BlockchainNodeEngine_serviceDesc, srv)
}

func _BlockchainNodeEngine_ListBlockchainNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockchainNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainNodeEngineServer).ListBlockchainNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/ListBlockchainNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainNodeEngineServer).ListBlockchainNodes(ctx, req.(*ListBlockchainNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainNodeEngine_GetBlockchainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainNodeEngineServer).GetBlockchainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/GetBlockchainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainNodeEngineServer).GetBlockchainNode(ctx, req.(*GetBlockchainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainNodeEngine_CreateBlockchainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlockchainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainNodeEngineServer).CreateBlockchainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/CreateBlockchainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainNodeEngineServer).CreateBlockchainNode(ctx, req.(*CreateBlockchainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainNodeEngine_UpdateBlockchainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlockchainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainNodeEngineServer).UpdateBlockchainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/UpdateBlockchainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainNodeEngineServer).UpdateBlockchainNode(ctx, req.(*UpdateBlockchainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockchainNodeEngine_DeleteBlockchainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlockchainNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockchainNodeEngineServer).DeleteBlockchainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine/DeleteBlockchainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockchainNodeEngineServer).DeleteBlockchainNode(ctx, req.(*DeleteBlockchainNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockchainNodeEngine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.blockchainnodeengine.v1.BlockchainNodeEngine",
	HandlerType: (*BlockchainNodeEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlockchainNodes",
			Handler:    _BlockchainNodeEngine_ListBlockchainNodes_Handler,
		},
		{
			MethodName: "GetBlockchainNode",
			Handler:    _BlockchainNodeEngine_GetBlockchainNode_Handler,
		},
		{
			MethodName: "CreateBlockchainNode",
			Handler:    _BlockchainNodeEngine_CreateBlockchainNode_Handler,
		},
		{
			MethodName: "UpdateBlockchainNode",
			Handler:    _BlockchainNodeEngine_UpdateBlockchainNode_Handler,
		},
		{
			MethodName: "DeleteBlockchainNode",
			Handler:    _BlockchainNodeEngine_DeleteBlockchainNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/blockchainnodeengine/v1/blockchainnodeengine.proto",
}
