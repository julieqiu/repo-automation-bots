// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/connectors/v1/ssl_config.proto

package connectorspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for controlling the SSL Type (TLS/MTLS)
type SslType int32

const (
	// No SSL configuration required.
	SslType_SSL_TYPE_UNSPECIFIED SslType = 0
	// TLS Handshake
	SslType_TLS SslType = 1
	// mutual TLS (MTLS) Handshake
	SslType_MTLS SslType = 2
)

// Enum value maps for SslType.
var (
	SslType_name = map[int32]string{
		0: "SSL_TYPE_UNSPECIFIED",
		1: "TLS",
		2: "MTLS",
	}
	SslType_value = map[string]int32{
		"SSL_TYPE_UNSPECIFIED": 0,
		"TLS":                  1,
		"MTLS":                 2,
	}
)

func (x SslType) Enum() *SslType {
	p := new(SslType)
	*p = x
	return p
}

func (x SslType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SslType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[0].Descriptor()
}

func (SslType) Type() protoreflect.EnumType {
	return &file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[0]
}

func (x SslType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SslType.Descriptor instead.
func (SslType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP(), []int{0}
}

// Enum for Cert Types
type CertType int32

const (
	// Cert type unspecified.
	CertType_CERT_TYPE_UNSPECIFIED CertType = 0
	// Privacy Enhanced Mail (PEM) Type
	CertType_PEM CertType = 1
)

// Enum value maps for CertType.
var (
	CertType_name = map[int32]string{
		0: "CERT_TYPE_UNSPECIFIED",
		1: "PEM",
	}
	CertType_value = map[string]int32{
		"CERT_TYPE_UNSPECIFIED": 0,
		"PEM":                   1,
	}
)

func (x CertType) Enum() *CertType {
	p := new(CertType)
	*p = x
	return p
}

func (x CertType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[1].Descriptor()
}

func (CertType) Type() protoreflect.EnumType {
	return &file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[1]
}

func (x CertType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertType.Descriptor instead.
func (CertType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP(), []int{1}
}

// Enum for Ttust Model
type SslConfig_TrustModel int32

const (
	// Public Trust Model. Takes the Default Java trust store.
	SslConfig_PUBLIC SslConfig_TrustModel = 0
	// Private Trust Model. Takes custom/private trust store.
	SslConfig_PRIVATE SslConfig_TrustModel = 1
	// Insecure Trust Model. Accept all certificates.
	SslConfig_INSECURE SslConfig_TrustModel = 2
)

// Enum value maps for SslConfig_TrustModel.
var (
	SslConfig_TrustModel_name = map[int32]string{
		0: "PUBLIC",
		1: "PRIVATE",
		2: "INSECURE",
	}
	SslConfig_TrustModel_value = map[string]int32{
		"PUBLIC":   0,
		"PRIVATE":  1,
		"INSECURE": 2,
	}
)

func (x SslConfig_TrustModel) Enum() *SslConfig_TrustModel {
	p := new(SslConfig_TrustModel)
	*p = x
	return p
}

func (x SslConfig_TrustModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SslConfig_TrustModel) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[2].Descriptor()
}

func (SslConfig_TrustModel) Type() protoreflect.EnumType {
	return &file_google_cloud_connectors_v1_ssl_config_proto_enumTypes[2]
}

func (x SslConfig_TrustModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SslConfig_TrustModel.Descriptor instead.
func (SslConfig_TrustModel) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP(), []int{1, 0}
}

// Ssl config details of a connector version
type SslConfigTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls the ssl type for the given connector version
	SslType SslType `protobuf:"varint,1,opt,name=ssl_type,json=sslType,proto3,enum=google.cloud.connectors.v1.SslType" json:"ssl_type,omitempty"`
	// Boolean for determining if the connector version mandates TLS.
	IsTlsMandatory bool `protobuf:"varint,2,opt,name=is_tls_mandatory,json=isTlsMandatory,proto3" json:"is_tls_mandatory,omitempty"`
	// List of supported Server Cert Types
	ServerCertType []CertType `protobuf:"varint,3,rep,packed,name=server_cert_type,json=serverCertType,proto3,enum=google.cloud.connectors.v1.CertType" json:"server_cert_type,omitempty"`
	// List of supported Client Cert Types
	ClientCertType []CertType `protobuf:"varint,4,rep,packed,name=client_cert_type,json=clientCertType,proto3,enum=google.cloud.connectors.v1.CertType" json:"client_cert_type,omitempty"`
	// Any additional fields that need to be rendered
	AdditionalVariables []*ConfigVariableTemplate `protobuf:"bytes,5,rep,name=additional_variables,json=additionalVariables,proto3" json:"additional_variables,omitempty"`
}

func (x *SslConfigTemplate) Reset() {
	*x = SslConfigTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SslConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SslConfigTemplate) ProtoMessage() {}

func (x *SslConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SslConfigTemplate.ProtoReflect.Descriptor instead.
func (*SslConfigTemplate) Descriptor() ([]byte, []int) {
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP(), []int{0}
}

func (x *SslConfigTemplate) GetSslType() SslType {
	if x != nil {
		return x.SslType
	}
	return SslType_SSL_TYPE_UNSPECIFIED
}

func (x *SslConfigTemplate) GetIsTlsMandatory() bool {
	if x != nil {
		return x.IsTlsMandatory
	}
	return false
}

func (x *SslConfigTemplate) GetServerCertType() []CertType {
	if x != nil {
		return x.ServerCertType
	}
	return nil
}

func (x *SslConfigTemplate) GetClientCertType() []CertType {
	if x != nil {
		return x.ClientCertType
	}
	return nil
}

func (x *SslConfigTemplate) GetAdditionalVariables() []*ConfigVariableTemplate {
	if x != nil {
		return x.AdditionalVariables
	}
	return nil
}

// SSL Configuration of a connection
type SslConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls the ssl type for the given connector version.
	Type SslType `protobuf:"varint,1,opt,name=type,proto3,enum=google.cloud.connectors.v1.SslType" json:"type,omitempty"`
	// Trust Model of the SSL connection
	TrustModel SslConfig_TrustModel `protobuf:"varint,2,opt,name=trust_model,json=trustModel,proto3,enum=google.cloud.connectors.v1.SslConfig_TrustModel" json:"trust_model,omitempty"`
	// Private Server Certificate. Needs to be specified if trust model is
	// `PRIVATE`.
	PrivateServerCertificate *Secret `protobuf:"bytes,3,opt,name=private_server_certificate,json=privateServerCertificate,proto3" json:"private_server_certificate,omitempty"`
	// Client Certificate
	ClientCertificate *Secret `protobuf:"bytes,4,opt,name=client_certificate,json=clientCertificate,proto3" json:"client_certificate,omitempty"`
	// Client Private Key
	ClientPrivateKey *Secret `protobuf:"bytes,5,opt,name=client_private_key,json=clientPrivateKey,proto3" json:"client_private_key,omitempty"`
	// Secret containing the passphrase protecting the Client Private Key
	ClientPrivateKeyPass *Secret `protobuf:"bytes,6,opt,name=client_private_key_pass,json=clientPrivateKeyPass,proto3" json:"client_private_key_pass,omitempty"`
	// Type of Server Cert (PEM/JKS/.. etc.)
	ServerCertType CertType `protobuf:"varint,7,opt,name=server_cert_type,json=serverCertType,proto3,enum=google.cloud.connectors.v1.CertType" json:"server_cert_type,omitempty"`
	// Type of Client Cert (PEM/JKS/.. etc.)
	ClientCertType CertType `protobuf:"varint,8,opt,name=client_cert_type,json=clientCertType,proto3,enum=google.cloud.connectors.v1.CertType" json:"client_cert_type,omitempty"`
	// Bool for enabling SSL
	UseSsl bool `protobuf:"varint,9,opt,name=use_ssl,json=useSsl,proto3" json:"use_ssl,omitempty"`
	// Additional SSL related field values
	AdditionalVariables []*ConfigVariable `protobuf:"bytes,10,rep,name=additional_variables,json=additionalVariables,proto3" json:"additional_variables,omitempty"`
}

func (x *SslConfig) Reset() {
	*x = SslConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SslConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SslConfig) ProtoMessage() {}

func (x *SslConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SslConfig.ProtoReflect.Descriptor instead.
func (*SslConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP(), []int{1}
}

func (x *SslConfig) GetType() SslType {
	if x != nil {
		return x.Type
	}
	return SslType_SSL_TYPE_UNSPECIFIED
}

func (x *SslConfig) GetTrustModel() SslConfig_TrustModel {
	if x != nil {
		return x.TrustModel
	}
	return SslConfig_PUBLIC
}

func (x *SslConfig) GetPrivateServerCertificate() *Secret {
	if x != nil {
		return x.PrivateServerCertificate
	}
	return nil
}

func (x *SslConfig) GetClientCertificate() *Secret {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

func (x *SslConfig) GetClientPrivateKey() *Secret {
	if x != nil {
		return x.ClientPrivateKey
	}
	return nil
}

func (x *SslConfig) GetClientPrivateKeyPass() *Secret {
	if x != nil {
		return x.ClientPrivateKeyPass
	}
	return nil
}

func (x *SslConfig) GetServerCertType() CertType {
	if x != nil {
		return x.ServerCertType
	}
	return CertType_CERT_TYPE_UNSPECIFIED
}

func (x *SslConfig) GetClientCertType() CertType {
	if x != nil {
		return x.ClientCertType
	}
	return CertType_CERT_TYPE_UNSPECIFIED
}

func (x *SslConfig) GetUseSsl() bool {
	if x != nil {
		return x.UseSsl
	}
	return false
}

func (x *SslConfig) GetAdditionalVariables() []*ConfigVariable {
	if x != nil {
		return x.AdditionalVariables
	}
	return nil
}

var File_google_cloud_connectors_v1_ssl_config_proto protoreflect.FileDescriptor

var file_google_cloud_connectors_v1_ssl_config_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x73, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x84, 0x03, 0x0a, 0x11, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x73, 0x73, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x73, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x74,
	0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x54, 0x6c, 0x73, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xc6, 0x06, 0x0a, 0x09, 0x53, 0x73,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x51, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x73, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x60, 0x0a, 0x1a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x18, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x59, 0x0a, 0x17, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x73, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x73, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x5d,
	0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x33, 0x0a,
	0x0a, 0x54, 0x72, 0x75, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x2a, 0x36, 0x0a, 0x07, 0x53, 0x73, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x54, 0x4c, 0x53, 0x10, 0x02, 0x2a, 0x2e, 0x0a, 0x08, 0x43, 0x65,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4d, 0x10, 0x01, 0x42, 0x72, 0x0a, 0x1e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x53, 0x73,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x70,
	0x62, 0x3b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_connectors_v1_ssl_config_proto_rawDescOnce sync.Once
	file_google_cloud_connectors_v1_ssl_config_proto_rawDescData = file_google_cloud_connectors_v1_ssl_config_proto_rawDesc
)

func file_google_cloud_connectors_v1_ssl_config_proto_rawDescGZIP() []byte {
	file_google_cloud_connectors_v1_ssl_config_proto_rawDescOnce.Do(func() {
		file_google_cloud_connectors_v1_ssl_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_connectors_v1_ssl_config_proto_rawDescData)
	})
	return file_google_cloud_connectors_v1_ssl_config_proto_rawDescData
}

var file_google_cloud_connectors_v1_ssl_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_google_cloud_connectors_v1_ssl_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_google_cloud_connectors_v1_ssl_config_proto_goTypes = []any{
	(SslType)(0),                   // 0: google.cloud.connectors.v1.SslType
	(CertType)(0),                  // 1: google.cloud.connectors.v1.CertType
	(SslConfig_TrustModel)(0),      // 2: google.cloud.connectors.v1.SslConfig.TrustModel
	(*SslConfigTemplate)(nil),      // 3: google.cloud.connectors.v1.SslConfigTemplate
	(*SslConfig)(nil),              // 4: google.cloud.connectors.v1.SslConfig
	(*ConfigVariableTemplate)(nil), // 5: google.cloud.connectors.v1.ConfigVariableTemplate
	(*Secret)(nil),                 // 6: google.cloud.connectors.v1.Secret
	(*ConfigVariable)(nil),         // 7: google.cloud.connectors.v1.ConfigVariable
}
var file_google_cloud_connectors_v1_ssl_config_proto_depIdxs = []int32{
	0,  // 0: google.cloud.connectors.v1.SslConfigTemplate.ssl_type:type_name -> google.cloud.connectors.v1.SslType
	1,  // 1: google.cloud.connectors.v1.SslConfigTemplate.server_cert_type:type_name -> google.cloud.connectors.v1.CertType
	1,  // 2: google.cloud.connectors.v1.SslConfigTemplate.client_cert_type:type_name -> google.cloud.connectors.v1.CertType
	5,  // 3: google.cloud.connectors.v1.SslConfigTemplate.additional_variables:type_name -> google.cloud.connectors.v1.ConfigVariableTemplate
	0,  // 4: google.cloud.connectors.v1.SslConfig.type:type_name -> google.cloud.connectors.v1.SslType
	2,  // 5: google.cloud.connectors.v1.SslConfig.trust_model:type_name -> google.cloud.connectors.v1.SslConfig.TrustModel
	6,  // 6: google.cloud.connectors.v1.SslConfig.private_server_certificate:type_name -> google.cloud.connectors.v1.Secret
	6,  // 7: google.cloud.connectors.v1.SslConfig.client_certificate:type_name -> google.cloud.connectors.v1.Secret
	6,  // 8: google.cloud.connectors.v1.SslConfig.client_private_key:type_name -> google.cloud.connectors.v1.Secret
	6,  // 9: google.cloud.connectors.v1.SslConfig.client_private_key_pass:type_name -> google.cloud.connectors.v1.Secret
	1,  // 10: google.cloud.connectors.v1.SslConfig.server_cert_type:type_name -> google.cloud.connectors.v1.CertType
	1,  // 11: google.cloud.connectors.v1.SslConfig.client_cert_type:type_name -> google.cloud.connectors.v1.CertType
	7,  // 12: google.cloud.connectors.v1.SslConfig.additional_variables:type_name -> google.cloud.connectors.v1.ConfigVariable
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_google_cloud_connectors_v1_ssl_config_proto_init() }
func file_google_cloud_connectors_v1_ssl_config_proto_init() {
	if File_google_cloud_connectors_v1_ssl_config_proto != nil {
		return
	}
	file_google_cloud_connectors_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SslConfigTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_connectors_v1_ssl_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SslConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_connectors_v1_ssl_config_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_connectors_v1_ssl_config_proto_goTypes,
		DependencyIndexes: file_google_cloud_connectors_v1_ssl_config_proto_depIdxs,
		EnumInfos:         file_google_cloud_connectors_v1_ssl_config_proto_enumTypes,
		MessageInfos:      file_google_cloud_connectors_v1_ssl_config_proto_msgTypes,
	}.Build()
	File_google_cloud_connectors_v1_ssl_config_proto = out.File
	file_google_cloud_connectors_v1_ssl_config_proto_rawDesc = nil
	file_google_cloud_connectors_v1_ssl_config_proto_goTypes = nil
	file_google_cloud_connectors_v1_ssl_config_proto_depIdxs = nil
}
