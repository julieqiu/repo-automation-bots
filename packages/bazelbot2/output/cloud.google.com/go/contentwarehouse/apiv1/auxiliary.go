// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package contentwarehouse

import (
	"context"
	"time"

	contentwarehousepb "cloud.google.com/go/contentwarehouse/apiv1/contentwarehousepb"
	"cloud.google.com/go/longrunning"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
)

// RunPipelineOperation manages a long-running operation from RunPipeline.
type RunPipelineOperation struct {
	lro      *longrunning.Operation
	pollPath string
}

// Wait blocks until the long-running operation is completed, returning the response and any errors encountered.
//
// See documentation of Poll for error-handling information.
func (op *RunPipelineOperation) Wait(ctx context.Context, opts ...gax.CallOption) (*contentwarehousepb.RunPipelineResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp contentwarehousepb.RunPipelineResponse
	if err := op.lro.WaitWithInterval(ctx, &resp, time.Minute, opts...); err != nil {
		return nil, err
	}
	return &resp, nil
}

// Poll fetches the latest state of the long-running operation.
//
// Poll also fetches the latest metadata, which can be retrieved by Metadata.
//
// If Poll fails, the error is returned and op is unmodified. If Poll succeeds and
// the operation has completed with failure, the error is returned and op.Done will return true.
// If Poll succeeds and the operation has completed successfully,
// op.Done will return true, and the response of the operation is returned.
// If Poll succeeds and the operation has not completed, the returned response and error are both nil.
func (op *RunPipelineOperation) Poll(ctx context.Context, opts ...gax.CallOption) (*contentwarehousepb.RunPipelineResponse, error) {
	opts = append([]gax.CallOption{gax.WithPath(op.pollPath)}, opts...)
	var resp contentwarehousepb.RunPipelineResponse
	if err := op.lro.Poll(ctx, &resp, opts...); err != nil {
		return nil, err
	}
	if !op.Done() {
		return nil, nil
	}
	return &resp, nil
}

// Metadata returns metadata associated with the long-running operation.
// Metadata itself does not contact the server, but Poll does.
// To get the latest metadata, call this method after a successful call to Poll.
// If the metadata is not available, the returned metadata and error are both nil.
func (op *RunPipelineOperation) Metadata() (*contentwarehousepb.RunPipelineMetadata, error) {
	var meta contentwarehousepb.RunPipelineMetadata
	if err := op.lro.Metadata(&meta); err == longrunning.ErrNoMetadata {
		return nil, nil
	} else if err != nil {
		return nil, err
	}
	return &meta, nil
}

// Done reports whether the long-running operation has completed.
func (op *RunPipelineOperation) Done() bool {
	return op.lro.Done()
}

// Name returns the name of the long-running operation.
// The name is assigned by the server and is unique within the service from which the operation is created.
func (op *RunPipelineOperation) Name() string {
	return op.lro.Name()
}

// DocumentLinkIterator manages a stream of *contentwarehousepb.DocumentLink.
type DocumentLinkIterator struct {
	items    []*contentwarehousepb.DocumentLink
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*contentwarehousepb.DocumentLink, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *DocumentLinkIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *DocumentLinkIterator) Next() (*contentwarehousepb.DocumentLink, error) {
	var item *contentwarehousepb.DocumentLink
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *DocumentLinkIterator) bufLen() int {
	return len(it.items)
}

func (it *DocumentLinkIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// DocumentSchemaIterator manages a stream of *contentwarehousepb.DocumentSchema.
type DocumentSchemaIterator struct {
	items    []*contentwarehousepb.DocumentSchema
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*contentwarehousepb.DocumentSchema, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *DocumentSchemaIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *DocumentSchemaIterator) Next() (*contentwarehousepb.DocumentSchema, error) {
	var item *contentwarehousepb.DocumentSchema
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *DocumentSchemaIterator) bufLen() int {
	return len(it.items)
}

func (it *DocumentSchemaIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// RuleSetIterator manages a stream of *contentwarehousepb.RuleSet.
type RuleSetIterator struct {
	items    []*contentwarehousepb.RuleSet
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*contentwarehousepb.RuleSet, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *RuleSetIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *RuleSetIterator) Next() (*contentwarehousepb.RuleSet, error) {
	var item *contentwarehousepb.RuleSet
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *RuleSetIterator) bufLen() int {
	return len(it.items)
}

func (it *RuleSetIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// SearchDocumentsResponse_MatchingDocumentIterator manages a stream of *contentwarehousepb.SearchDocumentsResponse_MatchingDocument.
type SearchDocumentsResponse_MatchingDocumentIterator struct {
	items    []*contentwarehousepb.SearchDocumentsResponse_MatchingDocument
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*contentwarehousepb.SearchDocumentsResponse_MatchingDocument, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *SearchDocumentsResponse_MatchingDocumentIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *SearchDocumentsResponse_MatchingDocumentIterator) Next() (*contentwarehousepb.SearchDocumentsResponse_MatchingDocument, error) {
	var item *contentwarehousepb.SearchDocumentsResponse_MatchingDocument
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *SearchDocumentsResponse_MatchingDocumentIterator) bufLen() int {
	return len(it.items)
}

func (it *SearchDocumentsResponse_MatchingDocumentIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}

// SynonymSetIterator manages a stream of *contentwarehousepb.SynonymSet.
type SynonymSetIterator struct {
	items    []*contentwarehousepb.SynonymSet
	pageInfo *iterator.PageInfo
	nextFunc func() error

	// Response is the raw response for the current page.
	// It must be cast to the RPC response type.
	// Calling Next() or InternalFetch() updates this value.
	Response interface{}

	// InternalFetch is for use by the Google Cloud Libraries only.
	// It is not part of the stable interface of this package.
	//
	// InternalFetch returns results from a single call to the underlying RPC.
	// The number of results is no greater than pageSize.
	// If there are no more results, nextPageToken is empty and err is nil.
	InternalFetch func(pageSize int, pageToken string) (results []*contentwarehousepb.SynonymSet, nextPageToken string, err error)
}

// PageInfo supports pagination. See the google.golang.org/api/iterator package for details.
func (it *SynonymSetIterator) PageInfo() *iterator.PageInfo {
	return it.pageInfo
}

// Next returns the next result. Its second return value is iterator.Done if there are no more
// results. Once Next returns Done, all subsequent calls will return Done.
func (it *SynonymSetIterator) Next() (*contentwarehousepb.SynonymSet, error) {
	var item *contentwarehousepb.SynonymSet
	if err := it.nextFunc(); err != nil {
		return item, err
	}
	item = it.items[0]
	it.items = it.items[1:]
	return item, nil
}

func (it *SynonymSetIterator) bufLen() int {
	return len(it.items)
}

func (it *SynonymSetIterator) takeBuf() interface{} {
	b := it.items
	it.items = nil
	return b
}
