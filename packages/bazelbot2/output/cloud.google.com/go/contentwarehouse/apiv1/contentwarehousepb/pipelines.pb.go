// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/contentwarehouse/v1/pipelines.proto

package contentwarehousepb

import (
	iampb "cloud.google.com/go/iam/apiv1/iampb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Response message of RunPipeline method.
type RunPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RunPipelineResponse) Reset() {
	*x = RunPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineResponse) ProtoMessage() {}

func (x *RunPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineResponse.ProtoReflect.Descriptor instead.
func (*RunPipelineResponse) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{0}
}

// Metadata message of RunPipeline method.
type RunPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of files that were processed by the pipeline.
	TotalFileCount int32 `protobuf:"varint,1,opt,name=total_file_count,json=totalFileCount,proto3" json:"total_file_count,omitempty"`
	// Number of files that have failed at some point in the pipeline.
	FailedFileCount int32 `protobuf:"varint,2,opt,name=failed_file_count,json=failedFileCount,proto3" json:"failed_file_count,omitempty"`
	// User unique identification and groups information.
	UserInfo *UserInfo `protobuf:"bytes,3,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// The pipeline metadata.
	//
	// Types that are assignable to PipelineMetadata:
	//
	//	*RunPipelineMetadata_GcsIngestPipelineMetadata_
	//	*RunPipelineMetadata_ExportToCdwPipelineMetadata_
	//	*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata_
	PipelineMetadata isRunPipelineMetadata_PipelineMetadata `protobuf_oneof:"pipeline_metadata"`
	// The list of response details of each document.
	IndividualDocumentStatuses []*RunPipelineMetadata_IndividualDocumentStatus `protobuf:"bytes,5,rep,name=individual_document_statuses,json=individualDocumentStatuses,proto3" json:"individual_document_statuses,omitempty"`
}

func (x *RunPipelineMetadata) Reset() {
	*x = RunPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineMetadata) ProtoMessage() {}

func (x *RunPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineMetadata.ProtoReflect.Descriptor instead.
func (*RunPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{1}
}

func (x *RunPipelineMetadata) GetTotalFileCount() int32 {
	if x != nil {
		return x.TotalFileCount
	}
	return 0
}

func (x *RunPipelineMetadata) GetFailedFileCount() int32 {
	if x != nil {
		return x.FailedFileCount
	}
	return 0
}

func (x *RunPipelineMetadata) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (m *RunPipelineMetadata) GetPipelineMetadata() isRunPipelineMetadata_PipelineMetadata {
	if m != nil {
		return m.PipelineMetadata
	}
	return nil
}

func (x *RunPipelineMetadata) GetGcsIngestPipelineMetadata() *RunPipelineMetadata_GcsIngestPipelineMetadata {
	if x, ok := x.GetPipelineMetadata().(*RunPipelineMetadata_GcsIngestPipelineMetadata_); ok {
		return x.GcsIngestPipelineMetadata
	}
	return nil
}

func (x *RunPipelineMetadata) GetExportToCdwPipelineMetadata() *RunPipelineMetadata_ExportToCdwPipelineMetadata {
	if x, ok := x.GetPipelineMetadata().(*RunPipelineMetadata_ExportToCdwPipelineMetadata_); ok {
		return x.ExportToCdwPipelineMetadata
	}
	return nil
}

func (x *RunPipelineMetadata) GetProcessWithDocAiPipelineMetadata() *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata {
	if x, ok := x.GetPipelineMetadata().(*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata_); ok {
		return x.ProcessWithDocAiPipelineMetadata
	}
	return nil
}

func (x *RunPipelineMetadata) GetIndividualDocumentStatuses() []*RunPipelineMetadata_IndividualDocumentStatus {
	if x != nil {
		return x.IndividualDocumentStatuses
	}
	return nil
}

type isRunPipelineMetadata_PipelineMetadata interface {
	isRunPipelineMetadata_PipelineMetadata()
}

type RunPipelineMetadata_GcsIngestPipelineMetadata_ struct {
	// The pipeline metadata for GcsIngest pipeline.
	GcsIngestPipelineMetadata *RunPipelineMetadata_GcsIngestPipelineMetadata `protobuf:"bytes,4,opt,name=gcs_ingest_pipeline_metadata,json=gcsIngestPipelineMetadata,proto3,oneof"`
}

type RunPipelineMetadata_ExportToCdwPipelineMetadata_ struct {
	// The pipeline metadata for Export-to-CDW pipeline.
	ExportToCdwPipelineMetadata *RunPipelineMetadata_ExportToCdwPipelineMetadata `protobuf:"bytes,6,opt,name=export_to_cdw_pipeline_metadata,json=exportToCdwPipelineMetadata,proto3,oneof"`
}

type RunPipelineMetadata_ProcessWithDocAiPipelineMetadata_ struct {
	// The pipeline metadata for Process-with-DocAi pipeline.
	ProcessWithDocAiPipelineMetadata *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata `protobuf:"bytes,7,opt,name=process_with_doc_ai_pipeline_metadata,json=processWithDocAiPipelineMetadata,proto3,oneof"`
}

func (*RunPipelineMetadata_GcsIngestPipelineMetadata_) isRunPipelineMetadata_PipelineMetadata() {}

func (*RunPipelineMetadata_ExportToCdwPipelineMetadata_) isRunPipelineMetadata_PipelineMetadata() {}

func (*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata_) isRunPipelineMetadata_PipelineMetadata() {
}

// The DocAI processor information.
type ProcessorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The processor resource name.
	// Format is `projects/{project}/locations/{location}/processors/{processor}`,
	// or
	// `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// The processor will process the documents with this document type.
	DocumentType string `protobuf:"bytes,2,opt,name=document_type,json=documentType,proto3" json:"document_type,omitempty"`
	// The Document schema resource name. All documents processed by this
	// processor will use this schema.
	// Format:
	// projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
	SchemaName string `protobuf:"bytes,3,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *ProcessorInfo) Reset() {
	*x = ProcessorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessorInfo) ProtoMessage() {}

func (x *ProcessorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessorInfo.ProtoReflect.Descriptor instead.
func (*ProcessorInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessorInfo) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *ProcessorInfo) GetDocumentType() string {
	if x != nil {
		return x.DocumentType
	}
	return ""
}

func (x *ProcessorInfo) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

// The ingestion pipeline config.
type IngestPipelineConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The document level acl policy config.
	// This refers to an Identity and Access (IAM) policy, which specifies access
	// controls for all documents ingested by the pipeline. The
	// [role][google.iam.v1.Binding.role] and
	// [members][google.iam.v1.Binding.role] under the policy needs to be
	// specified.
	//
	// The following roles are supported for document level acl control:
	// * roles/contentwarehouse.documentAdmin
	// * roles/contentwarehouse.documentEditor
	// * roles/contentwarehouse.documentViewer
	//
	// The following members are supported for document level acl control:
	// * user:user-email@example.com
	// * group:group-email@example.com
	// Note that for documents searched with LLM, only single level user or group
	// acl check is supported.
	DocumentAclPolicy *iampb.Policy `protobuf:"bytes,1,opt,name=document_acl_policy,json=documentAclPolicy,proto3" json:"document_acl_policy,omitempty"`
	// The document text extraction enabled flag.
	// If the flag is set to true, DWH will perform text extraction on the raw
	// document.
	EnableDocumentTextExtraction bool `protobuf:"varint,2,opt,name=enable_document_text_extraction,json=enableDocumentTextExtraction,proto3" json:"enable_document_text_extraction,omitempty"`
	// Optional. The name of the folder to which all ingested documents will be
	// linked during ingestion process. Format is
	// `projects/{project}/locations/{location}/documents/{folder_id}`
	Folder string `protobuf:"bytes,3,opt,name=folder,proto3" json:"folder,omitempty"`
	// The Cloud Function resource name. The Cloud Function needs to live inside
	// consumer project and is accessible to Document AI Warehouse P4SA.
	// Only Cloud Functions V2 is supported. Cloud function execution should
	// complete within 5 minutes or this file ingestion may fail due to timeout.
	// Format: `https://{region}-{project_id}.cloudfunctions.net/{cloud_function}`
	// The following keys are available the request json payload.
	// * display_name
	// * properties
	// * plain_text
	// * reference_id
	// * document_schema_name
	// * raw_document_path
	// * raw_document_file_type
	//
	// The following keys from the cloud function json response payload will be
	// ingested to the Document AI Warehouse as part of Document proto content
	// and/or related information. The original values will be overridden if any
	// key is present in the response.
	// * display_name
	// * properties
	// * plain_text
	// * document_acl_policy
	// * folder
	CloudFunction string `protobuf:"bytes,4,opt,name=cloud_function,json=cloudFunction,proto3" json:"cloud_function,omitempty"`
}

func (x *IngestPipelineConfig) Reset() {
	*x = IngestPipelineConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestPipelineConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestPipelineConfig) ProtoMessage() {}

func (x *IngestPipelineConfig) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestPipelineConfig.ProtoReflect.Descriptor instead.
func (*IngestPipelineConfig) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{3}
}

func (x *IngestPipelineConfig) GetDocumentAclPolicy() *iampb.Policy {
	if x != nil {
		return x.DocumentAclPolicy
	}
	return nil
}

func (x *IngestPipelineConfig) GetEnableDocumentTextExtraction() bool {
	if x != nil {
		return x.EnableDocumentTextExtraction
	}
	return false
}

func (x *IngestPipelineConfig) GetFolder() string {
	if x != nil {
		return x.Folder
	}
	return ""
}

func (x *IngestPipelineConfig) GetCloudFunction() string {
	if x != nil {
		return x.CloudFunction
	}
	return ""
}

// The configuration of the Cloud Storage Ingestion pipeline.
type GcsIngestPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input Cloud Storage folder. All files under this folder will be
	// imported to Document Warehouse.
	// Format: `gs://<bucket-name>/<folder-name>`.
	InputPath string `protobuf:"bytes,1,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	// The Document Warehouse schema resource name. All documents processed by
	// this pipeline will use this schema.
	// Format:
	// projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.
	SchemaName string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	// The Doc AI processor type name. Only used when the format of ingested
	// files is Doc AI Document proto format.
	ProcessorType string `protobuf:"bytes,3,opt,name=processor_type,json=processorType,proto3" json:"processor_type,omitempty"`
	// The flag whether to skip ingested documents.
	// If it is set to true, documents in Cloud Storage contains key "status" with
	// value "status=ingested" in custom metadata will be skipped to ingest.
	SkipIngestedDocuments bool `protobuf:"varint,4,opt,name=skip_ingested_documents,json=skipIngestedDocuments,proto3" json:"skip_ingested_documents,omitempty"`
	// Optional. The config for the Cloud Storage Ingestion pipeline.
	// It provides additional customization options to run the pipeline and can be
	// skipped if it is not applicable.
	PipelineConfig *IngestPipelineConfig `protobuf:"bytes,5,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config,omitempty"`
}

func (x *GcsIngestPipeline) Reset() {
	*x = GcsIngestPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsIngestPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsIngestPipeline) ProtoMessage() {}

func (x *GcsIngestPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsIngestPipeline.ProtoReflect.Descriptor instead.
func (*GcsIngestPipeline) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{4}
}

func (x *GcsIngestPipeline) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *GcsIngestPipeline) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *GcsIngestPipeline) GetProcessorType() string {
	if x != nil {
		return x.ProcessorType
	}
	return ""
}

func (x *GcsIngestPipeline) GetSkipIngestedDocuments() bool {
	if x != nil {
		return x.SkipIngestedDocuments
	}
	return false
}

func (x *GcsIngestPipeline) GetPipelineConfig() *IngestPipelineConfig {
	if x != nil {
		return x.PipelineConfig
	}
	return nil
}

// The configuration of the Cloud Storage Ingestion with DocAI Processors
// pipeline.
type GcsIngestWithDocAiProcessorsPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input Cloud Storage folder. All files under this folder will be
	// imported to Document Warehouse.
	// Format: `gs://<bucket-name>/<folder-name>`.
	InputPath string `protobuf:"bytes,1,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
	// The split and classify processor information.
	// The split and classify result will be used to find a matched extract
	// processor.
	SplitClassifyProcessorInfo *ProcessorInfo `protobuf:"bytes,2,opt,name=split_classify_processor_info,json=splitClassifyProcessorInfo,proto3" json:"split_classify_processor_info,omitempty"`
	// The extract processors information.
	// One matched extract processor will be used to process documents based on
	// the classify processor result. If no classify processor is specified, the
	// first extract processor will be used.
	ExtractProcessorInfos []*ProcessorInfo `protobuf:"bytes,3,rep,name=extract_processor_infos,json=extractProcessorInfos,proto3" json:"extract_processor_infos,omitempty"`
	// The Cloud Storage folder path used to store the raw results from
	// processors.
	// Format: `gs://<bucket-name>/<folder-name>`.
	ProcessorResultsFolderPath string `protobuf:"bytes,4,opt,name=processor_results_folder_path,json=processorResultsFolderPath,proto3" json:"processor_results_folder_path,omitempty"`
	// The flag whether to skip ingested documents.
	// If it is set to true, documents in Cloud Storage contains key "status" with
	// value "status=ingested" in custom metadata will be skipped to ingest.
	SkipIngestedDocuments bool `protobuf:"varint,5,opt,name=skip_ingested_documents,json=skipIngestedDocuments,proto3" json:"skip_ingested_documents,omitempty"`
	// Optional. The config for the Cloud Storage Ingestion with DocAI Processors
	// pipeline. It provides additional customization options to run the pipeline
	// and can be skipped if it is not applicable.
	PipelineConfig *IngestPipelineConfig `protobuf:"bytes,6,opt,name=pipeline_config,json=pipelineConfig,proto3" json:"pipeline_config,omitempty"`
}

func (x *GcsIngestWithDocAiProcessorsPipeline) Reset() {
	*x = GcsIngestWithDocAiProcessorsPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GcsIngestWithDocAiProcessorsPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GcsIngestWithDocAiProcessorsPipeline) ProtoMessage() {}

func (x *GcsIngestWithDocAiProcessorsPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GcsIngestWithDocAiProcessorsPipeline.ProtoReflect.Descriptor instead.
func (*GcsIngestWithDocAiProcessorsPipeline) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{5}
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetSplitClassifyProcessorInfo() *ProcessorInfo {
	if x != nil {
		return x.SplitClassifyProcessorInfo
	}
	return nil
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetExtractProcessorInfos() []*ProcessorInfo {
	if x != nil {
		return x.ExtractProcessorInfos
	}
	return nil
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetProcessorResultsFolderPath() string {
	if x != nil {
		return x.ProcessorResultsFolderPath
	}
	return ""
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetSkipIngestedDocuments() bool {
	if x != nil {
		return x.SkipIngestedDocuments
	}
	return false
}

func (x *GcsIngestWithDocAiProcessorsPipeline) GetPipelineConfig() *IngestPipelineConfig {
	if x != nil {
		return x.PipelineConfig
	}
	return nil
}

// The configuration of exporting documents from the Document Warehouse to CDW
// pipeline.
type ExportToCdwPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all the resource names of the documents to be processed.
	// Format:
	// projects/{project_number}/locations/{location}/documents/{document_id}.
	Documents []string `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	// The Cloud Storage folder path used to store the exported documents before
	// being sent to CDW.
	// Format: `gs://<bucket-name>/<folder-name>`.
	ExportFolderPath string `protobuf:"bytes,2,opt,name=export_folder_path,json=exportFolderPath,proto3" json:"export_folder_path,omitempty"`
	// Optional. The CDW dataset resource name. This field is optional. If not
	// set, the documents will be exported to Cloud Storage only. Format:
	// projects/{project}/locations/{location}/processors/{processor}/dataset
	DocAiDataset string `protobuf:"bytes,3,opt,name=doc_ai_dataset,json=docAiDataset,proto3" json:"doc_ai_dataset,omitempty"`
	// Ratio of training dataset split. When importing into Document AI Workbench,
	// documents will be automatically split into training and test split category
	// with the specified ratio. This field is required if doc_ai_dataset is set.
	TrainingSplitRatio float32 `protobuf:"fixed32,4,opt,name=training_split_ratio,json=trainingSplitRatio,proto3" json:"training_split_ratio,omitempty"`
}

func (x *ExportToCdwPipeline) Reset() {
	*x = ExportToCdwPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportToCdwPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportToCdwPipeline) ProtoMessage() {}

func (x *ExportToCdwPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportToCdwPipeline.ProtoReflect.Descriptor instead.
func (*ExportToCdwPipeline) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{6}
}

func (x *ExportToCdwPipeline) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ExportToCdwPipeline) GetExportFolderPath() string {
	if x != nil {
		return x.ExportFolderPath
	}
	return ""
}

func (x *ExportToCdwPipeline) GetDocAiDataset() string {
	if x != nil {
		return x.DocAiDataset
	}
	return ""
}

func (x *ExportToCdwPipeline) GetTrainingSplitRatio() float32 {
	if x != nil {
		return x.TrainingSplitRatio
	}
	return 0
}

// The configuration of processing documents in Document Warehouse with DocAi
// processors pipeline.
type ProcessWithDocAiPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of all the resource names of the documents to be processed.
	// Format:
	// projects/{project_number}/locations/{location}/documents/{document_id}.
	Documents []string `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	// The Cloud Storage folder path used to store the exported documents before
	// being sent to CDW.
	// Format: `gs://<bucket-name>/<folder-name>`.
	ExportFolderPath string `protobuf:"bytes,2,opt,name=export_folder_path,json=exportFolderPath,proto3" json:"export_folder_path,omitempty"`
	// The CDW processor information.
	ProcessorInfo *ProcessorInfo `protobuf:"bytes,3,opt,name=processor_info,json=processorInfo,proto3" json:"processor_info,omitempty"`
	// The Cloud Storage folder path used to store the raw results from
	// processors.
	// Format: `gs://<bucket-name>/<folder-name>`.
	ProcessorResultsFolderPath string `protobuf:"bytes,4,opt,name=processor_results_folder_path,json=processorResultsFolderPath,proto3" json:"processor_results_folder_path,omitempty"`
}

func (x *ProcessWithDocAiPipeline) Reset() {
	*x = ProcessWithDocAiPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessWithDocAiPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessWithDocAiPipeline) ProtoMessage() {}

func (x *ProcessWithDocAiPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessWithDocAiPipeline.ProtoReflect.Descriptor instead.
func (*ProcessWithDocAiPipeline) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessWithDocAiPipeline) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ProcessWithDocAiPipeline) GetExportFolderPath() string {
	if x != nil {
		return x.ExportFolderPath
	}
	return ""
}

func (x *ProcessWithDocAiPipeline) GetProcessorInfo() *ProcessorInfo {
	if x != nil {
		return x.ProcessorInfo
	}
	return nil
}

func (x *ProcessWithDocAiPipeline) GetProcessorResultsFolderPath() string {
	if x != nil {
		return x.ProcessorResultsFolderPath
	}
	return ""
}

// The metadata message for GcsIngest pipeline.
type RunPipelineMetadata_GcsIngestPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input Cloud Storage folder in this pipeline.
	// Format: `gs://<bucket-name>/<folder-name>`.
	InputPath string `protobuf:"bytes,1,opt,name=input_path,json=inputPath,proto3" json:"input_path,omitempty"`
}

func (x *RunPipelineMetadata_GcsIngestPipelineMetadata) Reset() {
	*x = RunPipelineMetadata_GcsIngestPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineMetadata_GcsIngestPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineMetadata_GcsIngestPipelineMetadata) ProtoMessage() {}

func (x *RunPipelineMetadata_GcsIngestPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineMetadata_GcsIngestPipelineMetadata.ProtoReflect.Descriptor instead.
func (*RunPipelineMetadata_GcsIngestPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RunPipelineMetadata_GcsIngestPipelineMetadata) GetInputPath() string {
	if x != nil {
		return x.InputPath
	}
	return ""
}

// The metadata message for Export-to-CDW pipeline.
type RunPipelineMetadata_ExportToCdwPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input list of all the resource names of the documents to be exported.
	Documents []string `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	// The output CDW dataset resource name.
	DocAiDataset string `protobuf:"bytes,2,opt,name=doc_ai_dataset,json=docAiDataset,proto3" json:"doc_ai_dataset,omitempty"`
	// The output Cloud Storage folder in this pipeline.
	OutputPath string `protobuf:"bytes,3,opt,name=output_path,json=outputPath,proto3" json:"output_path,omitempty"`
}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) Reset() {
	*x = RunPipelineMetadata_ExportToCdwPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineMetadata_ExportToCdwPipelineMetadata) ProtoMessage() {}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineMetadata_ExportToCdwPipelineMetadata.ProtoReflect.Descriptor instead.
func (*RunPipelineMetadata_ExportToCdwPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{1, 1}
}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) GetDocAiDataset() string {
	if x != nil {
		return x.DocAiDataset
	}
	return ""
}

func (x *RunPipelineMetadata_ExportToCdwPipelineMetadata) GetOutputPath() string {
	if x != nil {
		return x.OutputPath
	}
	return ""
}

// The metadata message for Process-with-DocAi pipeline.
type RunPipelineMetadata_ProcessWithDocAiPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input list of all the resource names of the documents to be
	// processed.
	Documents []string `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`
	// The DocAI processor to process the documents with.
	ProcessorInfo *ProcessorInfo `protobuf:"bytes,2,opt,name=processor_info,json=processorInfo,proto3" json:"processor_info,omitempty"`
}

func (x *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) Reset() {
	*x = RunPipelineMetadata_ProcessWithDocAiPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) ProtoMessage() {}

func (x *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineMetadata_ProcessWithDocAiPipelineMetadata.ProtoReflect.Descriptor instead.
func (*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{1, 2}
}

func (x *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) GetDocuments() []string {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *RunPipelineMetadata_ProcessWithDocAiPipelineMetadata) GetProcessorInfo() *ProcessorInfo {
	if x != nil {
		return x.ProcessorInfo
	}
	return nil
}

// The status of processing a document.
type RunPipelineMetadata_IndividualDocumentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Document identifier of an existing document.
	DocumentId string `protobuf:"bytes,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// The status processing the document.
	Status *status.Status `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RunPipelineMetadata_IndividualDocumentStatus) Reset() {
	*x = RunPipelineMetadata_IndividualDocumentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunPipelineMetadata_IndividualDocumentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPipelineMetadata_IndividualDocumentStatus) ProtoMessage() {}

func (x *RunPipelineMetadata_IndividualDocumentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPipelineMetadata_IndividualDocumentStatus.ProtoReflect.Descriptor instead.
func (*RunPipelineMetadata_IndividualDocumentStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP(), []int{1, 3}
}

func (x *RunPipelineMetadata_IndividualDocumentStatus) GetDocumentId() string {
	if x != nil {
		return x.DocumentId
	}
	return ""
}

func (x *RunPipelineMetadata_IndividualDocumentStatus) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_google_cloud_contentwarehouse_v1_pipelines_proto protoreflect.FileDescriptor

var file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xfe, 0x09, 0x0a, 0x13,
	0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x92, 0x01, 0x0a, 0x1c, 0x67, 0x63, 0x73, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x63, 0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x19, 0x67, 0x63,
	0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x99, 0x01, 0x0a, 0x1f, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x64, 0x77, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x51, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x6f, 0x43, 0x64, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x1b, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f,
	0x43, 0x64, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0xa9, 0x01, 0x0a, 0x25, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x6f, 0x63, 0x5f, 0x61, 0x69, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x41, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x20, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x41, 0x69, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x90, 0x01, 0x0a, 0x1c, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1a, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x1a, 0x3a, 0x0a, 0x19, 0x47, 0x63, 0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x82,
	0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x64, 0x77, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x6f, 0x63, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x41, 0x69, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x1a, 0x98, 0x01, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x41, 0x69, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x67,
	0x0a, 0x18, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x0d,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x57,
	0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xfa, 0x41, 0x2d, 0x0a, 0x2b, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x11, 0x47, 0x63, 0x73, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x0f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x83, 0x04, 0x0a, 0x24, 0x47, 0x63, 0x73, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x41, 0x69, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x1a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x67,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x6b, 0x69,
	0x70, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x64, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x0e,
	0x64, 0x6f, 0x63, 0x5f, 0x61, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x41, 0x69,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0x81, 0x02, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x63, 0x41, 0x69, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x56, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x5f,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x42, 0xe4, 0x02,
	0xea, 0x41, 0x6b, 0x0a, 0x2b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x0a, 0x24,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x70, 0x62, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x70, 0x62, 0xaa, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5c, 0x56, 0x31, 0xea, 0x02,
	0x23, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescOnce sync.Once
	file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescData = file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDesc
)

func file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescGZIP() []byte {
	file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescOnce.Do(func() {
		file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescData)
	})
	return file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDescData
}

var file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_contentwarehouse_v1_pipelines_proto_goTypes = []any{
	(*RunPipelineResponse)(nil),                                  // 0: google.cloud.contentwarehouse.v1.RunPipelineResponse
	(*RunPipelineMetadata)(nil),                                  // 1: google.cloud.contentwarehouse.v1.RunPipelineMetadata
	(*ProcessorInfo)(nil),                                        // 2: google.cloud.contentwarehouse.v1.ProcessorInfo
	(*IngestPipelineConfig)(nil),                                 // 3: google.cloud.contentwarehouse.v1.IngestPipelineConfig
	(*GcsIngestPipeline)(nil),                                    // 4: google.cloud.contentwarehouse.v1.GcsIngestPipeline
	(*GcsIngestWithDocAiProcessorsPipeline)(nil),                 // 5: google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline
	(*ExportToCdwPipeline)(nil),                                  // 6: google.cloud.contentwarehouse.v1.ExportToCdwPipeline
	(*ProcessWithDocAiPipeline)(nil),                             // 7: google.cloud.contentwarehouse.v1.ProcessWithDocAiPipeline
	(*RunPipelineMetadata_GcsIngestPipelineMetadata)(nil),        // 8: google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata
	(*RunPipelineMetadata_ExportToCdwPipelineMetadata)(nil),      // 9: google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata
	(*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata)(nil), // 10: google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata
	(*RunPipelineMetadata_IndividualDocumentStatus)(nil),         // 11: google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus
	(*UserInfo)(nil),                                             // 12: google.cloud.contentwarehouse.v1.UserInfo
	(*iampb.Policy)(nil),                                         // 13: google.iam.v1.Policy
	(*status.Status)(nil),                                        // 14: google.rpc.Status
}
var file_google_cloud_contentwarehouse_v1_pipelines_proto_depIdxs = []int32{
	12, // 0: google.cloud.contentwarehouse.v1.RunPipelineMetadata.user_info:type_name -> google.cloud.contentwarehouse.v1.UserInfo
	8,  // 1: google.cloud.contentwarehouse.v1.RunPipelineMetadata.gcs_ingest_pipeline_metadata:type_name -> google.cloud.contentwarehouse.v1.RunPipelineMetadata.GcsIngestPipelineMetadata
	9,  // 2: google.cloud.contentwarehouse.v1.RunPipelineMetadata.export_to_cdw_pipeline_metadata:type_name -> google.cloud.contentwarehouse.v1.RunPipelineMetadata.ExportToCdwPipelineMetadata
	10, // 3: google.cloud.contentwarehouse.v1.RunPipelineMetadata.process_with_doc_ai_pipeline_metadata:type_name -> google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata
	11, // 4: google.cloud.contentwarehouse.v1.RunPipelineMetadata.individual_document_statuses:type_name -> google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus
	13, // 5: google.cloud.contentwarehouse.v1.IngestPipelineConfig.document_acl_policy:type_name -> google.iam.v1.Policy
	3,  // 6: google.cloud.contentwarehouse.v1.GcsIngestPipeline.pipeline_config:type_name -> google.cloud.contentwarehouse.v1.IngestPipelineConfig
	2,  // 7: google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline.split_classify_processor_info:type_name -> google.cloud.contentwarehouse.v1.ProcessorInfo
	2,  // 8: google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline.extract_processor_infos:type_name -> google.cloud.contentwarehouse.v1.ProcessorInfo
	3,  // 9: google.cloud.contentwarehouse.v1.GcsIngestWithDocAiProcessorsPipeline.pipeline_config:type_name -> google.cloud.contentwarehouse.v1.IngestPipelineConfig
	2,  // 10: google.cloud.contentwarehouse.v1.ProcessWithDocAiPipeline.processor_info:type_name -> google.cloud.contentwarehouse.v1.ProcessorInfo
	2,  // 11: google.cloud.contentwarehouse.v1.RunPipelineMetadata.ProcessWithDocAiPipelineMetadata.processor_info:type_name -> google.cloud.contentwarehouse.v1.ProcessorInfo
	14, // 12: google.cloud.contentwarehouse.v1.RunPipelineMetadata.IndividualDocumentStatus.status:type_name -> google.rpc.Status
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_google_cloud_contentwarehouse_v1_pipelines_proto_init() }
func file_google_cloud_contentwarehouse_v1_pipelines_proto_init() {
	if File_google_cloud_contentwarehouse_v1_pipelines_proto != nil {
		return
	}
	file_google_cloud_contentwarehouse_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IngestPipelineConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GcsIngestPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GcsIngestWithDocAiProcessorsPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ExportToCdwPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessWithDocAiPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineMetadata_GcsIngestPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineMetadata_ExportToCdwPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RunPipelineMetadata_IndividualDocumentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes[1].OneofWrappers = []any{
		(*RunPipelineMetadata_GcsIngestPipelineMetadata_)(nil),
		(*RunPipelineMetadata_ExportToCdwPipelineMetadata_)(nil),
		(*RunPipelineMetadata_ProcessWithDocAiPipelineMetadata_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_contentwarehouse_v1_pipelines_proto_goTypes,
		DependencyIndexes: file_google_cloud_contentwarehouse_v1_pipelines_proto_depIdxs,
		MessageInfos:      file_google_cloud_contentwarehouse_v1_pipelines_proto_msgTypes,
	}.Build()
	File_google_cloud_contentwarehouse_v1_pipelines_proto = out.File
	file_google_cloud_contentwarehouse_v1_pipelines_proto_rawDesc = nil
	file_google_cloud_contentwarehouse_v1_pipelines_proto_goTypes = nil
	file_google_cloud_contentwarehouse_v1_pipelines_proto_depIdxs = nil
}
