// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package contentwarehouse

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	contentwarehousepb "cloud.google.com/go/contentwarehouse/apiv1/contentwarehousepb"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newSynonymSetClientHook clientHook

// SynonymSetCallOptions contains the retry settings for each method of SynonymSetClient.
type SynonymSetCallOptions struct {
	CreateSynonymSet []gax.CallOption
	GetSynonymSet    []gax.CallOption
	UpdateSynonymSet []gax.CallOption
	DeleteSynonymSet []gax.CallOption
	ListSynonymSets  []gax.CallOption
	GetOperation     []gax.CallOption
}

func defaultSynonymSetGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("contentwarehouse.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("contentwarehouse.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("contentwarehouse.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://contentwarehouse.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultSynonymSetCallOptions() *SynonymSetCallOptions {
	return &SynonymSetCallOptions{
		CreateSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UpdateSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListSynonymSets: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
	}
}

func defaultSynonymSetRESTCallOptions() *SynonymSetCallOptions {
	return &SynonymSetCallOptions{
		CreateSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		UpdateSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteSynonymSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListSynonymSets: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		GetOperation: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
	}
}

// internalSynonymSetClient is an interface that defines the methods available from Document AI Warehouse API.
type internalSynonymSetClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateSynonymSet(context.Context, *contentwarehousepb.CreateSynonymSetRequest, ...gax.CallOption) (*contentwarehousepb.SynonymSet, error)
	GetSynonymSet(context.Context, *contentwarehousepb.GetSynonymSetRequest, ...gax.CallOption) (*contentwarehousepb.SynonymSet, error)
	UpdateSynonymSet(context.Context, *contentwarehousepb.UpdateSynonymSetRequest, ...gax.CallOption) (*contentwarehousepb.SynonymSet, error)
	DeleteSynonymSet(context.Context, *contentwarehousepb.DeleteSynonymSetRequest, ...gax.CallOption) error
	ListSynonymSets(context.Context, *contentwarehousepb.ListSynonymSetsRequest, ...gax.CallOption) *SynonymSetIterator
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
}

// SynonymSetClient is a client for interacting with Document AI Warehouse API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A Service that manage/custom customer specified SynonymSets.
type SynonymSetClient struct {
	// The internal transport-dependent client.
	internalClient internalSynonymSetClient

	// The call options for this service.
	CallOptions *SynonymSetCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *SynonymSetClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *SynonymSetClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *SynonymSetClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateSynonymSet creates a SynonymSet for a single context.
// Throws an ALREADY_EXISTS exception if a synonymset already exists
// for the context.
func (c *SynonymSetClient) CreateSynonymSet(ctx context.Context, req *contentwarehousepb.CreateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	return c.internalClient.CreateSynonymSet(ctx, req, opts...)
}

// GetSynonymSet gets a SynonymSet for a particular context.
// Throws a NOT_FOUND exception if the Synonymset
// does not exist
func (c *SynonymSetClient) GetSynonymSet(ctx context.Context, req *contentwarehousepb.GetSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	return c.internalClient.GetSynonymSet(ctx, req, opts...)
}

// UpdateSynonymSet remove the existing SynonymSet for the context and replaces it
// with a new one.
// Throws a NOT_FOUND exception if the SynonymSet is not found.
func (c *SynonymSetClient) UpdateSynonymSet(ctx context.Context, req *contentwarehousepb.UpdateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	return c.internalClient.UpdateSynonymSet(ctx, req, opts...)
}

// DeleteSynonymSet deletes a SynonymSet for a given context.
// Throws a NOT_FOUND exception if the SynonymSet is not found.
func (c *SynonymSetClient) DeleteSynonymSet(ctx context.Context, req *contentwarehousepb.DeleteSynonymSetRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteSynonymSet(ctx, req, opts...)
}

// ListSynonymSets returns all SynonymSets (for all contexts) for the specified location.
func (c *SynonymSetClient) ListSynonymSets(ctx context.Context, req *contentwarehousepb.ListSynonymSetsRequest, opts ...gax.CallOption) *SynonymSetIterator {
	return c.internalClient.ListSynonymSets(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *SynonymSetClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// synonymSetGRPCClient is a client for interacting with Document AI Warehouse API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type synonymSetGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing SynonymSetClient
	CallOptions **SynonymSetCallOptions

	// The gRPC API client.
	synonymSetClient contentwarehousepb.SynonymSetServiceClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewSynonymSetClient creates a new synonym set service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A Service that manage/custom customer specified SynonymSets.
func NewSynonymSetClient(ctx context.Context, opts ...option.ClientOption) (*SynonymSetClient, error) {
	clientOpts := defaultSynonymSetGRPCClientOptions()
	if newSynonymSetClientHook != nil {
		hookOpts, err := newSynonymSetClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := SynonymSetClient{CallOptions: defaultSynonymSetCallOptions()}

	c := &synonymSetGRPCClient{
		connPool:         connPool,
		synonymSetClient: contentwarehousepb.NewSynonymSetServiceClient(connPool),
		CallOptions:      &client.CallOptions,
		operationsClient: longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *synonymSetGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *synonymSetGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *synonymSetGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type synonymSetRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing SynonymSetClient
	CallOptions **SynonymSetCallOptions
}

// NewSynonymSetRESTClient creates a new synonym set service rest client.
//
// A Service that manage/custom customer specified SynonymSets.
func NewSynonymSetRESTClient(ctx context.Context, opts ...option.ClientOption) (*SynonymSetClient, error) {
	clientOpts := append(defaultSynonymSetRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultSynonymSetRESTCallOptions()
	c := &synonymSetRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &SynonymSetClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultSynonymSetRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://contentwarehouse.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://contentwarehouse.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://contentwarehouse.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://contentwarehouse.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *synonymSetRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *synonymSetRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *synonymSetRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *synonymSetGRPCClient) CreateSynonymSet(ctx context.Context, req *contentwarehousepb.CreateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateSynonymSet[0:len((*c.CallOptions).CreateSynonymSet):len((*c.CallOptions).CreateSynonymSet)], opts...)
	var resp *contentwarehousepb.SynonymSet
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.synonymSetClient.CreateSynonymSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *synonymSetGRPCClient) GetSynonymSet(ctx context.Context, req *contentwarehousepb.GetSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetSynonymSet[0:len((*c.CallOptions).GetSynonymSet):len((*c.CallOptions).GetSynonymSet)], opts...)
	var resp *contentwarehousepb.SynonymSet
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.synonymSetClient.GetSynonymSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *synonymSetGRPCClient) UpdateSynonymSet(ctx context.Context, req *contentwarehousepb.UpdateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateSynonymSet[0:len((*c.CallOptions).UpdateSynonymSet):len((*c.CallOptions).UpdateSynonymSet)], opts...)
	var resp *contentwarehousepb.SynonymSet
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.synonymSetClient.UpdateSynonymSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *synonymSetGRPCClient) DeleteSynonymSet(ctx context.Context, req *contentwarehousepb.DeleteSynonymSetRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteSynonymSet[0:len((*c.CallOptions).DeleteSynonymSet):len((*c.CallOptions).DeleteSynonymSet)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.synonymSetClient.DeleteSynonymSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *synonymSetGRPCClient) ListSynonymSets(ctx context.Context, req *contentwarehousepb.ListSynonymSetsRequest, opts ...gax.CallOption) *SynonymSetIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListSynonymSets[0:len((*c.CallOptions).ListSynonymSets):len((*c.CallOptions).ListSynonymSets)], opts...)
	it := &SynonymSetIterator{}
	req = proto.Clone(req).(*contentwarehousepb.ListSynonymSetsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*contentwarehousepb.SynonymSet, string, error) {
		resp := &contentwarehousepb.ListSynonymSetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.synonymSetClient.ListSynonymSets(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetSynonymSets(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *synonymSetGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreateSynonymSet creates a SynonymSet for a single context.
// Throws an ALREADY_EXISTS exception if a synonymset already exists
// for the context.
func (c *synonymSetRESTClient) CreateSynonymSet(ctx context.Context, req *contentwarehousepb.CreateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetSynonymSet()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/synonymSets", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateSynonymSet[0:len((*c.CallOptions).CreateSynonymSet):len((*c.CallOptions).CreateSynonymSet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &contentwarehousepb.SynonymSet{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetSynonymSet gets a SynonymSet for a particular context.
// Throws a NOT_FOUND exception if the Synonymset
// does not exist
func (c *synonymSetRESTClient) GetSynonymSet(ctx context.Context, req *contentwarehousepb.GetSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetSynonymSet[0:len((*c.CallOptions).GetSynonymSet):len((*c.CallOptions).GetSynonymSet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &contentwarehousepb.SynonymSet{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// UpdateSynonymSet remove the existing SynonymSet for the context and replaces it
// with a new one.
// Throws a NOT_FOUND exception if the SynonymSet is not found.
func (c *synonymSetRESTClient) UpdateSynonymSet(ctx context.Context, req *contentwarehousepb.UpdateSynonymSetRequest, opts ...gax.CallOption) (*contentwarehousepb.SynonymSet, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetSynonymSet()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).UpdateSynonymSet[0:len((*c.CallOptions).UpdateSynonymSet):len((*c.CallOptions).UpdateSynonymSet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &contentwarehousepb.SynonymSet{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("PATCH", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteSynonymSet deletes a SynonymSet for a given context.
// Throws a NOT_FOUND exception if the SynonymSet is not found.
func (c *synonymSetRESTClient) DeleteSynonymSet(ctx context.Context, req *contentwarehousepb.DeleteSynonymSetRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// ListSynonymSets returns all SynonymSets (for all contexts) for the specified location.
func (c *synonymSetRESTClient) ListSynonymSets(ctx context.Context, req *contentwarehousepb.ListSynonymSetsRequest, opts ...gax.CallOption) *SynonymSetIterator {
	it := &SynonymSetIterator{}
	req = proto.Clone(req).(*contentwarehousepb.ListSynonymSetsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*contentwarehousepb.SynonymSet, string, error) {
		resp := &contentwarehousepb.ListSynonymSetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/synonymSets", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetSynonymSets(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *synonymSetRESTClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &longrunningpb.Operation{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
