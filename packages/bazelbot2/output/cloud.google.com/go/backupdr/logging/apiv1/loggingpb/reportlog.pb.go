// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/backupdr/logging/v1/reportlog.proto

package loggingpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a BackupRecoveryJobReportLog published as part of GCBDR Reporting.
type BackupRecoveryJobReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job_name field displays the name of the job being reported.
	JobName string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	// The job_name field displays the category of the job whether it is Backup or
	// Recovery Job.
	JobCategory string `protobuf:"bytes,2,opt,name=job_category,json=jobCategory,proto3" json:"job_category,omitempty"`
	// The job_type field displays the type of the job.
	JobType string `protobuf:"bytes,3,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	// The log_backup field displays whether the backup taken is only for logs, DB
	// or both.
	LogBackup string `protobuf:"bytes,4,opt,name=log_backup,json=logBackup,proto3" json:"log_backup,omitempty"`
	// The job_status field displays the status of the job.
	JobStatus string `protobuf:"bytes,5,opt,name=job_status,json=jobStatus,proto3" json:"job_status,omitempty"`
	// The resource_name field displays the name of the resource.
	ResourceName string `protobuf:"bytes,6,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The resource_type field displays the type of the resource.
	ResourceType string `protobuf:"bytes,7,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// The error_code field displays the error code.
	ErrorCode int32 `protobuf:"varint,8,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// The error_message field displays the error message if the job is not
	// successful.
	ErrorMessage string `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The job_initiation_failure_reason field displays the reason for failure,
	// if the job was not run.
	JobInitiationFailureReason string `protobuf:"bytes,10,opt,name=job_initiation_failure_reason,json=jobInitiationFailureReason,proto3" json:"job_initiation_failure_reason,omitempty"`
	// The job_start_time field displays the timestamp when the job started.
	JobStartTime string `protobuf:"bytes,11,opt,name=job_start_time,json=jobStartTime,proto3" json:"job_start_time,omitempty"`
	// The job_end_time field displays the timestamp when the job ended.
	JobEndTime string `protobuf:"bytes,12,opt,name=job_end_time,json=jobEndTime,proto3" json:"job_end_time,omitempty"`
	// The job_queued_time field displays the timestamp when the job was
	// queued for running.
	JobQueuedTime string `protobuf:"bytes,13,opt,name=job_queued_time,json=jobQueuedTime,proto3" json:"job_queued_time,omitempty"`
	// The job_duration_in_hours field displays the duration in hours which the
	// job took to complete.
	JobDurationInHours float64 `protobuf:"fixed64,14,opt,name=job_duration_in_hours,json=jobDurationInHours,proto3" json:"job_duration_in_hours,omitempty"`
	// The hostname field displays the name of the host.
	Hostname string `protobuf:"bytes,15,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The appliance_name field displays the name of the backup appliance.
	ApplianceName string `protobuf:"bytes,16,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// The backup_rule_policy_name field displays the policy name which is
	// associated with this job.
	BackupRulePolicyName string `protobuf:"bytes,17,opt,name=backup_rule_policy_name,json=backupRulePolicyName,proto3" json:"backup_rule_policy_name,omitempty"`
	// The backup_plan_policy_template field displays the name of the backup plan
	// for this application.
	BackupPlanPolicyTemplate string `protobuf:"bytes,18,opt,name=backup_plan_policy_template,json=backupPlanPolicyTemplate,proto3" json:"backup_plan_policy_template,omitempty"`
	// The backup_type field displays the type of backup taken: Log, Incremental
	// or Full Copy.
	BackupType string `protobuf:"bytes,19,opt,name=backup_type,json=backupType,proto3" json:"backup_type,omitempty"`
	// The recovery_point field displays the timestamp of recovery point.
	RecoveryPoint string `protobuf:"bytes,20,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
	// The backup_consistency field displays whether the backup is crash
	// consistent or application consistent.
	BackupConsistency string `protobuf:"bytes,21,opt,name=backup_consistency,json=backupConsistency,proto3" json:"backup_consistency,omitempty"`
	// The target_host_name field displays the target host name.
	TargetHostName string `protobuf:"bytes,22,opt,name=target_host_name,json=targetHostName,proto3" json:"target_host_name,omitempty"`
	// The target_appliance_name field displays the target appliance name.
	TargetApplianceName string `protobuf:"bytes,23,opt,name=target_appliance_name,json=targetApplianceName,proto3" json:"target_appliance_name,omitempty"`
	// The target_pool_name field displays target pool name.
	TargetPoolName string `protobuf:"bytes,24,opt,name=target_pool_name,json=targetPoolName,proto3" json:"target_pool_name,omitempty"`
	// The resource_data_size_in_gib field displays resource data size in Gib.
	ResourceDataSizeInGib float64 `protobuf:"fixed64,25,opt,name=resource_data_size_in_gib,json=resourceDataSizeInGib,proto3" json:"resource_data_size_in_gib,omitempty"`
	// The data_copied_in_gib field displays the amount of the data copied
	// during backup in Gib.
	DataCopiedInGib float64 `protobuf:"fixed64,26,opt,name=data_copied_in_gib,json=dataCopiedInGib,proto3" json:"data_copied_in_gib,omitempty"`
	// The onvault_pool_storage_consumed_in_gib field displays the amount of
	// onvault pool storage consumed in Gib.
	OnvaultPoolStorageConsumedInGib float64 `protobuf:"fixed64,27,opt,name=onvault_pool_storage_consumed_in_gib,json=onvaultPoolStorageConsumedInGib,proto3" json:"onvault_pool_storage_consumed_in_gib,omitempty"`
	// The pre_compress_in_gib field displays the size before compression in Gib.
	PreCompressInGib float64 `protobuf:"fixed64,28,opt,name=pre_compress_in_gib,json=preCompressInGib,proto3" json:"pre_compress_in_gib,omitempty"`
	// The compression_ratio field displays the ratio of post compression size to
	// pre compression size.
	CompressionRatio float64 `protobuf:"fixed64,29,opt,name=compression_ratio,json=compressionRatio,proto3" json:"compression_ratio,omitempty"`
	// The data_change_rate field displays the percentage of data copied during
	// backup to application size.
	DataChangeRate float64 `protobuf:"fixed64,30,opt,name=data_change_rate,json=dataChangeRate,proto3" json:"data_change_rate,omitempty"`
	// The snapshot_disk_size_in_gib field displays the snapshot disk size in Gib.
	SnapshotDiskSizeInGib float64 `protobuf:"fixed64,31,opt,name=snapshot_disk_size_in_gib,json=snapshotDiskSizeInGib,proto3" json:"snapshot_disk_size_in_gib,omitempty"`
	// The data_written_in_gib field displays the amount of
	// remote data written in Gib.
	DataWrittenInGib float64 `protobuf:"fixed64,32,opt,name=data_written_in_gib,json=dataWrittenInGib,proto3" json:"data_written_in_gib,omitempty"`
	// The data_sent_in_gib field displays the amount of
	// network data sent in Gib.
	DataSentInGib float64 `protobuf:"fixed64,33,opt,name=data_sent_in_gib,json=dataSentInGib,proto3" json:"data_sent_in_gib,omitempty"`
	// The job_id field displays the id of the job being reported.
	JobId string `protobuf:"bytes,34,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The host_id field displays the host id.
	HostId string `protobuf:"bytes,35,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// The backup_rule_policy_id field displays the policy id.
	BackupRulePolicyId string `protobuf:"bytes,36,opt,name=backup_rule_policy_id,json=backupRulePolicyId,proto3" json:"backup_rule_policy_id,omitempty"`
	// The resource_id field displays the resource id.
	ResourceId string `protobuf:"bytes,37,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The target_pool_id field displays the target pool id.
	TargetPoolId string `protobuf:"bytes,38,opt,name=target_pool_id,json=targetPoolId,proto3" json:"target_pool_id,omitempty"`
	// The target_host_id field displays the target host id.
	TargetHostId string `protobuf:"bytes,39,opt,name=target_host_id,json=targetHostId,proto3" json:"target_host_id,omitempty"`
	// The target_appliance_id field displays the target appliance id.
	TargetApplianceId string `protobuf:"bytes,40,opt,name=target_appliance_id,json=targetApplianceId,proto3" json:"target_appliance_id,omitempty"`
}

func (x *BackupRecoveryJobReportLog) Reset() {
	*x = BackupRecoveryJobReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupRecoveryJobReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupRecoveryJobReportLog) ProtoMessage() {}

func (x *BackupRecoveryJobReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupRecoveryJobReportLog.ProtoReflect.Descriptor instead.
func (*BackupRecoveryJobReportLog) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{0}
}

func (x *BackupRecoveryJobReportLog) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobCategory() string {
	if x != nil {
		return x.JobCategory
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetLogBackup() string {
	if x != nil {
		return x.LogBackup
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobInitiationFailureReason() string {
	if x != nil {
		return x.JobInitiationFailureReason
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobStartTime() string {
	if x != nil {
		return x.JobStartTime
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobEndTime() string {
	if x != nil {
		return x.JobEndTime
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobQueuedTime() string {
	if x != nil {
		return x.JobQueuedTime
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetJobDurationInHours() float64 {
	if x != nil {
		return x.JobDurationInHours
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetBackupRulePolicyName() string {
	if x != nil {
		return x.BackupRulePolicyName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetBackupPlanPolicyTemplate() string {
	if x != nil {
		return x.BackupPlanPolicyTemplate
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetBackupType() string {
	if x != nil {
		return x.BackupType
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetRecoveryPoint() string {
	if x != nil {
		return x.RecoveryPoint
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetBackupConsistency() string {
	if x != nil {
		return x.BackupConsistency
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetHostName() string {
	if x != nil {
		return x.TargetHostName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetApplianceName() string {
	if x != nil {
		return x.TargetApplianceName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetPoolName() string {
	if x != nil {
		return x.TargetPoolName
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetResourceDataSizeInGib() float64 {
	if x != nil {
		return x.ResourceDataSizeInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetDataCopiedInGib() float64 {
	if x != nil {
		return x.DataCopiedInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetOnvaultPoolStorageConsumedInGib() float64 {
	if x != nil {
		return x.OnvaultPoolStorageConsumedInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetPreCompressInGib() float64 {
	if x != nil {
		return x.PreCompressInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetCompressionRatio() float64 {
	if x != nil {
		return x.CompressionRatio
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetDataChangeRate() float64 {
	if x != nil {
		return x.DataChangeRate
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetSnapshotDiskSizeInGib() float64 {
	if x != nil {
		return x.SnapshotDiskSizeInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetDataWrittenInGib() float64 {
	if x != nil {
		return x.DataWrittenInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetDataSentInGib() float64 {
	if x != nil {
		return x.DataSentInGib
	}
	return 0
}

func (x *BackupRecoveryJobReportLog) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetBackupRulePolicyId() string {
	if x != nil {
		return x.BackupRulePolicyId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetPoolId() string {
	if x != nil {
		return x.TargetPoolId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetHostId() string {
	if x != nil {
		return x.TargetHostId
	}
	return ""
}

func (x *BackupRecoveryJobReportLog) GetTargetApplianceId() string {
	if x != nil {
		return x.TargetApplianceId
	}
	return ""
}

// This is a UnprotectedResourceLogReport published as part of GCBDR
// Reporting.
type UnprotectedResourceReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the host where the application/resource resides.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Required. Name of the application/resource.
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Required. Type of the application/resource.
	ResourceType string `protobuf:"bytes,3,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Optional. Name of the database instance for instance members.
	InstanceName string `protobuf:"bytes,4,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// Required. Date when the Appliance was Discovered first.
	DiscoveredOn string `protobuf:"bytes,5,opt,name=discovered_on,json=discoveredOn,proto3" json:"discovered_on,omitempty"`
	// Required. Name of the appliance on which it was discovered.
	DiscoveredBy string `protobuf:"bytes,6,opt,name=discovered_by,json=discoveredBy,proto3" json:"discovered_by,omitempty"`
	// Required. Id of the Appliance
	ApplianceId string `protobuf:"bytes,7,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// Required. Id of the application/resource
	ResourceId string `protobuf:"bytes,8,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Required. Id of the Host where the application/resource resides.
	HostId string `protobuf:"bytes,9,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
}

func (x *UnprotectedResourceReportLog) Reset() {
	*x = UnprotectedResourceReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnprotectedResourceReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnprotectedResourceReportLog) ProtoMessage() {}

func (x *UnprotectedResourceReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnprotectedResourceReportLog.ProtoReflect.Descriptor instead.
func (*UnprotectedResourceReportLog) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{1}
}

func (x *UnprotectedResourceReportLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetDiscoveredOn() string {
	if x != nil {
		return x.DiscoveredOn
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetDiscoveredBy() string {
	if x != nil {
		return x.DiscoveredBy
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UnprotectedResourceReportLog) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

// This is a DailyScheduleComplianceReportLog published as part of GCBDR
// Reporting.
type DailyScheduleComplianceReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource/App Name.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Required. Resource/App Type.
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Required. Policy Name.
	BackupRulePolicyName string `protobuf:"bytes,3,opt,name=backup_rule_policy_name,json=backupRulePolicyName,proto3" json:"backup_rule_policy_name,omitempty"`
	// Required. Policy Template Name.
	BackupPlanPolicyTemplate string `protobuf:"bytes,4,opt,name=backup_plan_policy_template,json=backupPlanPolicyTemplate,proto3" json:"backup_plan_policy_template,omitempty"`
	// Required. Name of the host where the app/resource resides.
	HostName string `protobuf:"bytes,5,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Required. Appliance Name.
	ApplianceName string `protobuf:"bytes,6,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// Required. Date for which compliance is being reported.
	Date string `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
	// Required. Backup Window Start time.
	BackupWindowStartTime string `protobuf:"bytes,8,opt,name=backup_window_start_time,json=backupWindowStartTime,proto3" json:"backup_window_start_time,omitempty"`
	// Required. JobType of the policy.
	JobType string `protobuf:"bytes,9,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	// Required. Compliance status for the policy.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// Required. Description for the status reason.
	Comment string `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// Required. Resource/App Id.
	ResourceId string `protobuf:"bytes,12,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Required. Host Id.
	HostId string `protobuf:"bytes,13,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Required. Policy Template Id
	BackupPlanPolicyTemplateId string `protobuf:"bytes,14,opt,name=backup_plan_policy_template_id,json=backupPlanPolicyTemplateId,proto3" json:"backup_plan_policy_template_id,omitempty"`
	// Required. Policy Id.
	BackupRulePolicyId string `protobuf:"bytes,15,opt,name=backup_rule_policy_id,json=backupRulePolicyId,proto3" json:"backup_rule_policy_id,omitempty"`
	// Required. Appliance Id.
	ApplianceId string `protobuf:"bytes,16,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
}

func (x *DailyScheduleComplianceReportLog) Reset() {
	*x = DailyScheduleComplianceReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyScheduleComplianceReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyScheduleComplianceReportLog) ProtoMessage() {}

func (x *DailyScheduleComplianceReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyScheduleComplianceReportLog.ProtoReflect.Descriptor instead.
func (*DailyScheduleComplianceReportLog) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{2}
}

func (x *DailyScheduleComplianceReportLog) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetBackupRulePolicyName() string {
	if x != nil {
		return x.BackupRulePolicyName
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetBackupPlanPolicyTemplate() string {
	if x != nil {
		return x.BackupPlanPolicyTemplate
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetBackupWindowStartTime() string {
	if x != nil {
		return x.BackupWindowStartTime
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetBackupPlanPolicyTemplateId() string {
	if x != nil {
		return x.BackupPlanPolicyTemplateId
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetBackupRulePolicyId() string {
	if x != nil {
		return x.BackupRulePolicyId
	}
	return ""
}

func (x *DailyScheduleComplianceReportLog) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

// This is a BackupStorageUtilizationReportLog published as part of GCBDR
// Reporting.
type BackupStorageUtilizationReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. The appliance name.
	ApplianceName string `protobuf:"bytes,1,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// Required. The storage resource type.
	StorageType string `protobuf:"bytes,2,opt,name=storage_type,json=storageType,proto3" json:"storage_type,omitempty"`
	// Required. The storage pool name.
	PoolName string `protobuf:"bytes,3,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	// Required. Total capacity of the pool in GiB.
	TotalCapacityInGib float64 `protobuf:"fixed64,4,opt,name=total_capacity_in_gib,json=totalCapacityInGib,proto3" json:"total_capacity_in_gib,omitempty"`
	// Required. Used capacity of the pool in GiB.
	UsedCapacityInGib float64 `protobuf:"fixed64,5,opt,name=used_capacity_in_gib,json=usedCapacityInGib,proto3" json:"used_capacity_in_gib,omitempty"`
	// Required. Utilization percentage of a storage pool.
	UtilizationPercentage float64 `protobuf:"fixed64,6,opt,name=utilization_percentage,json=utilizationPercentage,proto3" json:"utilization_percentage,omitempty"`
	// Required. Appliance id.
	ApplianceId string `protobuf:"bytes,7,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
}

func (x *BackupStorageUtilizationReportLog) Reset() {
	*x = BackupStorageUtilizationReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupStorageUtilizationReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupStorageUtilizationReportLog) ProtoMessage() {}

func (x *BackupStorageUtilizationReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupStorageUtilizationReportLog.ProtoReflect.Descriptor instead.
func (*BackupStorageUtilizationReportLog) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{3}
}

func (x *BackupStorageUtilizationReportLog) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *BackupStorageUtilizationReportLog) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *BackupStorageUtilizationReportLog) GetPoolName() string {
	if x != nil {
		return x.PoolName
	}
	return ""
}

func (x *BackupStorageUtilizationReportLog) GetTotalCapacityInGib() float64 {
	if x != nil {
		return x.TotalCapacityInGib
	}
	return 0
}

func (x *BackupStorageUtilizationReportLog) GetUsedCapacityInGib() float64 {
	if x != nil {
		return x.UsedCapacityInGib
	}
	return 0
}

func (x *BackupStorageUtilizationReportLog) GetUtilizationPercentage() float64 {
	if x != nil {
		return x.UtilizationPercentage
	}
	return 0
}

func (x *BackupStorageUtilizationReportLog) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

// Holds information for the Protected Resource
type ProtectedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Resource name.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// Required. Resource Type.
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Required. Resource ID.
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Optional. Backup Inclusion/Exclusion.
	BackupInclusionOrExclusion string `protobuf:"bytes,4,opt,name=backup_inclusion_or_exclusion,json=backupInclusionOrExclusion,proto3" json:"backup_inclusion_or_exclusion,omitempty"`
	// Required. Host Id.
	HostId string `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Required. Host Name.
	HostName string `protobuf:"bytes,6,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Required. Backup Template ID.
	BackupPlanPolicyTemplateId string `protobuf:"bytes,7,opt,name=backup_plan_policy_template_id,json=backupPlanPolicyTemplateId,proto3" json:"backup_plan_policy_template_id,omitempty"`
	// Required. Backup Template.
	BackupPlanPolicyTemplate string `protobuf:"bytes,8,opt,name=backup_plan_policy_template,json=backupPlanPolicyTemplate,proto3" json:"backup_plan_policy_template,omitempty"`
	// Required. Sla Id.
	SlaId string `protobuf:"bytes,9,opt,name=sla_id,json=slaId,proto3" json:"sla_id,omitempty"`
	// Required. Backup Plan restrictions.
	BackupPlanRestrictions string `protobuf:"bytes,10,opt,name=backup_plan_restrictions,json=backupPlanRestrictions,proto3" json:"backup_plan_restrictions,omitempty"`
	// Required. Protected On.
	ProtectedOn string `protobuf:"bytes,11,opt,name=protected_on,json=protectedOn,proto3" json:"protected_on,omitempty"`
	// Optional. Policy Overrides.
	PolicyOverrides string `protobuf:"bytes,12,opt,name=policy_overrides,json=policyOverrides,proto3" json:"policy_overrides,omitempty"`
	// Optional. Source Appliance in case of streamsnap.
	SourceAppliance string `protobuf:"bytes,13,opt,name=source_appliance,json=sourceAppliance,proto3" json:"source_appliance,omitempty"`
	// Optional. Source Appliance Id in case of streamsnap.
	SourceApplianceId string `protobuf:"bytes,14,opt,name=source_appliance_id,json=sourceApplianceId,proto3" json:"source_appliance_id,omitempty"`
	// Required. Protected Data (GiB).
	ProtectedDataInGib float64 `protobuf:"fixed64,15,opt,name=protected_data_in_gib,json=protectedDataInGib,proto3" json:"protected_data_in_gib,omitempty"`
	// Optional. Onvault (GiB) .
	OnvaultInGib float64 `protobuf:"fixed64,16,opt,name=onvault_in_gib,json=onvaultInGib,proto3" json:"onvault_in_gib,omitempty"`
	// Optional. Originating Appliance in case of streamsnap.
	ApplianceName string `protobuf:"bytes,17,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// Optional. Originating Appliance id in case of streamsnap.
	ApplianceId string `protobuf:"bytes,18,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// Optional. Remote Appliance in case of streamsnap.
	RemoteAppliance string `protobuf:"bytes,19,opt,name=remote_appliance,json=remoteAppliance,proto3" json:"remote_appliance,omitempty"`
	// Optional. Remote Appliance id in case of streamsnap.
	RemoteApplianceId string `protobuf:"bytes,20,opt,name=remote_appliance_id,json=remoteApplianceId,proto3" json:"remote_appliance_id,omitempty"`
	// Optional. Recovery Point.
	RecoveryPoint string `protobuf:"bytes,21,opt,name=recovery_point,json=recoveryPoint,proto3" json:"recovery_point,omitempty"`
}

func (x *ProtectedResource) Reset() {
	*x = ProtectedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtectedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtectedResource) ProtoMessage() {}

func (x *ProtectedResource) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtectedResource.ProtoReflect.Descriptor instead.
func (*ProtectedResource) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{4}
}

func (x *ProtectedResource) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ProtectedResource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ProtectedResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ProtectedResource) GetBackupInclusionOrExclusion() string {
	if x != nil {
		return x.BackupInclusionOrExclusion
	}
	return ""
}

func (x *ProtectedResource) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ProtectedResource) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ProtectedResource) GetBackupPlanPolicyTemplateId() string {
	if x != nil {
		return x.BackupPlanPolicyTemplateId
	}
	return ""
}

func (x *ProtectedResource) GetBackupPlanPolicyTemplate() string {
	if x != nil {
		return x.BackupPlanPolicyTemplate
	}
	return ""
}

func (x *ProtectedResource) GetSlaId() string {
	if x != nil {
		return x.SlaId
	}
	return ""
}

func (x *ProtectedResource) GetBackupPlanRestrictions() string {
	if x != nil {
		return x.BackupPlanRestrictions
	}
	return ""
}

func (x *ProtectedResource) GetProtectedOn() string {
	if x != nil {
		return x.ProtectedOn
	}
	return ""
}

func (x *ProtectedResource) GetPolicyOverrides() string {
	if x != nil {
		return x.PolicyOverrides
	}
	return ""
}

func (x *ProtectedResource) GetSourceAppliance() string {
	if x != nil {
		return x.SourceAppliance
	}
	return ""
}

func (x *ProtectedResource) GetSourceApplianceId() string {
	if x != nil {
		return x.SourceApplianceId
	}
	return ""
}

func (x *ProtectedResource) GetProtectedDataInGib() float64 {
	if x != nil {
		return x.ProtectedDataInGib
	}
	return 0
}

func (x *ProtectedResource) GetOnvaultInGib() float64 {
	if x != nil {
		return x.OnvaultInGib
	}
	return 0
}

func (x *ProtectedResource) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *ProtectedResource) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *ProtectedResource) GetRemoteAppliance() string {
	if x != nil {
		return x.RemoteAppliance
	}
	return ""
}

func (x *ProtectedResource) GetRemoteApplianceId() string {
	if x != nil {
		return x.RemoteApplianceId
	}
	return ""
}

func (x *ProtectedResource) GetRecoveryPoint() string {
	if x != nil {
		return x.RecoveryPoint
	}
	return ""
}

// Holds information for the Mounted Images log
type MountedImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Source Resource name.
	SourceResourceName string `protobuf:"bytes,1,opt,name=source_resource_name,json=sourceResourceName,proto3" json:"source_resource_name,omitempty"`
	// Required. Source Resource id.
	SourceResourceId string `protobuf:"bytes,2,opt,name=source_resource_id,json=sourceResourceId,proto3" json:"source_resource_id,omitempty"`
	// Required. Cluster Name.
	ApplianceName string `protobuf:"bytes,3,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// Required. Cluster Id.
	ApplianceId string `protobuf:"bytes,4,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// Required. Mounted Image Name.
	MountedImageName string `protobuf:"bytes,5,opt,name=mounted_image_name,json=mountedImageName,proto3" json:"mounted_image_name,omitempty"`
	// Required. Source Image Name.
	SourceImageName string `protobuf:"bytes,6,opt,name=source_image_name,json=sourceImageName,proto3" json:"source_image_name,omitempty"`
	// Required.Source Image Type.
	SourceImageType string `protobuf:"bytes,7,opt,name=source_image_type,json=sourceImageType,proto3" json:"source_image_type,omitempty"`
	// Required. Recovery point Date.
	RecoveryPointDate string `protobuf:"bytes,8,opt,name=recovery_point_date,json=recoveryPointDate,proto3" json:"recovery_point_date,omitempty"`
	// Required. Last Mount Date
	LastMountDate string `protobuf:"bytes,9,opt,name=last_mount_date,json=lastMountDate,proto3" json:"last_mount_date,omitempty"`
	// Required. Resource type.
	ResourceType string `protobuf:"bytes,10,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// Required. Source Host Name.
	SourceHostName string `protobuf:"bytes,11,opt,name=source_host_name,json=sourceHostName,proto3" json:"source_host_name,omitempty"`
	// Required. Source Host Id.
	SourceHostId string `protobuf:"bytes,12,opt,name=source_host_id,json=sourceHostId,proto3" json:"source_host_id,omitempty"`
	// Required. Mounted Host Name.
	MountedHostName string `protobuf:"bytes,13,opt,name=mounted_host_name,json=mountedHostName,proto3" json:"mounted_host_name,omitempty"`
	// Required. Mounted Host Id.
	MountedHostId string `protobuf:"bytes,14,opt,name=mounted_host_id,json=mountedHostId,proto3" json:"mounted_host_id,omitempty"`
	// Required. Mounted Resource Name.
	MountedResourceName string `protobuf:"bytes,15,opt,name=mounted_resource_name,json=mountedResourceName,proto3" json:"mounted_resource_name,omitempty"`
	// Required. Resource Virtual size(in GiB)
	ResourceVirtualSizeInGib float64 `protobuf:"fixed64,16,opt,name=resource_virtual_size_in_gib,json=resourceVirtualSizeInGib,proto3" json:"resource_virtual_size_in_gib,omitempty"`
	// Required. Storage Consumed(in GiB).
	StorageConsumedInGib float64 `protobuf:"fixed64,17,opt,name=storage_consumed_in_gib,json=storageConsumedInGib,proto3" json:"storage_consumed_in_gib,omitempty"`
	// Optional. label.
	MountedResourceLabel string `protobuf:"bytes,18,opt,name=mounted_resource_label,json=mountedResourceLabel,proto3" json:"mounted_resource_label,omitempty"`
	// Optional. Restorable Objects.
	RestorableObject string `protobuf:"bytes,19,opt,name=restorable_object,json=restorableObject,proto3" json:"restorable_object,omitempty"`
	// Required. Mounted Image Age(in days).
	MountedImageAgeInDays int32 `protobuf:"varint,20,opt,name=mounted_image_age_in_days,json=mountedImageAgeInDays,proto3" json:"mounted_image_age_in_days,omitempty"`
	// Required. User Name.
	UserName string `protobuf:"bytes,21,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// Optional. Read Mode.
	ReadMode string `protobuf:"bytes,22,opt,name=read_mode,json=readMode,proto3" json:"read_mode,omitempty"`
	// Required. Resource size(in GiB)
	ResourceSizeInGib float64 `protobuf:"fixed64,23,opt,name=resource_size_in_gib,json=resourceSizeInGib,proto3" json:"resource_size_in_gib,omitempty"`
	// Optional. Image Expiration Date
	ImageExpirationDate string `protobuf:"bytes,24,opt,name=image_expiration_date,json=imageExpirationDate,proto3" json:"image_expiration_date,omitempty"`
}

func (x *MountedImage) Reset() {
	*x = MountedImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountedImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountedImage) ProtoMessage() {}

func (x *MountedImage) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountedImage.ProtoReflect.Descriptor instead.
func (*MountedImage) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{5}
}

func (x *MountedImage) GetSourceResourceName() string {
	if x != nil {
		return x.SourceResourceName
	}
	return ""
}

func (x *MountedImage) GetSourceResourceId() string {
	if x != nil {
		return x.SourceResourceId
	}
	return ""
}

func (x *MountedImage) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *MountedImage) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *MountedImage) GetMountedImageName() string {
	if x != nil {
		return x.MountedImageName
	}
	return ""
}

func (x *MountedImage) GetSourceImageName() string {
	if x != nil {
		return x.SourceImageName
	}
	return ""
}

func (x *MountedImage) GetSourceImageType() string {
	if x != nil {
		return x.SourceImageType
	}
	return ""
}

func (x *MountedImage) GetRecoveryPointDate() string {
	if x != nil {
		return x.RecoveryPointDate
	}
	return ""
}

func (x *MountedImage) GetLastMountDate() string {
	if x != nil {
		return x.LastMountDate
	}
	return ""
}

func (x *MountedImage) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *MountedImage) GetSourceHostName() string {
	if x != nil {
		return x.SourceHostName
	}
	return ""
}

func (x *MountedImage) GetSourceHostId() string {
	if x != nil {
		return x.SourceHostId
	}
	return ""
}

func (x *MountedImage) GetMountedHostName() string {
	if x != nil {
		return x.MountedHostName
	}
	return ""
}

func (x *MountedImage) GetMountedHostId() string {
	if x != nil {
		return x.MountedHostId
	}
	return ""
}

func (x *MountedImage) GetMountedResourceName() string {
	if x != nil {
		return x.MountedResourceName
	}
	return ""
}

func (x *MountedImage) GetResourceVirtualSizeInGib() float64 {
	if x != nil {
		return x.ResourceVirtualSizeInGib
	}
	return 0
}

func (x *MountedImage) GetStorageConsumedInGib() float64 {
	if x != nil {
		return x.StorageConsumedInGib
	}
	return 0
}

func (x *MountedImage) GetMountedResourceLabel() string {
	if x != nil {
		return x.MountedResourceLabel
	}
	return ""
}

func (x *MountedImage) GetRestorableObject() string {
	if x != nil {
		return x.RestorableObject
	}
	return ""
}

func (x *MountedImage) GetMountedImageAgeInDays() int32 {
	if x != nil {
		return x.MountedImageAgeInDays
	}
	return 0
}

func (x *MountedImage) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *MountedImage) GetReadMode() string {
	if x != nil {
		return x.ReadMode
	}
	return ""
}

func (x *MountedImage) GetResourceSizeInGib() float64 {
	if x != nil {
		return x.ResourceSizeInGib
	}
	return 0
}

func (x *MountedImage) GetImageExpirationDate() string {
	if x != nil {
		return x.ImageExpirationDate
	}
	return ""
}

// Holds information for the Connector Versions log
type ConnectorVersionReportLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Appliance Name.
	ApplianceName string `protobuf:"bytes,1,opt,name=appliance_name,json=applianceName,proto3" json:"appliance_name,omitempty"`
	// Required. Appliance Id.
	ApplianceId string `protobuf:"bytes,2,opt,name=appliance_id,json=applianceId,proto3" json:"appliance_id,omitempty"`
	// Required. Host Name.
	HostName string `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Required. Host Id.
	HostId string `protobuf:"bytes,4,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// Optional. Os Type.
	HostOsType string `protobuf:"bytes,5,opt,name=host_os_type,json=hostOsType,proto3" json:"host_os_type,omitempty"`
	// Required. Host Ip Address.
	HostIpAddress string `protobuf:"bytes,6,opt,name=host_ip_address,json=hostIpAddress,proto3" json:"host_ip_address,omitempty"`
	// Optional. Db Authentication.
	DbAuthentication string `protobuf:"bytes,7,opt,name=db_authentication,json=dbAuthentication,proto3" json:"db_authentication,omitempty"`
	// Required. Installed version.
	InstalledVersion string `protobuf:"bytes,8,opt,name=installed_version,json=installedVersion,proto3" json:"installed_version,omitempty"`
	// Optional. Available version.
	AvailableVersion string `protobuf:"bytes,9,opt,name=available_version,json=availableVersion,proto3" json:"available_version,omitempty"`
	// Required. Version Check.
	VersionCheck string `protobuf:"bytes,10,opt,name=version_check,json=versionCheck,proto3" json:"version_check,omitempty"`
	// Required. Disk Preference.
	DiskPreference string `protobuf:"bytes,11,opt,name=disk_preference,json=diskPreference,proto3" json:"disk_preference,omitempty"`
	// Required. Transport
	Transport string `protobuf:"bytes,12,opt,name=transport,proto3" json:"transport,omitempty"`
}

func (x *ConnectorVersionReportLog) Reset() {
	*x = ConnectorVersionReportLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorVersionReportLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorVersionReportLog) ProtoMessage() {}

func (x *ConnectorVersionReportLog) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorVersionReportLog.ProtoReflect.Descriptor instead.
func (*ConnectorVersionReportLog) Descriptor() ([]byte, []int) {
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectorVersionReportLog) GetApplianceName() string {
	if x != nil {
		return x.ApplianceName
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetApplianceId() string {
	if x != nil {
		return x.ApplianceId
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetHostOsType() string {
	if x != nil {
		return x.HostOsType
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetHostIpAddress() string {
	if x != nil {
		return x.HostIpAddress
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetDbAuthentication() string {
	if x != nil {
		return x.DbAuthentication
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetInstalledVersion() string {
	if x != nil {
		return x.InstalledVersion
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetAvailableVersion() string {
	if x != nil {
		return x.AvailableVersion
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetVersionCheck() string {
	if x != nil {
		return x.VersionCheck
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetDiskPreference() string {
	if x != nil {
		return x.DiskPreference
	}
	return ""
}

func (x *ConnectorVersionReportLog) GetTransport() string {
	if x != nil {
		return x.Transport
	}
	return ""
}

var File_google_cloud_backupdr_logging_v1_reportlog_proto protoreflect.FileDescriptor

var file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDesc = []byte{
	0x0a, 0x30, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x22, 0xad, 0x0d, 0x0a, 0x1a, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x1d, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6a, 0x6f, 0x62, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6a,
	0x6f, 0x62, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x6f, 0x62, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x62, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6a,
	0x6f, 0x62, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6a, 0x6f, 0x62, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x67, 0x69, 0x62, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x69, 0x62,
	0x12, 0x2b, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x4d, 0x0a,
	0x24, 0x6f, 0x6e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x6f, 0x6e, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x2d, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x67, 0x69, 0x62, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x2d, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f,
	0x67, 0x69, 0x62, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x57,
	0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x27, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x47, 0x69, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x02, 0x0a, 0x1c, 0x55, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x94, 0x05, 0x0a, 0x20, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x1b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22,
	0xc8, 0x02, 0x0a, 0x21, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69,
	0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12,
	0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x75,
	0x73, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x47, 0x69, 0x62,
	0x12, 0x35, 0x0a, 0x16, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x99, 0x07, 0x0a, 0x11, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70,
	0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x6e, 0x47, 0x69, 0x62, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x6e,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xc6, 0x08, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x35, 0x0a, 0x17,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x49, 0x6e,
	0x47, 0x69, 0x62, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x49, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x69, 0x62, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x69, 0x62, 0x12, 0x32, 0x0a, 0x15, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22,
	0xd8, 0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x62, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x62, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x42, 0xe5, 0x01, 0x0a, 0x24, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x64, 0x72, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x42, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x64, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x3b, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0xaa, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52, 0x2e, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x52,
	0x5c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x24, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x44, 0x52, 0x3a, 0x3a, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescOnce sync.Once
	file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescData = file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDesc
)

func file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescGZIP() []byte {
	file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescOnce.Do(func() {
		file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescData)
	})
	return file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDescData
}

var file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_backupdr_logging_v1_reportlog_proto_goTypes = []any{
	(*BackupRecoveryJobReportLog)(nil),        // 0: google.cloud.backupdr.logging.v1.BackupRecoveryJobReportLog
	(*UnprotectedResourceReportLog)(nil),      // 1: google.cloud.backupdr.logging.v1.UnprotectedResourceReportLog
	(*DailyScheduleComplianceReportLog)(nil),  // 2: google.cloud.backupdr.logging.v1.DailyScheduleComplianceReportLog
	(*BackupStorageUtilizationReportLog)(nil), // 3: google.cloud.backupdr.logging.v1.BackupStorageUtilizationReportLog
	(*ProtectedResource)(nil),                 // 4: google.cloud.backupdr.logging.v1.ProtectedResource
	(*MountedImage)(nil),                      // 5: google.cloud.backupdr.logging.v1.MountedImage
	(*ConnectorVersionReportLog)(nil),         // 6: google.cloud.backupdr.logging.v1.ConnectorVersionReportLog
}
var file_google_cloud_backupdr_logging_v1_reportlog_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_cloud_backupdr_logging_v1_reportlog_proto_init() }
func file_google_cloud_backupdr_logging_v1_reportlog_proto_init() {
	if File_google_cloud_backupdr_logging_v1_reportlog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BackupRecoveryJobReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UnprotectedResourceReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DailyScheduleComplianceReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BackupStorageUtilizationReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ProtectedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MountedImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectorVersionReportLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_backupdr_logging_v1_reportlog_proto_goTypes,
		DependencyIndexes: file_google_cloud_backupdr_logging_v1_reportlog_proto_depIdxs,
		MessageInfos:      file_google_cloud_backupdr_logging_v1_reportlog_proto_msgTypes,
	}.Build()
	File_google_cloud_backupdr_logging_v1_reportlog_proto = out.File
	file_google_cloud_backupdr_logging_v1_reportlog_proto_rawDesc = nil
	file_google_cloud_backupdr_logging_v1_reportlog_proto_goTypes = nil
	file_google_cloud_backupdr_logging_v1_reportlog_proto_depIdxs = nil
}
