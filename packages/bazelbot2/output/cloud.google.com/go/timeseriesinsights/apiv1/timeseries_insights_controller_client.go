// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package timeseriesinsights

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	timeseriesinsightspb "cloud.google.com/go/timeseriesinsights/apiv1/timeseriesinsightspb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
)

var newTimeseriesInsightsControllerClientHook clientHook

// TimeseriesInsightsControllerCallOptions contains the retry settings for each method of TimeseriesInsightsControllerClient.
type TimeseriesInsightsControllerCallOptions struct {
	ListDataSets       []gax.CallOption
	CreateDataSet      []gax.CallOption
	DeleteDataSet      []gax.CallOption
	AppendEvents       []gax.CallOption
	QueryDataSet       []gax.CallOption
	EvaluateSlice      []gax.CallOption
	EvaluateTimeseries []gax.CallOption
}

func defaultTimeseriesInsightsControllerGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("timeseriesinsights.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("timeseriesinsights.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("timeseriesinsights.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://timeseriesinsights.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultTimeseriesInsightsControllerCallOptions() *TimeseriesInsightsControllerCallOptions {
	return &TimeseriesInsightsControllerCallOptions{
		ListDataSets: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		AppendEvents: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		QueryDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		EvaluateSlice: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		EvaluateTimeseries: []gax.CallOption{},
	}
}

func defaultTimeseriesInsightsControllerRESTCallOptions() *TimeseriesInsightsControllerCallOptions {
	return &TimeseriesInsightsControllerCallOptions{
		ListDataSets: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		CreateDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		AppendEvents: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		QueryDataSet: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		EvaluateSlice: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnHTTPCodes(gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				},
					http.StatusServiceUnavailable)
			}),
		},
		EvaluateTimeseries: []gax.CallOption{},
	}
}

// internalTimeseriesInsightsControllerClient is an interface that defines the methods available from Timeseries Insights API.
type internalTimeseriesInsightsControllerClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListDataSets(context.Context, *timeseriesinsightspb.ListDataSetsRequest, ...gax.CallOption) *DataSetIterator
	CreateDataSet(context.Context, *timeseriesinsightspb.CreateDataSetRequest, ...gax.CallOption) (*timeseriesinsightspb.DataSet, error)
	DeleteDataSet(context.Context, *timeseriesinsightspb.DeleteDataSetRequest, ...gax.CallOption) error
	AppendEvents(context.Context, *timeseriesinsightspb.AppendEventsRequest, ...gax.CallOption) (*timeseriesinsightspb.AppendEventsResponse, error)
	QueryDataSet(context.Context, *timeseriesinsightspb.QueryDataSetRequest, ...gax.CallOption) (*timeseriesinsightspb.QueryDataSetResponse, error)
	EvaluateSlice(context.Context, *timeseriesinsightspb.EvaluateSliceRequest, ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error)
	EvaluateTimeseries(context.Context, *timeseriesinsightspb.EvaluateTimeseriesRequest, ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error)
}

// TimeseriesInsightsControllerClient is a client for interacting with Timeseries Insights API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type TimeseriesInsightsControllerClient struct {
	// The internal transport-dependent client.
	internalClient internalTimeseriesInsightsControllerClient

	// The call options for this service.
	CallOptions *TimeseriesInsightsControllerCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *TimeseriesInsightsControllerClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *TimeseriesInsightsControllerClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *TimeseriesInsightsControllerClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListDataSets lists DataSets under the project.
//
// The order of the results is unspecified but deterministic. Newly created
// DataSets will not necessarily be added to the end
// of this list.
func (c *TimeseriesInsightsControllerClient) ListDataSets(ctx context.Context, req *timeseriesinsightspb.ListDataSetsRequest, opts ...gax.CallOption) *DataSetIterator {
	return c.internalClient.ListDataSets(ctx, req, opts...)
}

// CreateDataSet create a DataSet from data stored on Cloud
// Storage.
//
// The data must stay immutable while we process the
// DataSet creation; otherwise, undefined outcomes
// might result.  For more information, see DataSet.
func (c *TimeseriesInsightsControllerClient) CreateDataSet(ctx context.Context, req *timeseriesinsightspb.CreateDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.DataSet, error) {
	return c.internalClient.CreateDataSet(ctx, req, opts...)
}

// DeleteDataSet delete a DataSet from the system.
//
// NOTE: If the DataSet is still being
// processed, it will be aborted and deleted.
func (c *TimeseriesInsightsControllerClient) DeleteDataSet(ctx context.Context, req *timeseriesinsightspb.DeleteDataSetRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteDataSet(ctx, req, opts...)
}

// AppendEvents append events to a LOADED DataSet.
func (c *TimeseriesInsightsControllerClient) AppendEvents(ctx context.Context, req *timeseriesinsightspb.AppendEventsRequest, opts ...gax.CallOption) (*timeseriesinsightspb.AppendEventsResponse, error) {
	return c.internalClient.AppendEvents(ctx, req, opts...)
}

// QueryDataSet execute a Timeseries Insights query over a loaded
// DataSet.
func (c *TimeseriesInsightsControllerClient) QueryDataSet(ctx context.Context, req *timeseriesinsightspb.QueryDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.QueryDataSetResponse, error) {
	return c.internalClient.QueryDataSet(ctx, req, opts...)
}

// EvaluateSlice evaluate an explicit slice from a loaded DataSet.
func (c *TimeseriesInsightsControllerClient) EvaluateSlice(ctx context.Context, req *timeseriesinsightspb.EvaluateSliceRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	return c.internalClient.EvaluateSlice(ctx, req, opts...)
}

// EvaluateTimeseries evaluate an explicit timeseries.
func (c *TimeseriesInsightsControllerClient) EvaluateTimeseries(ctx context.Context, req *timeseriesinsightspb.EvaluateTimeseriesRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	return c.internalClient.EvaluateTimeseries(ctx, req, opts...)
}

// timeseriesInsightsControllerGRPCClient is a client for interacting with Timeseries Insights API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type timeseriesInsightsControllerGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing TimeseriesInsightsControllerClient
	CallOptions **TimeseriesInsightsControllerCallOptions

	// The gRPC API client.
	timeseriesInsightsControllerClient timeseriesinsightspb.TimeseriesInsightsControllerClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewTimeseriesInsightsControllerClient creates a new timeseries insights controller client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
func NewTimeseriesInsightsControllerClient(ctx context.Context, opts ...option.ClientOption) (*TimeseriesInsightsControllerClient, error) {
	clientOpts := defaultTimeseriesInsightsControllerGRPCClientOptions()
	if newTimeseriesInsightsControllerClientHook != nil {
		hookOpts, err := newTimeseriesInsightsControllerClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := TimeseriesInsightsControllerClient{CallOptions: defaultTimeseriesInsightsControllerCallOptions()}

	c := &timeseriesInsightsControllerGRPCClient{
		connPool:                           connPool,
		timeseriesInsightsControllerClient: timeseriesinsightspb.NewTimeseriesInsightsControllerClient(connPool),
		CallOptions:                        &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *timeseriesInsightsControllerGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *timeseriesInsightsControllerGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *timeseriesInsightsControllerGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type timeseriesInsightsControllerRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing TimeseriesInsightsControllerClient
	CallOptions **TimeseriesInsightsControllerCallOptions
}

// NewTimeseriesInsightsControllerRESTClient creates a new timeseries insights controller rest client.
func NewTimeseriesInsightsControllerRESTClient(ctx context.Context, opts ...option.ClientOption) (*TimeseriesInsightsControllerClient, error) {
	clientOpts := append(defaultTimeseriesInsightsControllerRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultTimeseriesInsightsControllerRESTCallOptions()
	c := &timeseriesInsightsControllerRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &TimeseriesInsightsControllerClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultTimeseriesInsightsControllerRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://timeseriesinsights.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://timeseriesinsights.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://timeseriesinsights.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://timeseriesinsights.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *timeseriesInsightsControllerRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *timeseriesInsightsControllerRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *timeseriesInsightsControllerRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *timeseriesInsightsControllerGRPCClient) ListDataSets(ctx context.Context, req *timeseriesinsightspb.ListDataSetsRequest, opts ...gax.CallOption) *DataSetIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListDataSets[0:len((*c.CallOptions).ListDataSets):len((*c.CallOptions).ListDataSets)], opts...)
	it := &DataSetIterator{}
	req = proto.Clone(req).(*timeseriesinsightspb.ListDataSetsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*timeseriesinsightspb.DataSet, string, error) {
		resp := &timeseriesinsightspb.ListDataSetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.timeseriesInsightsControllerClient.ListDataSets(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetDatasets(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *timeseriesInsightsControllerGRPCClient) CreateDataSet(ctx context.Context, req *timeseriesinsightspb.CreateDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.DataSet, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateDataSet[0:len((*c.CallOptions).CreateDataSet):len((*c.CallOptions).CreateDataSet)], opts...)
	var resp *timeseriesinsightspb.DataSet
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.timeseriesInsightsControllerClient.CreateDataSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *timeseriesInsightsControllerGRPCClient) DeleteDataSet(ctx context.Context, req *timeseriesinsightspb.DeleteDataSetRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteDataSet[0:len((*c.CallOptions).DeleteDataSet):len((*c.CallOptions).DeleteDataSet)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.timeseriesInsightsControllerClient.DeleteDataSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *timeseriesInsightsControllerGRPCClient) AppendEvents(ctx context.Context, req *timeseriesinsightspb.AppendEventsRequest, opts ...gax.CallOption) (*timeseriesinsightspb.AppendEventsResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "dataset", url.QueryEscape(req.GetDataset()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).AppendEvents[0:len((*c.CallOptions).AppendEvents):len((*c.CallOptions).AppendEvents)], opts...)
	var resp *timeseriesinsightspb.AppendEventsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.timeseriesInsightsControllerClient.AppendEvents(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *timeseriesInsightsControllerGRPCClient) QueryDataSet(ctx context.Context, req *timeseriesinsightspb.QueryDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.QueryDataSetResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).QueryDataSet[0:len((*c.CallOptions).QueryDataSet):len((*c.CallOptions).QueryDataSet)], opts...)
	var resp *timeseriesinsightspb.QueryDataSetResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.timeseriesInsightsControllerClient.QueryDataSet(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *timeseriesInsightsControllerGRPCClient) EvaluateSlice(ctx context.Context, req *timeseriesinsightspb.EvaluateSliceRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "dataset", url.QueryEscape(req.GetDataset()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).EvaluateSlice[0:len((*c.CallOptions).EvaluateSlice):len((*c.CallOptions).EvaluateSlice)], opts...)
	var resp *timeseriesinsightspb.EvaluatedSlice
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.timeseriesInsightsControllerClient.EvaluateSlice(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *timeseriesInsightsControllerGRPCClient) EvaluateTimeseries(ctx context.Context, req *timeseriesinsightspb.EvaluateTimeseriesRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).EvaluateTimeseries[0:len((*c.CallOptions).EvaluateTimeseries):len((*c.CallOptions).EvaluateTimeseries)], opts...)
	var resp *timeseriesinsightspb.EvaluatedSlice
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.timeseriesInsightsControllerClient.EvaluateTimeseries(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ListDataSets lists DataSets under the project.
//
// The order of the results is unspecified but deterministic. Newly created
// DataSets will not necessarily be added to the end
// of this list.
func (c *timeseriesInsightsControllerRESTClient) ListDataSets(ctx context.Context, req *timeseriesinsightspb.ListDataSetsRequest, opts ...gax.CallOption) *DataSetIterator {
	it := &DataSetIterator{}
	req = proto.Clone(req).(*timeseriesinsightspb.ListDataSetsRequest)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	it.InternalFetch = func(pageSize int, pageToken string) ([]*timeseriesinsightspb.DataSet, string, error) {
		resp := &timeseriesinsightspb.ListDataSetsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		baseUrl, err := url.Parse(c.endpoint)
		if err != nil {
			return nil, "", err
		}
		baseUrl.Path += fmt.Sprintf("/v1/%v/datasets", req.GetParent())

		params := url.Values{}
		params.Add("$alt", "json;enum-encoding=int")
		if req.GetPageSize() != 0 {
			params.Add("pageSize", fmt.Sprintf("%v", req.GetPageSize()))
		}
		if req.GetPageToken() != "" {
			params.Add("pageToken", fmt.Sprintf("%v", req.GetPageToken()))
		}

		baseUrl.RawQuery = params.Encode()

		// Build HTTP headers from client and context metadata.
		hds := append(c.xGoogHeaders, "Content-Type", "application/json")
		headers := gax.BuildHeaders(ctx, hds...)
		e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			if settings.Path != "" {
				baseUrl.Path = settings.Path
			}
			httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
			if err != nil {
				return err
			}
			httpReq.Header = headers

			httpRsp, err := c.httpClient.Do(httpReq)
			if err != nil {
				return err
			}
			defer httpRsp.Body.Close()

			if err = googleapi.CheckResponse(httpRsp); err != nil {
				return err
			}

			buf, err := io.ReadAll(httpRsp.Body)
			if err != nil {
				return err
			}

			if err := unm.Unmarshal(buf, resp); err != nil {
				return err
			}

			return nil
		}, opts...)
		if e != nil {
			return nil, "", e
		}
		it.Response = resp
		return resp.GetDatasets(), resp.GetNextPageToken(), nil
	}

	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateDataSet create a DataSet from data stored on Cloud
// Storage.
//
// The data must stay immutable while we process the
// DataSet creation; otherwise, undefined outcomes
// might result.  For more information, see DataSet.
func (c *timeseriesInsightsControllerRESTClient) CreateDataSet(ctx context.Context, req *timeseriesinsightspb.CreateDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.DataSet, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetDataset()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/datasets", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateDataSet[0:len((*c.CallOptions).CreateDataSet):len((*c.CallOptions).CreateDataSet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &timeseriesinsightspb.DataSet{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// DeleteDataSet delete a DataSet from the system.
//
// NOTE: If the DataSet is still being
// processed, it will be aborted and deleted.
func (c *timeseriesInsightsControllerRESTClient) DeleteDataSet(ctx context.Context, req *timeseriesinsightspb.DeleteDataSetRequest, opts ...gax.CallOption) error {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	return gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("DELETE", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		// Returns nil if there is no error, otherwise wraps
		// the response code and body into a non-nil error
		return googleapi.CheckResponse(httpRsp)
	}, opts...)
}

// AppendEvents append events to a LOADED DataSet.
func (c *timeseriesInsightsControllerRESTClient) AppendEvents(ctx context.Context, req *timeseriesinsightspb.AppendEventsRequest, opts ...gax.CallOption) (*timeseriesinsightspb.AppendEventsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:appendEvents", req.GetDataset())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "dataset", url.QueryEscape(req.GetDataset()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).AppendEvents[0:len((*c.CallOptions).AppendEvents):len((*c.CallOptions).AppendEvents)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &timeseriesinsightspb.AppendEventsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// QueryDataSet execute a Timeseries Insights query over a loaded
// DataSet.
func (c *timeseriesInsightsControllerRESTClient) QueryDataSet(ctx context.Context, req *timeseriesinsightspb.QueryDataSetRequest, opts ...gax.CallOption) (*timeseriesinsightspb.QueryDataSetResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:query", req.GetName())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).QueryDataSet[0:len((*c.CallOptions).QueryDataSet):len((*c.CallOptions).QueryDataSet)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &timeseriesinsightspb.QueryDataSetResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// EvaluateSlice evaluate an explicit slice from a loaded DataSet.
func (c *timeseriesInsightsControllerRESTClient) EvaluateSlice(ctx context.Context, req *timeseriesinsightspb.EvaluateSliceRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v:evaluateSlice", req.GetDataset())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "dataset", url.QueryEscape(req.GetDataset()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).EvaluateSlice[0:len((*c.CallOptions).EvaluateSlice):len((*c.CallOptions).EvaluateSlice)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &timeseriesinsightspb.EvaluatedSlice{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// EvaluateTimeseries evaluate an explicit timeseries.
func (c *timeseriesInsightsControllerRESTClient) EvaluateTimeseries(ctx context.Context, req *timeseriesinsightspb.EvaluateTimeseriesRequest, opts ...gax.CallOption) (*timeseriesinsightspb.EvaluatedSlice, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/%v/datasets:evaluateTimeseries", req.GetParent())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).EvaluateTimeseries[0:len((*c.CallOptions).EvaluateTimeseries):len((*c.CallOptions).EvaluateTimeseries)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &timeseriesinsightspb.EvaluatedSlice{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
