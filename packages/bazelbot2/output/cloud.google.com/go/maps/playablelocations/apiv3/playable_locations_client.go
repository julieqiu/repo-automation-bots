// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package playablelocations

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"

	playablelocationspb "cloud.google.com/go/maps/playablelocations/apiv3/playablelocationspb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	SamplePlayableLocations []gax.CallOption
	LogPlayerReports        []gax.CallOption
	LogImpressions          []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("playablelocations.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("playablelocations.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("playablelocations.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://playablelocations.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		SamplePlayableLocations: []gax.CallOption{},
		LogPlayerReports:        []gax.CallOption{},
		LogImpressions:          []gax.CallOption{},
	}
}

func defaultRESTCallOptions() *CallOptions {
	return &CallOptions{
		SamplePlayableLocations: []gax.CallOption{},
		LogPlayerReports:        []gax.CallOption{},
		LogImpressions:          []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods available from Playable Locations API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	SamplePlayableLocations(context.Context, *playablelocationspb.SamplePlayableLocationsRequest, ...gax.CallOption) (*playablelocationspb.SamplePlayableLocationsResponse, error)
	LogPlayerReports(context.Context, *playablelocationspb.LogPlayerReportsRequest, ...gax.CallOption) (*playablelocationspb.LogPlayerReportsResponse, error)
	LogImpressions(context.Context, *playablelocationspb.LogImpressionsRequest, ...gax.CallOption) (*playablelocationspb.LogImpressionsResponse, error)
}

// Client is a client for interacting with Playable Locations API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// The Playable Locations API for v3.
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// SamplePlayableLocations returns a set of playable locations that lie within a specified area,
// that satisfy optional filter criteria.
//
// Note: Identical SamplePlayableLocations requests can return different
// results as the state of the world changes over time.
func (c *Client) SamplePlayableLocations(ctx context.Context, req *playablelocationspb.SamplePlayableLocationsRequest, opts ...gax.CallOption) (*playablelocationspb.SamplePlayableLocationsResponse, error) {
	return c.internalClient.SamplePlayableLocations(ctx, req, opts...)
}

// LogPlayerReports logs bad playable location reports submitted by players.
//
// Reports are not partially saved; either all reports are saved and this
// request succeeds, or no reports are saved, and this request fails.
func (c *Client) LogPlayerReports(ctx context.Context, req *playablelocationspb.LogPlayerReportsRequest, opts ...gax.CallOption) (*playablelocationspb.LogPlayerReportsResponse, error) {
	return c.internalClient.LogPlayerReports(ctx, req, opts...)
}

// LogImpressions logs new events when playable locations are displayed, and when they are
// interacted with.
//
// Impressions are not partially saved; either all impressions are saved and
// this request succeeds, or no impressions are saved, and this request fails.
func (c *Client) LogImpressions(ctx context.Context, req *playablelocationspb.LogImpressionsRequest, opts ...gax.CallOption) (*playablelocationspb.LogImpressionsResponse, error) {
	return c.internalClient.LogImpressions(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Playable Locations API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client playablelocationspb.PlayableLocationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewClient creates a new playable locations client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// The Playable Locations API for v3.
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:    connPool,
		client:      playablelocationspb.NewPlayableLocationsClient(connPool),
		CallOptions: &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type restClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions
}

// NewRESTClient creates a new playable locations rest client.
//
// The Playable Locations API for v3.
func NewRESTClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := append(defaultRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultRESTCallOptions()
	c := &restClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &Client{internalClient: c, CallOptions: callOpts}, nil
}

func defaultRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://playablelocations.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://playablelocations.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://playablelocations.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://playablelocations.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *restClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *restClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *restClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *gRPCClient) SamplePlayableLocations(ctx context.Context, req *playablelocationspb.SamplePlayableLocationsRequest, opts ...gax.CallOption) (*playablelocationspb.SamplePlayableLocationsResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).SamplePlayableLocations[0:len((*c.CallOptions).SamplePlayableLocations):len((*c.CallOptions).SamplePlayableLocations)], opts...)
	var resp *playablelocationspb.SamplePlayableLocationsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.SamplePlayableLocations(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) LogPlayerReports(ctx context.Context, req *playablelocationspb.LogPlayerReportsRequest, opts ...gax.CallOption) (*playablelocationspb.LogPlayerReportsResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).LogPlayerReports[0:len((*c.CallOptions).LogPlayerReports):len((*c.CallOptions).LogPlayerReports)], opts...)
	var resp *playablelocationspb.LogPlayerReportsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.LogPlayerReports(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) LogImpressions(ctx context.Context, req *playablelocationspb.LogImpressionsRequest, opts ...gax.CallOption) (*playablelocationspb.LogImpressionsResponse, error) {
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, c.xGoogHeaders...)
	opts = append((*c.CallOptions).LogImpressions[0:len((*c.CallOptions).LogImpressions):len((*c.CallOptions).LogImpressions)], opts...)
	var resp *playablelocationspb.LogImpressionsResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.LogImpressions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// SamplePlayableLocations returns a set of playable locations that lie within a specified area,
// that satisfy optional filter criteria.
//
// Note: Identical SamplePlayableLocations requests can return different
// results as the state of the world changes over time.
func (c *restClient) SamplePlayableLocations(ctx context.Context, req *playablelocationspb.SamplePlayableLocationsRequest, opts ...gax.CallOption) (*playablelocationspb.SamplePlayableLocationsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v3:samplePlayableLocations")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).SamplePlayableLocations[0:len((*c.CallOptions).SamplePlayableLocations):len((*c.CallOptions).SamplePlayableLocations)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &playablelocationspb.SamplePlayableLocationsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// LogPlayerReports logs bad playable location reports submitted by players.
//
// Reports are not partially saved; either all reports are saved and this
// request succeeds, or no reports are saved, and this request fails.
func (c *restClient) LogPlayerReports(ctx context.Context, req *playablelocationspb.LogPlayerReportsRequest, opts ...gax.CallOption) (*playablelocationspb.LogPlayerReportsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v3:logPlayerReports")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).LogPlayerReports[0:len((*c.CallOptions).LogPlayerReports):len((*c.CallOptions).LogPlayerReports)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &playablelocationspb.LogPlayerReportsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// LogImpressions logs new events when playable locations are displayed, and when they are
// interacted with.
//
// Impressions are not partially saved; either all impressions are saved and
// this request succeeds, or no impressions are saved, and this request fails.
func (c *restClient) LogImpressions(ctx context.Context, req *playablelocationspb.LogImpressionsRequest, opts ...gax.CallOption) (*playablelocationspb.LogImpressionsResponse, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	jsonReq, err := m.Marshal(req)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v3:logImpressions")

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := append(c.xGoogHeaders, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).LogImpressions[0:len((*c.CallOptions).LogImpressions):len((*c.CallOptions).LogImpressions)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &playablelocationspb.LogImpressionsResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
