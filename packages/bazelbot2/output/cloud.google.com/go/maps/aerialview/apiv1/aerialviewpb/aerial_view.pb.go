// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/maps/aerialview/v1/aerial_view.proto

package aerialviewpb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The different states a video can be in.
type Video_State int32

const (
	// Default value. This value is unused.
	Video_STATE_UNSPECIFIED Video_State = 0
	// The video is currently processing.
	Video_PROCESSING Video_State = 1
	// The video has finished rendering, and can be viewed through
	// `LookupVideo`.
	Video_ACTIVE Video_State = 2
	// The video has failed to render.
	Video_FAILED Video_State = 3
)

// Enum value maps for Video_State.
var (
	Video_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "PROCESSING",
		2: "ACTIVE",
		3: "FAILED",
	}
	Video_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"PROCESSING":        1,
		"ACTIVE":            2,
		"FAILED":            3,
	}
)

func (x Video_State) Enum() *Video_State {
	p := new(Video_State)
	*p = x
	return p
}

func (x Video_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Video_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_maps_aerialview_v1_aerial_view_proto_enumTypes[0].Descriptor()
}

func (Video_State) Type() protoreflect.EnumType {
	return &file_google_maps_aerialview_v1_aerial_view_proto_enumTypes[0]
}

func (x Video_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Video_State.Descriptor instead.
func (Video_State) EnumDescriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{0, 0}
}

// An object that encapsulates all of the data about a video.
type Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A mapping of media types to their URIs.
	// This field is only included for `ACTIVE` videos.
	// The key is an enum value from `MediaFormat`.
	Uris map[string]*Uris `protobuf:"bytes,1,rep,name=uris,proto3" json:"uris,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Current state of the render request.
	State Video_State `protobuf:"varint,2,opt,name=state,proto3,enum=google.maps.aerialview.v1.Video_State" json:"state,omitempty"`
	// Contains the video's metadata, only set if the state is `ACTIVE`.
	Metadata *VideoMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Video) Reset() {
	*x = Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{0}
}

func (x *Video) GetUris() map[string]*Uris {
	if x != nil {
		return x.Uris
	}
	return nil
}

func (x *Video) GetState() Video_State {
	if x != nil {
		return x.State
	}
	return Video_STATE_UNSPECIFIED
}

func (x *Video) GetMetadata() *VideoMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Contains all the uris for a given video format.
type Uris struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A signed short-lived URI for the media in a landscape orientation.
	LandscapeUri string `protobuf:"bytes,1,opt,name=landscape_uri,json=landscapeUri,proto3" json:"landscape_uri,omitempty"`
	// A signed short-lived URI for the media in a portrait orientation.
	PortraitUri string `protobuf:"bytes,2,opt,name=portrait_uri,json=portraitUri,proto3" json:"portrait_uri,omitempty"`
}

func (x *Uris) Reset() {
	*x = Uris{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uris) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uris) ProtoMessage() {}

func (x *Uris) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uris.ProtoReflect.Descriptor instead.
func (*Uris) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{1}
}

func (x *Uris) GetLandscapeUri() string {
	if x != nil {
		return x.LandscapeUri
	}
	return ""
}

func (x *Uris) GetPortraitUri() string {
	if x != nil {
		return x.PortraitUri
	}
	return ""
}

// Contains metadata about a video, such as its videoId and duration.
type VideoMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID for the video, and the recommended way to retrieve a video.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
	// The date at which the imagery used in the video was captured.
	// This will be at a month-level granularity.
	CaptureDate *date.Date `protobuf:"bytes,2,opt,name=capture_date,json=captureDate,proto3" json:"capture_date,omitempty"`
	// The length of the video.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *VideoMetadata) Reset() {
	*x = VideoMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMetadata) ProtoMessage() {}

func (x *VideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMetadata.ProtoReflect.Descriptor instead.
func (*VideoMetadata) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{2}
}

func (x *VideoMetadata) GetVideoId() string {
	if x != nil {
		return x.VideoId
	}
	return ""
}

func (x *VideoMetadata) GetCaptureDate() *date.Date {
	if x != nil {
		return x.CaptureDate
	}
	return nil
}

func (x *VideoMetadata) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// Request message for `AerialView.RenderVideo`.
type RenderVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A US postal address for the location to be rendered in the video.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *RenderVideoRequest) Reset() {
	*x = RenderVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVideoRequest) ProtoMessage() {}

func (x *RenderVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVideoRequest.ProtoReflect.Descriptor instead.
func (*RenderVideoRequest) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{3}
}

func (x *RenderVideoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Response message for `AerialView.RenderVideo`.
type RenderVideoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current state of the render request.
	State Video_State `protobuf:"varint,1,opt,name=state,proto3,enum=google.maps.aerialview.v1.Video_State" json:"state,omitempty"`
	// Contains the video's metadata, only set if the state is `ACTIVE`.
	Metadata *VideoMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RenderVideoResponse) Reset() {
	*x = RenderVideoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderVideoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderVideoResponse) ProtoMessage() {}

func (x *RenderVideoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderVideoResponse.ProtoReflect.Descriptor instead.
func (*RenderVideoResponse) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{4}
}

func (x *RenderVideoResponse) GetState() Video_State {
	if x != nil {
		return x.State
	}
	return Video_STATE_UNSPECIFIED
}

func (x *RenderVideoResponse) GetMetadata() *VideoMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request message for `AerialView.LookupVideo`.
type LookupVideoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// A key used to look-up a video.
	//
	// Types that are assignable to Key:
	//
	//	*LookupVideoRequest_VideoId
	//	*LookupVideoRequest_Address
	Key isLookupVideoRequest_Key `protobuf_oneof:"key"`
}

func (x *LookupVideoRequest) Reset() {
	*x = LookupVideoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupVideoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupVideoRequest) ProtoMessage() {}

func (x *LookupVideoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupVideoRequest.ProtoReflect.Descriptor instead.
func (*LookupVideoRequest) Descriptor() ([]byte, []int) {
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP(), []int{5}
}

func (m *LookupVideoRequest) GetKey() isLookupVideoRequest_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *LookupVideoRequest) GetVideoId() string {
	if x, ok := x.GetKey().(*LookupVideoRequest_VideoId); ok {
		return x.VideoId
	}
	return ""
}

func (x *LookupVideoRequest) GetAddress() string {
	if x, ok := x.GetKey().(*LookupVideoRequest_Address); ok {
		return x.Address
	}
	return ""
}

type isLookupVideoRequest_Key interface {
	isLookupVideoRequest_Key()
}

type LookupVideoRequest_VideoId struct {
	// An ID returned from `RenderVideo`.
	VideoId string `protobuf:"bytes,1,opt,name=video_id,json=videoId,proto3,oneof"`
}

type LookupVideoRequest_Address struct {
	// A US postal address.
	Address string `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

func (*LookupVideoRequest_VideoId) isLookupVideoRequest_Key() {}

func (*LookupVideoRequest_Address) isLookupVideoRequest_Key() {}

var File_google_maps_aerialview_v1_aerial_view_proto protoreflect.FileDescriptor

var file_google_maps_aerialview_v1_aerial_view_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x2f, 0x61, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x3e, 0x0a, 0x04, 0x75, 0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x55, 0x72, 0x69, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x75, 0x72,
	0x69, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e,
	0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x44, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x09, 0x55, 0x72, 0x69, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x70, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x72, 0x69, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x4e, 0x0a, 0x04, 0x55, 0x72, 0x69, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x72, 0x61, 0x69,
	0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x72,
	0x74, 0x72, 0x61, 0x69, 0x74, 0x55, 0x72, 0x69, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x54, 0x0a, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x32, 0xf7, 0x02, 0x0a, 0x0a, 0x41, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x12, 0x99, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xda, 0x41, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x3a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x12, 0x7e, 0x0a, 0x0b, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70,
	0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73,
	0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76,
	0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x73, 0x3a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x1a, 0x4d, 0xca, 0x41, 0x19, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0xd2, 0x41, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0xd8, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x41, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61,
	0x70, 0x73, 0x2f, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x61, 0x70,
	0x69, 0x76, 0x31, 0x2f, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x70, 0x62,
	0x3b, 0x61, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x76, 0x69, 0x65, 0x77, 0x70, 0x62, 0xa2, 0x02, 0x07,
	0x47, 0x47, 0x4d, 0x50, 0x56, 0x31, 0x42, 0xaa, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x41, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x19, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x4d, 0x61, 0x70,
	0x73, 0x5c, 0x41, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x5c, 0x56, 0x31, 0xea,
	0x02, 0x1c, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x4d, 0x61, 0x70, 0x73, 0x3a, 0x3a,
	0x41, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_maps_aerialview_v1_aerial_view_proto_rawDescOnce sync.Once
	file_google_maps_aerialview_v1_aerial_view_proto_rawDescData = file_google_maps_aerialview_v1_aerial_view_proto_rawDesc
)

func file_google_maps_aerialview_v1_aerial_view_proto_rawDescGZIP() []byte {
	file_google_maps_aerialview_v1_aerial_view_proto_rawDescOnce.Do(func() {
		file_google_maps_aerialview_v1_aerial_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_maps_aerialview_v1_aerial_view_proto_rawDescData)
	})
	return file_google_maps_aerialview_v1_aerial_view_proto_rawDescData
}

var file_google_maps_aerialview_v1_aerial_view_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_maps_aerialview_v1_aerial_view_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_maps_aerialview_v1_aerial_view_proto_goTypes = []any{
	(Video_State)(0),            // 0: google.maps.aerialview.v1.Video.State
	(*Video)(nil),               // 1: google.maps.aerialview.v1.Video
	(*Uris)(nil),                // 2: google.maps.aerialview.v1.Uris
	(*VideoMetadata)(nil),       // 3: google.maps.aerialview.v1.VideoMetadata
	(*RenderVideoRequest)(nil),  // 4: google.maps.aerialview.v1.RenderVideoRequest
	(*RenderVideoResponse)(nil), // 5: google.maps.aerialview.v1.RenderVideoResponse
	(*LookupVideoRequest)(nil),  // 6: google.maps.aerialview.v1.LookupVideoRequest
	nil,                         // 7: google.maps.aerialview.v1.Video.UrisEntry
	(*date.Date)(nil),           // 8: google.type.Date
	(*durationpb.Duration)(nil), // 9: google.protobuf.Duration
}
var file_google_maps_aerialview_v1_aerial_view_proto_depIdxs = []int32{
	7,  // 0: google.maps.aerialview.v1.Video.uris:type_name -> google.maps.aerialview.v1.Video.UrisEntry
	0,  // 1: google.maps.aerialview.v1.Video.state:type_name -> google.maps.aerialview.v1.Video.State
	3,  // 2: google.maps.aerialview.v1.Video.metadata:type_name -> google.maps.aerialview.v1.VideoMetadata
	8,  // 3: google.maps.aerialview.v1.VideoMetadata.capture_date:type_name -> google.type.Date
	9,  // 4: google.maps.aerialview.v1.VideoMetadata.duration:type_name -> google.protobuf.Duration
	0,  // 5: google.maps.aerialview.v1.RenderVideoResponse.state:type_name -> google.maps.aerialview.v1.Video.State
	3,  // 6: google.maps.aerialview.v1.RenderVideoResponse.metadata:type_name -> google.maps.aerialview.v1.VideoMetadata
	2,  // 7: google.maps.aerialview.v1.Video.UrisEntry.value:type_name -> google.maps.aerialview.v1.Uris
	4,  // 8: google.maps.aerialview.v1.AerialView.RenderVideo:input_type -> google.maps.aerialview.v1.RenderVideoRequest
	6,  // 9: google.maps.aerialview.v1.AerialView.LookupVideo:input_type -> google.maps.aerialview.v1.LookupVideoRequest
	5,  // 10: google.maps.aerialview.v1.AerialView.RenderVideo:output_type -> google.maps.aerialview.v1.RenderVideoResponse
	1,  // 11: google.maps.aerialview.v1.AerialView.LookupVideo:output_type -> google.maps.aerialview.v1.Video
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_google_maps_aerialview_v1_aerial_view_proto_init() }
func file_google_maps_aerialview_v1_aerial_view_proto_init() {
	if File_google_maps_aerialview_v1_aerial_view_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Uris); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*VideoMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RenderVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RenderVideoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LookupVideoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_maps_aerialview_v1_aerial_view_proto_msgTypes[5].OneofWrappers = []any{
		(*LookupVideoRequest_VideoId)(nil),
		(*LookupVideoRequest_Address)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_maps_aerialview_v1_aerial_view_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_maps_aerialview_v1_aerial_view_proto_goTypes,
		DependencyIndexes: file_google_maps_aerialview_v1_aerial_view_proto_depIdxs,
		EnumInfos:         file_google_maps_aerialview_v1_aerial_view_proto_enumTypes,
		MessageInfos:      file_google_maps_aerialview_v1_aerial_view_proto_msgTypes,
	}.Build()
	File_google_maps_aerialview_v1_aerial_view_proto = out.File
	file_google_maps_aerialview_v1_aerial_view_proto_rawDesc = nil
	file_google_maps_aerialview_v1_aerial_view_proto_goTypes = nil
	file_google_maps_aerialview_v1_aerial_view_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AerialViewClient is the client API for AerialView service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AerialViewClient interface {
	// Adds an address to the renderer's queue if a video hasn't already been
	// rendered. Otherwise, returns metadata about the video.
	RenderVideo(ctx context.Context, in *RenderVideoRequest, opts ...grpc.CallOption) (*RenderVideoResponse, error)
	// Fetches a video given its address or videoId. The response will either be
	// a video with a set of playback URIs for ACTIVE videos, a PROCESSING state
	// for pending videos, or a 404 error if the video does not exist. Receiving a
	// video is a billable event, so callers of this method should be ready to use
	// the returned URIs at the time of request.
	LookupVideo(ctx context.Context, in *LookupVideoRequest, opts ...grpc.CallOption) (*Video, error)
}

type aerialViewClient struct {
	cc grpc.ClientConnInterface
}

func NewAerialViewClient(cc grpc.ClientConnInterface) AerialViewClient {
	return &aerialViewClient{cc}
}

func (c *aerialViewClient) RenderVideo(ctx context.Context, in *RenderVideoRequest, opts ...grpc.CallOption) (*RenderVideoResponse, error) {
	out := new(RenderVideoResponse)
	err := c.cc.Invoke(ctx, "/google.maps.aerialview.v1.AerialView/RenderVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aerialViewClient) LookupVideo(ctx context.Context, in *LookupVideoRequest, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, "/google.maps.aerialview.v1.AerialView/LookupVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AerialViewServer is the server API for AerialView service.
type AerialViewServer interface {
	// Adds an address to the renderer's queue if a video hasn't already been
	// rendered. Otherwise, returns metadata about the video.
	RenderVideo(context.Context, *RenderVideoRequest) (*RenderVideoResponse, error)
	// Fetches a video given its address or videoId. The response will either be
	// a video with a set of playback URIs for ACTIVE videos, a PROCESSING state
	// for pending videos, or a 404 error if the video does not exist. Receiving a
	// video is a billable event, so callers of this method should be ready to use
	// the returned URIs at the time of request.
	LookupVideo(context.Context, *LookupVideoRequest) (*Video, error)
}

// UnimplementedAerialViewServer can be embedded to have forward compatible implementations.
type UnimplementedAerialViewServer struct {
}

func (*UnimplementedAerialViewServer) RenderVideo(context.Context, *RenderVideoRequest) (*RenderVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderVideo not implemented")
}
func (*UnimplementedAerialViewServer) LookupVideo(context.Context, *LookupVideoRequest) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupVideo not implemented")
}

func RegisterAerialViewServer(s *grpc.Server, srv AerialViewServer) {
	s.RegisterService(&_AerialView_serviceDesc, srv)
}

func _AerialView_RenderVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerialViewServer).RenderVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.maps.aerialview.v1.AerialView/RenderVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerialViewServer).RenderVideo(ctx, req.(*RenderVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AerialView_LookupVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AerialViewServer).LookupVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.maps.aerialview.v1.AerialView/LookupVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AerialViewServer).LookupVideo(ctx, req.(*LookupVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AerialView_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.maps.aerialview.v1.AerialView",
	HandlerType: (*AerialViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderVideo",
			Handler:    _AerialView_RenderVideo_Handler,
		},
		{
			MethodName: "LookupVideo",
			Handler:    _AerialView_LookupVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/maps/aerialview/v1/aerial_view.proto",
}
