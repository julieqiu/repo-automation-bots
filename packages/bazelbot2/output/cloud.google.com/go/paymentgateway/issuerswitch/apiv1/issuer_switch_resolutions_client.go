// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package issuerswitch

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	issuerswitchpb "cloud.google.com/go/paymentgateway/issuerswitch/apiv1/issuerswitchpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/proto"
)

var newIssuerSwitchResolutionsClientHook clientHook

// IssuerSwitchResolutionsCallOptions contains the retry settings for each method of IssuerSwitchResolutionsClient.
type IssuerSwitchResolutionsCallOptions struct {
	CreateComplaint  []gax.CallOption
	ResolveComplaint []gax.CallOption
	CreateDispute    []gax.CallOption
	ResolveDispute   []gax.CallOption
	GetOperation     []gax.CallOption
	ListOperations   []gax.CallOption
}

func defaultIssuerSwitchResolutionsGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("issuerswitch.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("issuerswitch.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("issuerswitch.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://issuerswitch.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIssuerSwitchResolutionsCallOptions() *IssuerSwitchResolutionsCallOptions {
	return &IssuerSwitchResolutionsCallOptions{
		CreateComplaint: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ResolveComplaint: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		CreateDispute: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ResolveDispute: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

// internalIssuerSwitchResolutionsClient is an interface that defines the methods available from Issuer switch API.
type internalIssuerSwitchResolutionsClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateComplaint(context.Context, *issuerswitchpb.CreateComplaintRequest, ...gax.CallOption) (*CreateComplaintOperation, error)
	CreateComplaintOperation(name string) *CreateComplaintOperation
	ResolveComplaint(context.Context, *issuerswitchpb.ResolveComplaintRequest, ...gax.CallOption) (*ResolveComplaintOperation, error)
	ResolveComplaintOperation(name string) *ResolveComplaintOperation
	CreateDispute(context.Context, *issuerswitchpb.CreateDisputeRequest, ...gax.CallOption) (*CreateDisputeOperation, error)
	CreateDisputeOperation(name string) *CreateDisputeOperation
	ResolveDispute(context.Context, *issuerswitchpb.ResolveDisputeRequest, ...gax.CallOption) (*ResolveDisputeOperation, error)
	ResolveDisputeOperation(name string) *ResolveDisputeOperation
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// IssuerSwitchResolutionsClient is a client for interacting with Issuer switch API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Creates and resolves UPI complaints and disputes.
type IssuerSwitchResolutionsClient struct {
	// The internal transport-dependent client.
	internalClient internalIssuerSwitchResolutionsClient

	// The call options for this service.
	CallOptions *IssuerSwitchResolutionsCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IssuerSwitchResolutionsClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IssuerSwitchResolutionsClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *IssuerSwitchResolutionsClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateComplaint create a complaint. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	CreateComplaintMetadata
//
//	response:
//	Complaint
func (c *IssuerSwitchResolutionsClient) CreateComplaint(ctx context.Context, req *issuerswitchpb.CreateComplaintRequest, opts ...gax.CallOption) (*CreateComplaintOperation, error) {
	return c.internalClient.CreateComplaint(ctx, req, opts...)
}

// CreateComplaintOperation returns a new CreateComplaintOperation from a given name.
// The name must be that of a previously created CreateComplaintOperation, possibly from a different process.
func (c *IssuerSwitchResolutionsClient) CreateComplaintOperation(name string) *CreateComplaintOperation {
	return c.internalClient.CreateComplaintOperation(name)
}

// ResolveComplaint resolve a complaint. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ResolveComplaintMetadata
//
//	response:
//	Complaint
func (c *IssuerSwitchResolutionsClient) ResolveComplaint(ctx context.Context, req *issuerswitchpb.ResolveComplaintRequest, opts ...gax.CallOption) (*ResolveComplaintOperation, error) {
	return c.internalClient.ResolveComplaint(ctx, req, opts...)
}

// ResolveComplaintOperation returns a new ResolveComplaintOperation from a given name.
// The name must be that of a previously created ResolveComplaintOperation, possibly from a different process.
func (c *IssuerSwitchResolutionsClient) ResolveComplaintOperation(name string) *ResolveComplaintOperation {
	return c.internalClient.ResolveComplaintOperation(name)
}

// CreateDispute create a dispute. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	CreateDisputeMetadata
//
//	response:
//	Dispute
func (c *IssuerSwitchResolutionsClient) CreateDispute(ctx context.Context, req *issuerswitchpb.CreateDisputeRequest, opts ...gax.CallOption) (*CreateDisputeOperation, error) {
	return c.internalClient.CreateDispute(ctx, req, opts...)
}

// CreateDisputeOperation returns a new CreateDisputeOperation from a given name.
// The name must be that of a previously created CreateDisputeOperation, possibly from a different process.
func (c *IssuerSwitchResolutionsClient) CreateDisputeOperation(name string) *CreateDisputeOperation {
	return c.internalClient.CreateDisputeOperation(name)
}

// ResolveDispute resolve a dispute. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ResolveDisputeMetadata
//
//	response:
//	Dispute
func (c *IssuerSwitchResolutionsClient) ResolveDispute(ctx context.Context, req *issuerswitchpb.ResolveDisputeRequest, opts ...gax.CallOption) (*ResolveDisputeOperation, error) {
	return c.internalClient.ResolveDispute(ctx, req, opts...)
}

// ResolveDisputeOperation returns a new ResolveDisputeOperation from a given name.
// The name must be that of a previously created ResolveDisputeOperation, possibly from a different process.
func (c *IssuerSwitchResolutionsClient) ResolveDisputeOperation(name string) *ResolveDisputeOperation {
	return c.internalClient.ResolveDisputeOperation(name)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchResolutionsClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchResolutionsClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// issuerSwitchResolutionsGRPCClient is a client for interacting with Issuer switch API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type issuerSwitchResolutionsGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing IssuerSwitchResolutionsClient
	CallOptions **IssuerSwitchResolutionsCallOptions

	// The gRPC API client.
	issuerSwitchResolutionsClient issuerswitchpb.IssuerSwitchResolutionsClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewIssuerSwitchResolutionsClient creates a new issuer switch resolutions client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Creates and resolves UPI complaints and disputes.
func NewIssuerSwitchResolutionsClient(ctx context.Context, opts ...option.ClientOption) (*IssuerSwitchResolutionsClient, error) {
	clientOpts := defaultIssuerSwitchResolutionsGRPCClientOptions()
	if newIssuerSwitchResolutionsClientHook != nil {
		hookOpts, err := newIssuerSwitchResolutionsClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IssuerSwitchResolutionsClient{CallOptions: defaultIssuerSwitchResolutionsCallOptions()}

	c := &issuerSwitchResolutionsGRPCClient{
		connPool:                      connPool,
		issuerSwitchResolutionsClient: issuerswitchpb.NewIssuerSwitchResolutionsClient(connPool),
		CallOptions:                   &client.CallOptions,
		operationsClient:              longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *issuerSwitchResolutionsGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *issuerSwitchResolutionsGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *issuerSwitchResolutionsGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *issuerSwitchResolutionsGRPCClient) CreateComplaint(ctx context.Context, req *issuerswitchpb.CreateComplaintRequest, opts ...gax.CallOption) (*CreateComplaintOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateComplaint[0:len((*c.CallOptions).CreateComplaint):len((*c.CallOptions).CreateComplaint)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchResolutionsClient.CreateComplaint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateComplaintOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchResolutionsGRPCClient) ResolveComplaint(ctx context.Context, req *issuerswitchpb.ResolveComplaintRequest, opts ...gax.CallOption) (*ResolveComplaintOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "complaint.name", url.QueryEscape(req.GetComplaint().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ResolveComplaint[0:len((*c.CallOptions).ResolveComplaint):len((*c.CallOptions).ResolveComplaint)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchResolutionsClient.ResolveComplaint(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ResolveComplaintOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchResolutionsGRPCClient) CreateDispute(ctx context.Context, req *issuerswitchpb.CreateDisputeRequest, opts ...gax.CallOption) (*CreateDisputeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateDispute[0:len((*c.CallOptions).CreateDispute):len((*c.CallOptions).CreateDispute)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchResolutionsClient.CreateDispute(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateDisputeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchResolutionsGRPCClient) ResolveDispute(ctx context.Context, req *issuerswitchpb.ResolveDisputeRequest, opts ...gax.CallOption) (*ResolveDisputeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "dispute.name", url.QueryEscape(req.GetDispute().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ResolveDispute[0:len((*c.CallOptions).ResolveDispute):len((*c.CallOptions).ResolveDispute)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchResolutionsClient.ResolveDispute(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ResolveDisputeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchResolutionsGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchResolutionsGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateComplaintOperation returns a new CreateComplaintOperation from a given name.
// The name must be that of a previously created CreateComplaintOperation, possibly from a different process.
func (c *issuerSwitchResolutionsGRPCClient) CreateComplaintOperation(name string) *CreateComplaintOperation {
	return &CreateComplaintOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateDisputeOperation returns a new CreateDisputeOperation from a given name.
// The name must be that of a previously created CreateDisputeOperation, possibly from a different process.
func (c *issuerSwitchResolutionsGRPCClient) CreateDisputeOperation(name string) *CreateDisputeOperation {
	return &CreateDisputeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ResolveComplaintOperation returns a new ResolveComplaintOperation from a given name.
// The name must be that of a previously created ResolveComplaintOperation, possibly from a different process.
func (c *issuerSwitchResolutionsGRPCClient) ResolveComplaintOperation(name string) *ResolveComplaintOperation {
	return &ResolveComplaintOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ResolveDisputeOperation returns a new ResolveDisputeOperation from a given name.
// The name must be that of a previously created ResolveDisputeOperation, possibly from a different process.
func (c *issuerSwitchResolutionsGRPCClient) ResolveDisputeOperation(name string) *ResolveDisputeOperation {
	return &ResolveDisputeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}
