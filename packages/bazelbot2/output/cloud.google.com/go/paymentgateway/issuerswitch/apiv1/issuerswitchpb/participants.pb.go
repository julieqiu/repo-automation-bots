// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/paymentgateway/issuerswitch/v1/participants.proto

package issuerswitchpb

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the participant.
type IssuerParticipant_State int32

const (
	// Unspecified state.
	IssuerParticipant_STATE_UNSPECIFIED IssuerParticipant_State = 0
	// The participant is inactive for all UPI transactions. The issuer switch
	// will return the `AM` error to the UPI payments orchestrator for any
	// operation involving MPIN verification for the participant. They need to
	// register with UPI again and provide a new MPIN.
	IssuerParticipant_INACTIVE IssuerParticipant_State = 1
	// The participant is active for all UPI transactions.
	IssuerParticipant_ACTIVE IssuerParticipant_State = 2
	// The participants MPIN has been locked because they have exceeded the
	// threshold for maximum number of incorrect MPIN verification attempts. No
	// UPI transactions will be permitted until the participant's MPIN has been
	// reset.
	IssuerParticipant_MPIN_LOCKED IssuerParticipant_State = 3
	// The participants mobile number has been changed in the issuer bank. Any
	// transaction involving MPIN verification of the participant will return a
	// `B1` error to the UPI payments orchestrator. The user will be forced to
	// re-register with their changed mobile number.
	IssuerParticipant_MOBILE_NUMBER_CHANGED IssuerParticipant_State = 4
	// The participant is registering for UPI transactions for the first time.
	IssuerParticipant_NEW_REGISTRATION_INITIATED IssuerParticipant_State = 5
	// The participant had already registered for UPI transactions but is now
	// registering again or resetting their MPIN.
	IssuerParticipant_RE_REGISTRATION_INITIATED IssuerParticipant_State = 6
)

// Enum value maps for IssuerParticipant_State.
var (
	IssuerParticipant_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "INACTIVE",
		2: "ACTIVE",
		3: "MPIN_LOCKED",
		4: "MOBILE_NUMBER_CHANGED",
		5: "NEW_REGISTRATION_INITIATED",
		6: "RE_REGISTRATION_INITIATED",
	}
	IssuerParticipant_State_value = map[string]int32{
		"STATE_UNSPECIFIED":          0,
		"INACTIVE":                   1,
		"ACTIVE":                     2,
		"MPIN_LOCKED":                3,
		"MOBILE_NUMBER_CHANGED":      4,
		"NEW_REGISTRATION_INITIATED": 5,
		"RE_REGISTRATION_INITIATED":  6,
	}
)

func (x IssuerParticipant_State) Enum() *IssuerParticipant_State {
	p := new(IssuerParticipant_State)
	*p = x
	return p
}

func (x IssuerParticipant_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssuerParticipant_State) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_enumTypes[0].Descriptor()
}

func (IssuerParticipant_State) Type() protoreflect.EnumType {
	return &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_enumTypes[0]
}

func (x IssuerParticipant_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssuerParticipant_State.Descriptor instead.
func (IssuerParticipant_State) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{1, 0}
}

// Request for the
// [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
// method.
type FetchParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource for the participants. The format is
	// `projects/{project}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The account details of the issuer participant.
	AccountReference *AccountReference `protobuf:"bytes,2,opt,name=account_reference,json=accountReference,proto3" json:"account_reference,omitempty"`
}

func (x *FetchParticipantRequest) Reset() {
	*x = FetchParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchParticipantRequest) ProtoMessage() {}

func (x *FetchParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchParticipantRequest.ProtoReflect.Descriptor instead.
func (*FetchParticipantRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{0}
}

func (x *FetchParticipantRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *FetchParticipantRequest) GetAccountReference() *AccountReference {
	if x != nil {
		return x.AccountReference
	}
	return nil
}

// A customer of the bank who participates in transactions processed by the
// issuer switch.
type IssuerParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The account details of the issuer participant. Only the
	// account_number and ifsc fields will be used.
	AccountReference *AccountReference `protobuf:"bytes,1,opt,name=account_reference,json=accountReference,proto3" json:"account_reference,omitempty"`
	// Output only. The mobile number of the participant.
	MobileNumber string `protobuf:"bytes,2,opt,name=mobile_number,json=mobileNumber,proto3" json:"mobile_number,omitempty"`
	// Output only. The current state of the participant.
	State IssuerParticipant_State `protobuf:"varint,3,opt,name=state,proto3,enum=google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant_State" json:"state,omitempty"`
	// Optional. Additional metadata about the participant.
	Metadata *IssuerParticipant_Metadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Output only. The current count of consecutive incorrect MPIN attempts.
	MpinFailureCount int32 `protobuf:"varint,5,opt,name=mpin_failure_count,json=mpinFailureCount,proto3" json:"mpin_failure_count,omitempty"`
	// Output only. The time when participant's MPIN got locked due to too many
	// incorrect attempts.
	MpinLockedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=mpin_locked_time,json=mpinLockedTime,proto3" json:"mpin_locked_time,omitempty"`
	// Output only. The time when the participant's account was onboarded to PGIS.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Output only. The time when the participant was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *IssuerParticipant) Reset() {
	*x = IssuerParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerParticipant) ProtoMessage() {}

func (x *IssuerParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerParticipant.ProtoReflect.Descriptor instead.
func (*IssuerParticipant) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{1}
}

func (x *IssuerParticipant) GetAccountReference() *AccountReference {
	if x != nil {
		return x.AccountReference
	}
	return nil
}

func (x *IssuerParticipant) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *IssuerParticipant) GetState() IssuerParticipant_State {
	if x != nil {
		return x.State
	}
	return IssuerParticipant_STATE_UNSPECIFIED
}

func (x *IssuerParticipant) GetMetadata() *IssuerParticipant_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IssuerParticipant) GetMpinFailureCount() int32 {
	if x != nil {
		return x.MpinFailureCount
	}
	return 0
}

func (x *IssuerParticipant) GetMpinLockedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MpinLockedTime
	}
	return nil
}

func (x *IssuerParticipant) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *IssuerParticipant) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Request for the
// [UpdateIssuerParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.UpdateIssuerParticipant]
// method.
type UpdateIssuerParticipantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource for the participants. The format is
	// `projects/{project}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Required. The participant to update.
	IssuerParticipant *IssuerParticipant `protobuf:"bytes,2,opt,name=issuer_participant,json=issuerParticipant,proto3" json:"issuer_participant,omitempty"`
	// Required. The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateIssuerParticipantRequest) Reset() {
	*x = UpdateIssuerParticipantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateIssuerParticipantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateIssuerParticipantRequest) ProtoMessage() {}

func (x *UpdateIssuerParticipantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateIssuerParticipantRequest.ProtoReflect.Descriptor instead.
func (*UpdateIssuerParticipantRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateIssuerParticipantRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *UpdateIssuerParticipantRequest) GetIssuerParticipant() *IssuerParticipant {
	if x != nil {
		return x.IssuerParticipant
	}
	return nil
}

func (x *UpdateIssuerParticipantRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// Request for the
// [ActivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant],
// [DeactivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant]
// and
// [MobileNumberUpdated][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged]
// methods.
type ParticipantStateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The parent resource for the participant. The format is
	// `projects/{project}`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The identifier for the issuer participant. One of the two values must be
	// specified.
	//
	// Types that are assignable to Id:
	//
	//	*ParticipantStateChangeRequest_AccountReference
	//	*ParticipantStateChangeRequest_MobileNumber
	Id isParticipantStateChangeRequest_Id `protobuf_oneof:"id"`
}

func (x *ParticipantStateChangeRequest) Reset() {
	*x = ParticipantStateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStateChangeRequest) ProtoMessage() {}

func (x *ParticipantStateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStateChangeRequest.ProtoReflect.Descriptor instead.
func (*ParticipantStateChangeRequest) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{3}
}

func (x *ParticipantStateChangeRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (m *ParticipantStateChangeRequest) GetId() isParticipantStateChangeRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ParticipantStateChangeRequest) GetAccountReference() *AccountReference {
	if x, ok := x.GetId().(*ParticipantStateChangeRequest_AccountReference); ok {
		return x.AccountReference
	}
	return nil
}

func (x *ParticipantStateChangeRequest) GetMobileNumber() string {
	if x, ok := x.GetId().(*ParticipantStateChangeRequest_MobileNumber); ok {
		return x.MobileNumber
	}
	return ""
}

type isParticipantStateChangeRequest_Id interface {
	isParticipantStateChangeRequest_Id()
}

type ParticipantStateChangeRequest_AccountReference struct {
	// Optional. The account details of the issuer participant.
	AccountReference *AccountReference `protobuf:"bytes,2,opt,name=account_reference,json=accountReference,proto3,oneof"`
}

type ParticipantStateChangeRequest_MobileNumber struct {
	// Optional. The mobile number of the issuer participant.
	MobileNumber string `protobuf:"bytes,3,opt,name=mobile_number,json=mobileNumber,proto3,oneof"`
}

func (*ParticipantStateChangeRequest_AccountReference) isParticipantStateChangeRequest_Id() {}

func (*ParticipantStateChangeRequest_MobileNumber) isParticipantStateChangeRequest_Id() {}

// Response for the
// [ActivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant],
// [DeactivateParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant]
// and
// [MobileNumberChanged][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged]
// methods.
type IssuerParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The list of updated participants.
	Participants []*IssuerParticipant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *IssuerParticipants) Reset() {
	*x = IssuerParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerParticipants) ProtoMessage() {}

func (x *IssuerParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerParticipants.ProtoReflect.Descriptor instead.
func (*IssuerParticipants) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{4}
}

func (x *IssuerParticipants) GetParticipants() []*IssuerParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

// The metadata of the participant.
type IssuerParticipant_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Additional metadata about a particular participant as key-value
	// pairs. These values are returned by the bank adapter/card adapter in
	// response to the SearchAccounts/InitiateRegistration APIs.
	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IssuerParticipant_Metadata) Reset() {
	*x = IssuerParticipant_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssuerParticipant_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuerParticipant_Metadata) ProtoMessage() {}

func (x *IssuerParticipant_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuerParticipant_Metadata.ProtoReflect.Descriptor instead.
func (*IssuerParticipant_Metadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP(), []int{1, 0}
}

func (x *IssuerParticipant_Metadata) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_google_cloud_paymentgateway_issuerswitch_v1_participants_proto protoreflect.FileDescriptor

var file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xdb, 0x07, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x6f, 0x0a, 0x11, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x0a, 0x12, 0x6d, 0x70, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x10, 0x6d, 0x70, 0x69, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x6d, 0x70, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x6d,
	0x70, 0x69, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x70,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x50, 0x49, 0x4e, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x42, 0x49, 0x4c,
	0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x06, 0x22, 0xf3, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x72, 0x0a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe1, 0x01, 0x0a, 0x1d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x12, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x67, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x32, 0xa1, 0x0a, 0x0a, 0x18, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x44, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a, 0x22, 0x30, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x9d, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x4b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x75, 0xda, 0x41, 0x25, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x2c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x12, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x31, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0xe2, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x3a, 0x01, 0x2a, 0x22,
	0x33, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0xe6, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x4a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x40, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x3a, 0x01, 0x2a, 0x22, 0x35, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x3a, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0xed, 0x01,
	0x0a, 0x13, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x22, 0x3e, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x3a, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x4f, 0xca,
	0x41, 0x1b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0xd2, 0x41, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0xa9,
	0x02, 0x0a, 0x2f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x42, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x53, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x62, 0x3b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x62, 0xaa, 0x02, 0x2b, 0x47,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x2b, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x2f, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x3a, 0x3a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescOnce sync.Once
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescData = file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDesc
)

func file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescGZIP() []byte {
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescOnce.Do(func() {
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescData)
	})
	return file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDescData
}

var file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_goTypes = []any{
	(IssuerParticipant_State)(0),           // 0: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State
	(*FetchParticipantRequest)(nil),        // 1: google.cloud.paymentgateway.issuerswitch.v1.FetchParticipantRequest
	(*IssuerParticipant)(nil),              // 2: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant
	(*UpdateIssuerParticipantRequest)(nil), // 3: google.cloud.paymentgateway.issuerswitch.v1.UpdateIssuerParticipantRequest
	(*ParticipantStateChangeRequest)(nil),  // 4: google.cloud.paymentgateway.issuerswitch.v1.ParticipantStateChangeRequest
	(*IssuerParticipants)(nil),             // 5: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipants
	(*IssuerParticipant_Metadata)(nil),     // 6: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.Metadata
	nil,                                    // 7: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.Metadata.ValuesEntry
	(*AccountReference)(nil),               // 8: google.cloud.paymentgateway.issuerswitch.v1.AccountReference
	(*timestamppb.Timestamp)(nil),          // 9: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),          // 10: google.protobuf.FieldMask
}
var file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_depIdxs = []int32{
	8,  // 0: google.cloud.paymentgateway.issuerswitch.v1.FetchParticipantRequest.account_reference:type_name -> google.cloud.paymentgateway.issuerswitch.v1.AccountReference
	8,  // 1: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.account_reference:type_name -> google.cloud.paymentgateway.issuerswitch.v1.AccountReference
	0,  // 2: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.state:type_name -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State
	6,  // 3: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata:type_name -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.Metadata
	9,  // 4: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.mpin_locked_time:type_name -> google.protobuf.Timestamp
	9,  // 5: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.create_time:type_name -> google.protobuf.Timestamp
	9,  // 6: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.update_time:type_name -> google.protobuf.Timestamp
	2,  // 7: google.cloud.paymentgateway.issuerswitch.v1.UpdateIssuerParticipantRequest.issuer_participant:type_name -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant
	10, // 8: google.cloud.paymentgateway.issuerswitch.v1.UpdateIssuerParticipantRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 9: google.cloud.paymentgateway.issuerswitch.v1.ParticipantStateChangeRequest.account_reference:type_name -> google.cloud.paymentgateway.issuerswitch.v1.AccountReference
	2,  // 10: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipants.participants:type_name -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant
	7,  // 11: google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.Metadata.values:type_name -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.Metadata.ValuesEntry
	1,  // 12: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant:input_type -> google.cloud.paymentgateway.issuerswitch.v1.FetchParticipantRequest
	3,  // 13: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.UpdateIssuerParticipant:input_type -> google.cloud.paymentgateway.issuerswitch.v1.UpdateIssuerParticipantRequest
	4,  // 14: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant:input_type -> google.cloud.paymentgateway.issuerswitch.v1.ParticipantStateChangeRequest
	4,  // 15: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant:input_type -> google.cloud.paymentgateway.issuerswitch.v1.ParticipantStateChangeRequest
	4,  // 16: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged:input_type -> google.cloud.paymentgateway.issuerswitch.v1.ParticipantStateChangeRequest
	2,  // 17: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant:output_type -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant
	2,  // 18: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.UpdateIssuerParticipant:output_type -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant
	5,  // 19: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.ActivateParticipant:output_type -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipants
	5,  // 20: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.DeactivateParticipant:output_type -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipants
	5,  // 21: google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.MobileNumberChanged:output_type -> google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipants
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_init() }
func file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_init() {
	if File_google_cloud_paymentgateway_issuerswitch_v1_participants_proto != nil {
		return
	}
	file_google_cloud_paymentgateway_issuerswitch_v1_common_fields_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FetchParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IssuerParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateIssuerParticipantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ParticipantStateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IssuerParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*IssuerParticipant_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes[3].OneofWrappers = []any{
		(*ParticipantStateChangeRequest_AccountReference)(nil),
		(*ParticipantStateChangeRequest_MobileNumber)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_goTypes,
		DependencyIndexes: file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_depIdxs,
		EnumInfos:         file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_enumTypes,
		MessageInfos:      file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_msgTypes,
	}.Build()
	File_google_cloud_paymentgateway_issuerswitch_v1_participants_proto = out.File
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_rawDesc = nil
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_goTypes = nil
	file_google_cloud_paymentgateway_issuerswitch_v1_participants_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuerSwitchParticipantsClient is the client API for IssuerSwitchParticipants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuerSwitchParticipantsClient interface {
	// Fetch the issuer switch participant. This method can be used to retrieve
	// all details of a participant in the issuer switch.
	//
	// In UPI, the participant is identified by their account's IFSC and their
	// account number.
	FetchParticipant(ctx context.Context, in *FetchParticipantRequest, opts ...grpc.CallOption) (*IssuerParticipant, error)
	// Update the issuer switch participant. Currently, this API only allows for
	// the
	// [metadata][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata]
	// field to be updated.
	//
	// The `number` of key-value pairs in the `metadata` field, the length of each
	// `key` and the length of each `value` should be within the thresholds
	// defined for them in the issuer switch configuration. Any violation of these
	// thresholds will cause this API to return an error. The default values for
	// these thresholds are:
	//
	// * `Maximum number` of key-value pairs - `5`
	// * `Maximum length` of a key - `100`
	// * `Maximum length` of a value - `500`
	//
	// **Note** that this method replaces any existing `metadata` field value in
	// the participant with the new value. Specifically, it does not do a merge.
	// If key-value pairs are to be added/removed from the metadata, then
	// callers must follow the following steps:
	//
	//  1. Invoke the
	//     [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
	//     API to get the current value of the `metadata` field.
	//  1. Update the `metadata` map to add/remove key-value pairs from it.
	//  1. Update the `metadata` in the issuer switch using this method.
	UpdateIssuerParticipant(ctx context.Context, in *UpdateIssuerParticipantRequest, opts ...grpc.CallOption) (*IssuerParticipant, error)
	// Activate the issuer switch participant for UPI transactions. This API
	// sets the state of the participant to
	// [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE].
	// A participant in the `ACTIVE` state can perform all UPI operations
	// normally.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : If an _MPIN_ has already been provisioned for the participant, then
	//     this API will change the state of the participant to `ACTIVE`. Else,
	//     this API will return an error.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	ActivateParticipant(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error)
	// Deactivate the issuer switch participant for UPI transactions. This API
	// sets the state of the participant to
	// [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE].
	// An `INACTIVE` participant cannot perform any UPI operation which involves
	// MPIN verification.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : The state will change to `INACTIVE`. The user will be forced to
	//     re-register with UPI and reset their MPIN  to perform any UPI
	//     operations.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	DeactivateParticipant(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error)
	// Mark the state of the issuer switch participant as _mobile number changed_
	// to prevent UPI transactions by the user. This API sets the state of the
	// participant to
	// [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED].
	//
	// Any UPI operation for a participant in the `MOBILE_NUMBER_CHANGED` state
	// will cause the issuer switch to return a `B1` error to the UPI payments
	// orchestrator which would force the user to re-register with UPI.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `MOBILE_NUMBER_CHANGED`. This API will
	//     return an error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	MobileNumberChanged(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error)
}

type issuerSwitchParticipantsClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuerSwitchParticipantsClient(cc grpc.ClientConnInterface) IssuerSwitchParticipantsClient {
	return &issuerSwitchParticipantsClient{cc}
}

func (c *issuerSwitchParticipantsClient) FetchParticipant(ctx context.Context, in *FetchParticipantRequest, opts ...grpc.CallOption) (*IssuerParticipant, error) {
	out := new(IssuerParticipant)
	err := c.cc.Invoke(ctx, "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/FetchParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerSwitchParticipantsClient) UpdateIssuerParticipant(ctx context.Context, in *UpdateIssuerParticipantRequest, opts ...grpc.CallOption) (*IssuerParticipant, error) {
	out := new(IssuerParticipant)
	err := c.cc.Invoke(ctx, "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/UpdateIssuerParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerSwitchParticipantsClient) ActivateParticipant(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error) {
	out := new(IssuerParticipants)
	err := c.cc.Invoke(ctx, "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/ActivateParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerSwitchParticipantsClient) DeactivateParticipant(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error) {
	out := new(IssuerParticipants)
	err := c.cc.Invoke(ctx, "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/DeactivateParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issuerSwitchParticipantsClient) MobileNumberChanged(ctx context.Context, in *ParticipantStateChangeRequest, opts ...grpc.CallOption) (*IssuerParticipants, error) {
	out := new(IssuerParticipants)
	err := c.cc.Invoke(ctx, "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/MobileNumberChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerSwitchParticipantsServer is the server API for IssuerSwitchParticipants service.
type IssuerSwitchParticipantsServer interface {
	// Fetch the issuer switch participant. This method can be used to retrieve
	// all details of a participant in the issuer switch.
	//
	// In UPI, the participant is identified by their account's IFSC and their
	// account number.
	FetchParticipant(context.Context, *FetchParticipantRequest) (*IssuerParticipant, error)
	// Update the issuer switch participant. Currently, this API only allows for
	// the
	// [metadata][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.metadata]
	// field to be updated.
	//
	// The `number` of key-value pairs in the `metadata` field, the length of each
	// `key` and the length of each `value` should be within the thresholds
	// defined for them in the issuer switch configuration. Any violation of these
	// thresholds will cause this API to return an error. The default values for
	// these thresholds are:
	//
	// * `Maximum number` of key-value pairs - `5`
	// * `Maximum length` of a key - `100`
	// * `Maximum length` of a value - `500`
	//
	// **Note** that this method replaces any existing `metadata` field value in
	// the participant with the new value. Specifically, it does not do a merge.
	// If key-value pairs are to be added/removed from the metadata, then
	// callers must follow the following steps:
	//
	//  1. Invoke the
	//     [FetchParticipant][google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants.FetchParticipant]
	//     API to get the current value of the `metadata` field.
	//  1. Update the `metadata` map to add/remove key-value pairs from it.
	//  1. Update the `metadata` in the issuer switch using this method.
	UpdateIssuerParticipant(context.Context, *UpdateIssuerParticipantRequest) (*IssuerParticipant, error)
	// Activate the issuer switch participant for UPI transactions. This API
	// sets the state of the participant to
	// [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE].
	// A participant in the `ACTIVE` state can perform all UPI operations
	// normally.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : If an _MPIN_ has already been provisioned for the participant, then
	//     this API will change the state of the participant to `ACTIVE`. Else,
	//     this API will return an error.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `ACTIVE`. This API will return an
	//     error.
	ActivateParticipant(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error)
	// Deactivate the issuer switch participant for UPI transactions. This API
	// sets the state of the participant to
	// [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE].
	// An `INACTIVE` participant cannot perform any UPI operation which involves
	// MPIN verification.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : The state will change to `INACTIVE`. The user will be forced to
	//     re-register with UPI and reset their MPIN  to perform any UPI
	//     operations.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `INACTIVE`. This API will return an
	//     error.
	DeactivateParticipant(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error)
	// Mark the state of the issuer switch participant as _mobile number changed_
	// to prevent UPI transactions by the user. This API sets the state of the
	// participant to
	// [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED].
	//
	// Any UPI operation for a participant in the `MOBILE_NUMBER_CHANGED` state
	// will cause the issuer switch to return a `B1` error to the UPI payments
	// orchestrator which would force the user to re-register with UPI.
	//
	// The behavior of this API varies based on the current state of the
	// participant.
	//
	//   - Current state is
	//     [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	//   - Current state is
	//     [INACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.INACTIVE]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	//   - Current state is
	//     [MOBILE_NUMBER_CHANGED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.MOBILE_NUMBER_CHANGED]
	//     : This API will make no change to the participant's state and returns a
	//     successful response.
	//   - Current state is
	//     [NEW_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.NEW_REGISTRATION_INITIATED]
	//     : The state cannot be changed to `MOBILE_NUMBER_CHANGED`. This API will
	//     return an error.
	//   - Current state is
	//     [RE_REGISTRATION_INITIATED][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.RE_REGISTRATION_INITIATED]
	//     : The state will change to `MOBILE_NUMBER_CHANGED`. Any operation
	//     involving MPIN verification of the participant will return a `B1` error
	//     to the UPI payments orchestrator. The user will be forced to
	//     re-register with their changed mobile number.
	MobileNumberChanged(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error)
}

// UnimplementedIssuerSwitchParticipantsServer can be embedded to have forward compatible implementations.
type UnimplementedIssuerSwitchParticipantsServer struct {
}

func (*UnimplementedIssuerSwitchParticipantsServer) FetchParticipant(context.Context, *FetchParticipantRequest) (*IssuerParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchParticipant not implemented")
}
func (*UnimplementedIssuerSwitchParticipantsServer) UpdateIssuerParticipant(context.Context, *UpdateIssuerParticipantRequest) (*IssuerParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssuerParticipant not implemented")
}
func (*UnimplementedIssuerSwitchParticipantsServer) ActivateParticipant(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateParticipant not implemented")
}
func (*UnimplementedIssuerSwitchParticipantsServer) DeactivateParticipant(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateParticipant not implemented")
}
func (*UnimplementedIssuerSwitchParticipantsServer) MobileNumberChanged(context.Context, *ParticipantStateChangeRequest) (*IssuerParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MobileNumberChanged not implemented")
}

func RegisterIssuerSwitchParticipantsServer(s *grpc.Server, srv IssuerSwitchParticipantsServer) {
	s.RegisterService(&_IssuerSwitchParticipants_serviceDesc, srv)
}

func _IssuerSwitchParticipants_FetchParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerSwitchParticipantsServer).FetchParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/FetchParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerSwitchParticipantsServer).FetchParticipant(ctx, req.(*FetchParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerSwitchParticipants_UpdateIssuerParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssuerParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerSwitchParticipantsServer).UpdateIssuerParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/UpdateIssuerParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerSwitchParticipantsServer).UpdateIssuerParticipant(ctx, req.(*UpdateIssuerParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerSwitchParticipants_ActivateParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerSwitchParticipantsServer).ActivateParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/ActivateParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerSwitchParticipantsServer).ActivateParticipant(ctx, req.(*ParticipantStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerSwitchParticipants_DeactivateParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerSwitchParticipantsServer).DeactivateParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/DeactivateParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerSwitchParticipantsServer).DeactivateParticipant(ctx, req.(*ParticipantStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssuerSwitchParticipants_MobileNumberChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParticipantStateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerSwitchParticipantsServer).MobileNumberChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants/MobileNumberChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerSwitchParticipantsServer).MobileNumberChanged(ctx, req.(*ParticipantStateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssuerSwitchParticipants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.cloud.paymentgateway.issuerswitch.v1.IssuerSwitchParticipants",
	HandlerType: (*IssuerSwitchParticipantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchParticipant",
			Handler:    _IssuerSwitchParticipants_FetchParticipant_Handler,
		},
		{
			MethodName: "UpdateIssuerParticipant",
			Handler:    _IssuerSwitchParticipants_UpdateIssuerParticipant_Handler,
		},
		{
			MethodName: "ActivateParticipant",
			Handler:    _IssuerSwitchParticipants_ActivateParticipant_Handler,
		},
		{
			MethodName: "DeactivateParticipant",
			Handler:    _IssuerSwitchParticipants_DeactivateParticipant_Handler,
		},
		{
			MethodName: "MobileNumberChanged",
			Handler:    _IssuerSwitchParticipants_MobileNumberChanged_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/cloud/paymentgateway/issuerswitch/v1/participants.proto",
}
