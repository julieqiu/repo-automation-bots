// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package issuerswitch

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	issuerswitchpb "cloud.google.com/go/paymentgateway/issuerswitch/apiv1/issuerswitchpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/proto"
)

var newIssuerSwitchTransactionsClientHook clientHook

// IssuerSwitchTransactionsCallOptions contains the retry settings for each method of IssuerSwitchTransactionsClient.
type IssuerSwitchTransactionsCallOptions struct {
	ListMetadataTransactions    []gax.CallOption
	ListFinancialTransactions   []gax.CallOption
	ListMandateTransactions     []gax.CallOption
	ListComplaintTransactions   []gax.CallOption
	ExportFinancialTransactions []gax.CallOption
	ExportMetadataTransactions  []gax.CallOption
	ExportMandateTransactions   []gax.CallOption
	ExportComplaintTransactions []gax.CallOption
	GetOperation                []gax.CallOption
	ListOperations              []gax.CallOption
}

func defaultIssuerSwitchTransactionsGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("issuerswitch.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("issuerswitch.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("issuerswitch.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://issuerswitch.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIssuerSwitchTransactionsCallOptions() *IssuerSwitchTransactionsCallOptions {
	return &IssuerSwitchTransactionsCallOptions{
		ListMetadataTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListFinancialTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListMandateTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListComplaintTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportFinancialTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportMetadataTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportMandateTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ExportComplaintTransactions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

// internalIssuerSwitchTransactionsClient is an interface that defines the methods available from Issuer switch API.
type internalIssuerSwitchTransactionsClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListMetadataTransactions(context.Context, *issuerswitchpb.ListMetadataTransactionsRequest, ...gax.CallOption) *MetadataTransactionIterator
	ListFinancialTransactions(context.Context, *issuerswitchpb.ListFinancialTransactionsRequest, ...gax.CallOption) *FinancialTransactionIterator
	ListMandateTransactions(context.Context, *issuerswitchpb.ListMandateTransactionsRequest, ...gax.CallOption) *MandateTransactionIterator
	ListComplaintTransactions(context.Context, *issuerswitchpb.ListComplaintTransactionsRequest, ...gax.CallOption) *ComplaintTransactionIterator
	ExportFinancialTransactions(context.Context, *issuerswitchpb.ExportFinancialTransactionsRequest, ...gax.CallOption) (*ExportFinancialTransactionsOperation, error)
	ExportFinancialTransactionsOperation(name string) *ExportFinancialTransactionsOperation
	ExportMetadataTransactions(context.Context, *issuerswitchpb.ExportMetadataTransactionsRequest, ...gax.CallOption) (*ExportMetadataTransactionsOperation, error)
	ExportMetadataTransactionsOperation(name string) *ExportMetadataTransactionsOperation
	ExportMandateTransactions(context.Context, *issuerswitchpb.ExportMandateTransactionsRequest, ...gax.CallOption) (*ExportMandateTransactionsOperation, error)
	ExportMandateTransactionsOperation(name string) *ExportMandateTransactionsOperation
	ExportComplaintTransactions(context.Context, *issuerswitchpb.ExportComplaintTransactionsRequest, ...gax.CallOption) (*ExportComplaintTransactionsOperation, error)
	ExportComplaintTransactionsOperation(name string) *ExportComplaintTransactionsOperation
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// IssuerSwitchTransactionsClient is a client for interacting with Issuer switch API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Fetch the issuer switch participant.
// Lists and exports transactions processed by the issuer switch.
type IssuerSwitchTransactionsClient struct {
	// The internal transport-dependent client.
	internalClient internalIssuerSwitchTransactionsClient

	// The call options for this service.
	CallOptions *IssuerSwitchTransactionsCallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IssuerSwitchTransactionsClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IssuerSwitchTransactionsClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *IssuerSwitchTransactionsClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListMetadataTransactions list metadata transactions that satisfy the specified filter criteria.
func (c *IssuerSwitchTransactionsClient) ListMetadataTransactions(ctx context.Context, req *issuerswitchpb.ListMetadataTransactionsRequest, opts ...gax.CallOption) *MetadataTransactionIterator {
	return c.internalClient.ListMetadataTransactions(ctx, req, opts...)
}

// ListFinancialTransactions list financial transactions that satisfy specified filter criteria.
func (c *IssuerSwitchTransactionsClient) ListFinancialTransactions(ctx context.Context, req *issuerswitchpb.ListFinancialTransactionsRequest, opts ...gax.CallOption) *FinancialTransactionIterator {
	return c.internalClient.ListFinancialTransactions(ctx, req, opts...)
}

// ListMandateTransactions list mandate transactions that satisfy specified filter criteria.
func (c *IssuerSwitchTransactionsClient) ListMandateTransactions(ctx context.Context, req *issuerswitchpb.ListMandateTransactionsRequest, opts ...gax.CallOption) *MandateTransactionIterator {
	return c.internalClient.ListMandateTransactions(ctx, req, opts...)
}

// ListComplaintTransactions list complaint transactions that satisfy specified filter criteria.
func (c *IssuerSwitchTransactionsClient) ListComplaintTransactions(ctx context.Context, req *issuerswitchpb.ListComplaintTransactionsRequest, opts ...gax.CallOption) *ComplaintTransactionIterator {
	return c.internalClient.ListComplaintTransactions(ctx, req, opts...)
}

// ExportFinancialTransactions export financial transactions received within the specified time range as a
// file into a configured target location. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ExportFinancialTransactionsMetadata
//
//	response:
//	ExportFinancialTransactionsResponse
//
// The exported file will be in the standard CSV format where each row in the
// file represents a transaction. The file has the following fields in order:
//
// TransactionID
//
//	Min Length - 35 characters
//
//	Max Length - 35 characters
//
//	Description - UPI transaction ID.
//
// TransactionType
//
//	Min Length - 22 characters
//
//	Max Length - 25 characters
//
//	Description - Type of the transaction. This will be one of
//	TRANSACTION_TYPE_CREDIT, TRANSACTION_TYPE_DEBIT or
//	TRANSACTION_TYPE_REVERSAL.
//
// TransactionSubType
//
//	Min Length - 3 characters
//
//	Max Length - 7 characters
//
//	Description - Subtype of the transaction. This will be one of
//	COLLECT, or PAY.
//
// CreationTime
//
//	Min Length - 20 characters
//
//	Max Length - 20 characters
//
//	Description - Timestamp (in UTC) indicating when the issuer
//	switch created the transaction resource for processing the transaction.
//	The format will be as per RFC-3339. Example : 2022-11-22T23:00:05Z
//
// State
//
//	Min Length - 6 characters
//
//	Max Length - 9 characters
//
//	Description - State of the transaction. This will be one of
//	FAILED, SUCCEEDED, or TIMED_OUT.
//
// RRN
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Retrieval reference number associated with the
//	transaction.
//
// PayerVPA
//
//	Min Length - 3 characters
//
//	Max Length - 255 characters
//
//	Description - Virtual Payment Address (VPA) of the payer.
//
// PayerMobileNumber
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Mobile number of the payer.
//
// PayerIFSC
//
//	Min Length - 11 characters
//
//	Max Length - 11 characters
//
//	Description - IFSC of the payer’s bank account.
//
// PayerAccountNumber
//
//	Min Length - 1 characters
//
//	Max Length - 30 characters
//
//	Description - Payer’s bank account number.
//
// PayerAccountType
//
//	Min Length - 3 characters
//
//	Max Length - 7 characters
//
//	Description - Payer’s bank account type. This will be one of
//	SAVINGS, DEFAULT, CURRENT, NRE, NRO, PPIWALLET,
//	BANKWALLET, CREDIT, SOD, or UOD.
//
// PayeeVPA
//
//	Min Length - 3 characters
//
//	Max Length - 255 characters
//
//	Description - Virtual Payment Address (VPA) of the payee.
//
// PayeeMobileNumber
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Payee’s mobile number.
//
// PayeeIFSC
//
//	Min Length - 11 characters
//
//	Max Length - 11 characters
//
//	Description - IFSC of the payee’s bank account.
//
// PayeeAccountNumber
//
//	Min Length - 1 characters
//
//	Max Length - 30 characters
//
//	Description - Payee’s bank account number.
//
// PayeeAccountType
//
//	Min Length - 3 characters
//
//	Max Length - 10 characters
//
//	Description - Payee’s bank account type. This will be one of
//	SAVINGS, DEFAULT, CURRENT, NRE, NRO, PPIWALLET,
//	BANKWALLET, CREDIT, SOD, or UOD.
//
// PayeeMerchantID
//
//	Min Length - 1 characters
//
//	Max Length - 255 characters
//
//	Description - Payee’s merchant ID, only if the payee is a
//	merchant.
//
// PayeeMerchantName
//
//	Min Length - 1 characters
//
//	Max Length - 99 characters
//
//	Description - Payee’s merchant name, only if the payee is a
//	merchant.
//
// PayeeMCC
//
//	Min Length - 4 characters
//
//	Max Length - 4 characters
//
//	Description - Payee’s Merchant Category Code (MCC), only if the
//	payee is a merchant.
//
// Currency
//
//	Min Length - 3 characters
//
//	Max Length - 3 characters
//
//	Description - Currency of the amount involved in the transaction.
//	The currency codes are defined in ISO 4217.
//
// Amount
//
//	Description - Amount involved in the transaction.
//
// AdapterRequestIDs
//
//	Min Length - 0 characters
//
//	Max Length - 2,000 characters
//
//	Description - List of adapter request IDs (colon separated) used
//	when invoking the Adapter APIs for fulfilling a transaction request.
//
// ErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Error code of a failed transaction.
//
// ErrorMessage
//
//	Min Length - 0 characters
//
//	Max Length - 10,000 characters
//
//	Description - Error description for a failed transaction.
//
// UPIErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 3 characters
//
//	Description - Error code as per the UPI specification. The issuer
//	switch maps the ErrorCode to an appropriate error code that complies
//	with the UPI specification.
//
// PayerDeviceInfoTypeAppName
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Payment application name on the payer’s device.
//
// PayerDeviceInfoTypeCapability
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Capability of the payer’s device.
//
// PayerDeviceInfoTypeGeoCode
//
//	Min Length - 0 characters
//
//	Max Length - 15 characters
//
//	Description - Geo code of the payer’s device. This will include
//	floating point values for latitude and longitude (separated by colon).
//
// PayerDeviceInfoTypeID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Device ID of the payer’s device.
//
// PayerDeviceInfoTypeIP
//
//	Min Length - 0 characters
//
//	Max Length - 39 characters
//
//	Description - IP address of the payer’s device.
//
// PayerDeviceInfoTypeLocation
//
//	Min Length - 0 characters
//
//	Max Length - 40 characters
//
//	Description - Coarse location of the payer’s device.
//
// PayerDeviceInfoTypeOS
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Operating system on the payer’s device.
//
// PayerDeviceInfoTypeTelecomProvider
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Telecom provider for the payer’s device.
//
// PayerDeviceInfoTypeDeviceType
//
//	Min Length - 0 characters
//
//	Max Length - 9 characters
//
//	Description - Type of the payer’s device. This will be one of
//	‘MOB’, ‘INET’, ‘USDC/USDB’, ‘POS’.
//
// PayeeDeviceInfoTypeAppName
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Payment application name on the payee’s device.
//
// PayeeDeviceInfoTypeCapability
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Capability of the payee’s device.
//
// PayeeDeviceInfoTypeGeoCode
//
//	Min Length - 0 characters
//
//	Max Length - 15 characters
//
//	Description - Geo code of the payee’s device. This will include
//	floating point values for latitude and longitude (separated by colon).
//
// PayeeDeviceInfoTypeID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Device ID of the payee’s device.
//
// PayeeDeviceInfoTypeIP
//
//	Min Length - 0 characters
//
//	Max Length - 39 characters
//
//	Description - IP address of the payee’s device.
//
// PayeeDeviceInfoTypeLocation
//
//	Min Length - 0 characters
//
//	Max Length - 40 characters
//
//	Description - Coarse location of the payee’s device.
//
// PayeeDeviceInfoTypeOS
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Operating system on the payee’s device.
//
// PayeeDeviceInfoTypeTelecomProvider
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Telecom provider for the payee’s device.
//
// PayeeDeviceInfoTypeDeviceType
//
//	Min Length - 0 characters
//
//	Max Length - 9 characters
//
//	Description - Type of the payee’s device. This will be one of
//	‘MOB’, ‘INET’, ‘USDC/USDB’, ‘POS’.
//
// ReferenceID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Consumer reference number to identify loan number,
//	order id etc.
//
// ReferenceURI
//
//	Min Length - 1 characters
//
//	Max Length - 35 characters
//
//	Description - URL for the  transaction.
//
// ReferenceCategory
//
//	Min Length - 2 characters
//
//	Max Length - 2 characters
//
//	Description - Reference category.
func (c *IssuerSwitchTransactionsClient) ExportFinancialTransactions(ctx context.Context, req *issuerswitchpb.ExportFinancialTransactionsRequest, opts ...gax.CallOption) (*ExportFinancialTransactionsOperation, error) {
	return c.internalClient.ExportFinancialTransactions(ctx, req, opts...)
}

// ExportFinancialTransactionsOperation returns a new ExportFinancialTransactionsOperation from a given name.
// The name must be that of a previously created ExportFinancialTransactionsOperation, possibly from a different process.
func (c *IssuerSwitchTransactionsClient) ExportFinancialTransactionsOperation(name string) *ExportFinancialTransactionsOperation {
	return c.internalClient.ExportFinancialTransactionsOperation(name)
}

// ExportMetadataTransactions export metadata transactions received within the specified time range as a
// file into a configured target location. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ExportMetadataTransactionsMetadata
//
//	response:
//	ExportMetadataTransactionsResponse
//
// The exported file will be in the standard CSV format where each row in the
// file represents a transaction. The file has the following fields in order:
//
// TransactionID
//
//	Min Length - 35 characters
//
//	Max Length - 35 characters
//
//	Description - UPI transaction ID.
//
// APIType
//
//	Description - The transaction’s API type. The value will be of
//	the ApiType
//	enum.
//
// TransactionType
//
//	Description - Type of the transaction. The value will be of the
//	TransactionType
//	enum.
//
// CreationTime
//
//	Min Length - 20 characters
//
//	Max Length - 20 characters
//
//	Description - Timestamp (in UTC) indicating when the issuer
//	switch created the transaction resource for processing the transaction.
//	The format will be as per RFC-3339. Example : 2022-11-22T23:00:05Z
//
// State
//
//	Min Length - 6 characters
//
//	Max Length - 9 characters
//
//	Description - State of the transaction. This will be one of
//	FAILED, SUCCEEDED, or TIMED_OUT.
//
// OriginVPA
//
//	Min Length - 3 characters
//
//	Max Length - 255 characters
//
//	Description - Virtual Payment Address (VPA) of the originator of
//	the transaction.
//
// AdapterRequestIDs
//
//	Min Length - 0 characters
//
//	Max Length - 2,000 characters
//
//	Description - List of adapter request IDs (colon separated) used
//	when invoking the Adapter APIs for fulfilling a transaction request.
//
// ErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Error code of the failed transaction.
//
// ErrorMessage
//
//	Min Length - 0 characters
//
//	Max Length - 10,000 characters
//
//	Description - Error description for the failed transaction.
//
// UPIErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 3 characters
//
//	Description - Error code as per the UPI specification. The issuer
//	switch maps the ErrorCode to an appropriate error code that complies
//	with the UPI specification.
func (c *IssuerSwitchTransactionsClient) ExportMetadataTransactions(ctx context.Context, req *issuerswitchpb.ExportMetadataTransactionsRequest, opts ...gax.CallOption) (*ExportMetadataTransactionsOperation, error) {
	return c.internalClient.ExportMetadataTransactions(ctx, req, opts...)
}

// ExportMetadataTransactionsOperation returns a new ExportMetadataTransactionsOperation from a given name.
// The name must be that of a previously created ExportMetadataTransactionsOperation, possibly from a different process.
func (c *IssuerSwitchTransactionsClient) ExportMetadataTransactionsOperation(name string) *ExportMetadataTransactionsOperation {
	return c.internalClient.ExportMetadataTransactionsOperation(name)
}

// ExportMandateTransactions export mandate transactions received within the specified time range as a
// file into a configured target location. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ExportMandateTransactionsMetadata
//
//	response:
//	ExportMandateTransactionsResponse
//
// The exported file will be in the standard CSV format where each row in the
// file represents a transaction. The file has the following fields in order:
//
// TransactionID
//
//	Min Length - 35 characters
//
//	Max Length - 35 characters
//
//	Description - UPI transaction ID.
//
// UniqueMandateNumber
//
//	Min Length - 3 characters
//
//	Max Length - 70 characters
//
//	Description - UPI Unique Mandate Number.
//
// TransactionType
//
//	Min Length - 23 characters
//
//	Max Length - 23 characters
//
//	Description - Type of the transaction. This will be one of
//	TRANSACTION_TYPE_CREATE, TRANSACTION_TYPE_REVOKE,
//	TRANSACTION_TYPE_UPDATE, TRANSACTION_TYPE_PAUSE or
//	TRANSACTION_TYPE_UNPAUSE.
//
// CreationTime
//
//	Min Length - 20 characters
//
//	Max Length - 20 characters
//
//	Description - Timestamp (in UTC) indicating when the issuer
//	switch created the transaction resource for processing the transaction.
//	The format will be as per RFC-3339. Example : 2022-11-22T23:00:05Z
//
// State
//
//	Min Length - 6 characters
//
//	Max Length - 9 characters
//
//	Description - State of the transaction. This will be one of
//	FAILED, SUCCEEDED, or TIMED_OUT.
//
// PayerVPA
//
//	Min Length - 3 characters
//
//	Max Length - 255 characters
//
//	Description - Virtual Payment Address (VPA) of the payer.
//
// PayerMobileNumber
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Mobile number of the payer.
//
// PayerIFSC
//
//	Min Length - 11 characters
//
//	Max Length - 11 characters
//
//	Description - IFSC of the payer’s bank account.
//
// PayerAccountNumber
//
//	Min Length - 1 characters
//
//	Max Length - 30 characters
//
//	Description - Payer’s bank account number.
//
// PayerAccountType
//
//	Min Length - 3 characters
//
//	Max Length - 7 characters
//
//	Description - Payer’s bank account type. This will be one of
//	SAVINGS, DEFAULT, CURRENT, NRE, NRO, PPIWALLET,
//	BANKWALLET, CREDIT, SOD, or UOD.
//
// PayeeVPA
//
//	Min Length - 3 characters
//
//	Max Length - 255 characters
//
//	Description - Virtual Payment Address (VPA) of the payee.
//
// PayeeMobileNumber
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Mobile number of the payee.
//
// PayeeIFSC
//
//	Min Length - 11 characters
//
//	Max Length - 11 characters
//
//	Description - IFSC of the payee’s bank account.
//
// PayeeAccountNumber
//
//	Min Length - 1 characters
//
//	Max Length - 30 characters
//
//	Description - Payee’s bank account number.
//
// PayeeAccountType
//
//	Min Length - 3 characters
//
//	Max Length - 10 characters
//
//	Description - Payee’s bank account type. This will be one of
//	SAVINGS, DEFAULT, CURRENT, NRE, NRO, PPIWALLET,
//	BANKWALLET, CREDIT, SOD, or UOD.
//
// PayeeMerchantID
//
//	Min Length - 1 characters
//
//	Max Length - 30 characters
//
//	Description - Payee’s merchant ID, only if the payee is a
//	merchant
//
// PayeeMerchantName
//
//	Min Length - 1 characters
//
//	Max Length - 99 characters
//
//	Description - Payee’s merchant name, only if the payee is a
//	merchant.
//
// PayeeMCC
//
//	Min Length - 4 characters
//
//	Max Length - 4 characters
//
//	Description - Payee’s Merchant Category Code (MCC), only if the
//	payee is a merchant.
//
// Amount
//
//	Description - Amount specified in the mandate.
//
// RecurrencePattern
//
//	Description - Reccurence pattern of the mandate. The value will
//	be of the
//	MandateTransaction.RecurrencePatternType
//	enum.
//
// RecurrenceRuleType
//
//	Description - Reccurrence rule type of the mandate. The value
//	will be of the
//	MandateTransaction.RecurrenceRuleType
//	enum.
//
// RecurrenceRuleValue
//
//	Min Length - 0 characters
//
//	Max Length - 2 characters
//
//	Description - Recurrence rule value of the mandate. This will be
//	an integer between 1 and 31.
//
// Revokeable
//
//	Min Length - 4 characters
//
//	Max Length - 5 characters
//
//	Description - Boolean value specifying if the mandate is
//	revokable.
//
// StartDate
//
//	Min Length - 10 characters
//
//	Max Length - 10 characters
//
//	Description - The start date of the mandate in DD-MM-YYYY
//	format.
//
// EndDate
//
//	Min Length - 10 characters
//
//	Max Length - 10 characters
//
//	Description - The end date of the mandate in DD-MM-YYYY format.
//
// AmountRuleType
//
//	Description - The amount rule of the mandate. The value will be
//	of the
//	MandateTransaction.AmountRuleType
//	enum.
//
// ApprovalReference
//
//	Min Length - 6 characters
//
//	Max Length - 9 characters
//
//	Description - The block funds reference generated by the bank, if
//	funds have been blocked for the mandate. This column will have a value
//	only when the RecurrencePattern is ONETIME.
//
// BlockFunds
//
//	Min Length - 4 characters
//
//	Max Length - 5 characters
//
//	Description - Boolean value specifying if the mandate transaction
//	requested to block funds.
//
// LastUpdateTime
//
//	Min Length - 20 characters
//
//	Max Length - 20 characters
//
//	Description - Timestamp (in UTC) indicating when was the last
//	modification made to the mandate. The format will be as per RFC-3339.
//	Example : 2022-11-22T23:00:05Z
//
// AdapterRequestIDs
//
//	Min Length - 0 characters
//
//	Max Length - 2,000 characters
//
//	Description - List of adapter request IDs (colon separated) used
//	when invoking the Adapter APIs for fulfilling a transaction request.
//
// ErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Error code of the failed transaction.
//
// ErrorMessage
//
//	Min Length - 0 characters
//
//	Max Length - 10,000 characters
//
//	Description - Error description for the failed transaction.
//
// UPIErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 3 characters
//
//	Description - Error code as per the UPI specification. The issuer
//	switch maps the ErrorCode to an appropriate error code that complies
//	with the UPI specification.
//
// PayerDeviceInfoTypeAppName
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Payment application name on the payer’s device.
//
// PayerDeviceInfoTypeCapability
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Capability of the payer’s device.
//
// PayerDeviceInfoTypeGeoCode
//
//	Min Length - 0 characters
//
//	Max Length - 15 characters
//
//	Description - Geo code of the payer’s device. This will include
//	floating point values for latitude and longitude (separated by colon).
//
// PayerDeviceInfoTypeID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Device ID of the payer’s device.
//
// PayerDeviceInfoTypeIP
//
//	Min Length - 0 characters
//
//	Max Length - 39 characters
//
//	Description - IP address of the payer’s device.
//
// PayerDeviceInfoTypeLocation
//
//	Min Length - 0 characters
//
//	Max Length - 40 characters
//
//	Description - Coarse location of the payer’s device.
//
// PayerDeviceInfoTypeOS
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Operating system on the payer’s device.
//
// PayerDeviceInfoTypeTelecomProvider
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Telecom provider for the payer’s device.
//
// PayerDeviceInfoTypeDeviceType
//
//	Min Length - 0 characters
//
//	Max Length - 9 characters
//
//	Description - Type of the payer’s device. This will be one of
//	‘MOB’, ‘INET’, ‘USDC/USDB’, ‘POS’.
//
// PayeeDeviceInfoTypeAppName
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Payment application name on the payee’s device.
//
// PayeeDeviceInfoTypeCapability
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Capability of the payee’s device.
//
// PayeeDeviceInfoTypeGeoCode
//
//	Min Length - 0 characters
//
//	Max Length - 15 characters
//
//	Description - Geo code of the payee’s device. This will include
//	floating point values for latitude and longitude (separated by colon).
//
// PayeeDeviceInfoTypeID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Device ID of the payee’s device.
//
// PayeeDeviceInfoTypeIP
//
//	Min Length - 0 characters
//
//	Max Length - 39 characters
//
//	Description - IP address of the payee’s device.
//
// PayeeDeviceInfoTypeLocation
//
//	Min Length - 0 characters
//
//	Max Length - 40 characters
//
//	Description - Coarse location of the payee’s device.
//
// PayeeDeviceInfoTypeOS
//
//	Min Length - 0 characters
//
//	Max Length - 20 characters
//
//	Description - Operating system on the payee’s device.
//
// PayeeDeviceInfoTypeTelecomProvider
//
//	Min Length - 0 characters
//
//	Max Length - 99 characters
//
//	Description - Telecom provider for the payee’s device.
//
// PayeeDeviceInfoTypeDeviceType
//
//	Min Length - 0 characters
//
//	Max Length - 9 characters
//
//	Description - Type of the payee’s device. This will be one of
//	MOB, INET, USDC/USDB, POS.
//
// ReferenceID
//
//	Min Length - 0 characters
//
//	Max Length - 35 characters
//
//	Description - Consumer reference number to identify loan number,
//	order id etc.
//
// ReferenceURI
//
//	Min Length - 1 characters
//
//	Max Length - 35 characters
//
//	Description - URL for the  transaction.
//
// ReferenceCategory
//
//	Min Length - 2 characters
//
//	Max Length - 2 characters
//
//	Description - Reference category.
//
// MandateName
//
//	Min Length - 1 characters
//
//	Max Length - 255 characters
//
//	Description - The mandate’s name.
func (c *IssuerSwitchTransactionsClient) ExportMandateTransactions(ctx context.Context, req *issuerswitchpb.ExportMandateTransactionsRequest, opts ...gax.CallOption) (*ExportMandateTransactionsOperation, error) {
	return c.internalClient.ExportMandateTransactions(ctx, req, opts...)
}

// ExportMandateTransactionsOperation returns a new ExportMandateTransactionsOperation from a given name.
// The name must be that of a previously created ExportMandateTransactionsOperation, possibly from a different process.
func (c *IssuerSwitchTransactionsClient) ExportMandateTransactionsOperation(name string) *ExportMandateTransactionsOperation {
	return c.internalClient.ExportMandateTransactionsOperation(name)
}

// ExportComplaintTransactions export complaint transactions received within the specified time range as a
// file into a configured target location. The returned Operation type has
// the following method-specific fields:
//
//	metadata:
//	ExportComplaintTransactionsMetadata
//
//	response:
//	ExportComplaintTransactionsResponse
//
// The exported file will be in the standard CSV format where each row in the
// file represents a transaction. The file has the following fields in order:
//
// TransactionID
//
//	Min Length - 35 characters
//
//	Max Length - 35 characters
//
//	Description - UPI transaction ID.
//
// TransactionType
//
//	Min Length - 23 characters
//
//	Max Length - 30 characters
//
//	Description - Type of the transaction. This will be one of
//	TRANSACTION_TYPE_CHECK_STATUS, TRANSACTION_TYPE_COMPLAINT,
//	TRANSACTION_TYPE_REVERSAL, TRANSACTION_TYPE_DISPUTE,
//	TRANSACTION_TYPE_REFUND, or TRANSACTION_TYPE_STATUS_UPDATE.
//
// CreationTime
//
//	Min Length - 20 characters
//
//	Max Length - 20 characters
//
//	Description - Timestamp (in UTC) indicating when the issuer
//	switch created the transaction resource for processing the transaction.
//	The format will be as per RFC-3339. Example : 2022-11-22T23:00:05Z
//	1: State
//
//	Min Length - 6 characters
//
//	Max Length - 9 characters
//
//	Description - State of the transaction. This will be one of
//	FAILED, SUCCEEDED, or TIMED_OUT.
//
// OriginalRRN
//
//	Min Length - 12 characters
//
//	Max Length - 12 characters
//
//	Description - Retrieval reference number of the original payment
//	transaction.
//
// BankType
//
//	Min Length - 8 characters
//
//	Max Length - 11 characters
//
//	Description - The subtype of the transaction based on the bank
//	involved. This will be one of BENEFICIARY, or REMITTER.
//
// OriginalTransactionID
//
//	Min Length - 35 characters
//
//	Max Length - 35 characters
//
//	Description - Transaction ID of the original unresolved
//	transaction.
//
// RaiseComplaintAdjFlag
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the type of action to raise the
//	complaint.
//
// RaiseComplaintAdjCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the reason of action to raise the
//	complaint.
//
// ResolveComplaintAdjFlag
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the type of action to resolve the
//	complaint.
//
// ResolveComplaintAdjCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the reason of action to resolve the
//	complaint.
//
// RaiseDisputeAdjFlag
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the type of action to raise the dispute.
//
// RaiseDisputeAdjCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the reason of action to raise the
//	dispute.
//
// ResolveDisputeAdjFlag
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the type of action to resolve the
//	dispute.
//
// ResolveDisputeAdjCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the reason of action to resolve the
//	dispute.
//
// Amount
//
//	Description - Amount to be resolved.
//
// CurrentCycle
//
//	Min Length - 4 characters
//
//	Max Length - 5 characters
//
//	Description - Boolean value specifying if the complaint / dispute
//	belongs to current settlement cycle or not.
//
// CRN
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Defines the Complaint Reference number.
//
// AdjTime
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the time when the resolution was done.
//
// RespAdjFlag
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the response category type.
//
// RespAdjCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the response reason used.
//
// AdjRemarks
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Indicates the additional remarks for the complaint
//	/ dispute.
//
// AdapterRequestIDs
//
//	Min Length - 0 characters
//
//	Max Length - 2,000 characters
//
//	Description - List of adapter request IDs (colon separated) used
//	when invoking the Adapter APIs for fulfilling a transaction request.
//
// ErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 255 characters
//
//	Description - Error code of the failed transaction.
//
// ErrorMessage
//
//	Min Length - 0 characters
//
//	Max Length - 10,000 characters
//
//	Description - Error description for the failed transaction.
//
// UPIErrorCode
//
//	Min Length - 0 characters
//
//	Max Length - 3 characters
//
//	Description - Error code as per the UPI specification. The issuer
//	switch service maps the ErrorCode to an appropriate error code that
//	complies with the UPI specification.
func (c *IssuerSwitchTransactionsClient) ExportComplaintTransactions(ctx context.Context, req *issuerswitchpb.ExportComplaintTransactionsRequest, opts ...gax.CallOption) (*ExportComplaintTransactionsOperation, error) {
	return c.internalClient.ExportComplaintTransactions(ctx, req, opts...)
}

// ExportComplaintTransactionsOperation returns a new ExportComplaintTransactionsOperation from a given name.
// The name must be that of a previously created ExportComplaintTransactionsOperation, possibly from a different process.
func (c *IssuerSwitchTransactionsClient) ExportComplaintTransactionsOperation(name string) *ExportComplaintTransactionsOperation {
	return c.internalClient.ExportComplaintTransactionsOperation(name)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchTransactionsClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchTransactionsClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// issuerSwitchTransactionsGRPCClient is a client for interacting with Issuer switch API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type issuerSwitchTransactionsGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing IssuerSwitchTransactionsClient
	CallOptions **IssuerSwitchTransactionsCallOptions

	// The gRPC API client.
	issuerSwitchTransactionsClient issuerswitchpb.IssuerSwitchTransactionsClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewIssuerSwitchTransactionsClient creates a new issuer switch transactions client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Fetch the issuer switch participant.
// Lists and exports transactions processed by the issuer switch.
func NewIssuerSwitchTransactionsClient(ctx context.Context, opts ...option.ClientOption) (*IssuerSwitchTransactionsClient, error) {
	clientOpts := defaultIssuerSwitchTransactionsGRPCClientOptions()
	if newIssuerSwitchTransactionsClientHook != nil {
		hookOpts, err := newIssuerSwitchTransactionsClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IssuerSwitchTransactionsClient{CallOptions: defaultIssuerSwitchTransactionsCallOptions()}

	c := &issuerSwitchTransactionsGRPCClient{
		connPool:                       connPool,
		issuerSwitchTransactionsClient: issuerswitchpb.NewIssuerSwitchTransactionsClient(connPool),
		CallOptions:                    &client.CallOptions,
		operationsClient:               longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *issuerSwitchTransactionsGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *issuerSwitchTransactionsGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *issuerSwitchTransactionsGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *issuerSwitchTransactionsGRPCClient) ListMetadataTransactions(ctx context.Context, req *issuerswitchpb.ListMetadataTransactionsRequest, opts ...gax.CallOption) *MetadataTransactionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListMetadataTransactions[0:len((*c.CallOptions).ListMetadataTransactions):len((*c.CallOptions).ListMetadataTransactions)], opts...)
	it := &MetadataTransactionIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListMetadataTransactionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.MetadataTransaction, string, error) {
		resp := &issuerswitchpb.ListMetadataTransactionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchTransactionsClient.ListMetadataTransactions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetMetadataTransactions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchTransactionsGRPCClient) ListFinancialTransactions(ctx context.Context, req *issuerswitchpb.ListFinancialTransactionsRequest, opts ...gax.CallOption) *FinancialTransactionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListFinancialTransactions[0:len((*c.CallOptions).ListFinancialTransactions):len((*c.CallOptions).ListFinancialTransactions)], opts...)
	it := &FinancialTransactionIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListFinancialTransactionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.FinancialTransaction, string, error) {
		resp := &issuerswitchpb.ListFinancialTransactionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchTransactionsClient.ListFinancialTransactions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetFinancialTransactions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchTransactionsGRPCClient) ListMandateTransactions(ctx context.Context, req *issuerswitchpb.ListMandateTransactionsRequest, opts ...gax.CallOption) *MandateTransactionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListMandateTransactions[0:len((*c.CallOptions).ListMandateTransactions):len((*c.CallOptions).ListMandateTransactions)], opts...)
	it := &MandateTransactionIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListMandateTransactionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.MandateTransaction, string, error) {
		resp := &issuerswitchpb.ListMandateTransactionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchTransactionsClient.ListMandateTransactions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetMandateTransactions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchTransactionsGRPCClient) ListComplaintTransactions(ctx context.Context, req *issuerswitchpb.ListComplaintTransactionsRequest, opts ...gax.CallOption) *ComplaintTransactionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListComplaintTransactions[0:len((*c.CallOptions).ListComplaintTransactions):len((*c.CallOptions).ListComplaintTransactions)], opts...)
	it := &ComplaintTransactionIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListComplaintTransactionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.ComplaintTransaction, string, error) {
		resp := &issuerswitchpb.ListComplaintTransactionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchTransactionsClient.ListComplaintTransactions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetComplaintTransactions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchTransactionsGRPCClient) ExportFinancialTransactions(ctx context.Context, req *issuerswitchpb.ExportFinancialTransactionsRequest, opts ...gax.CallOption) (*ExportFinancialTransactionsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportFinancialTransactions[0:len((*c.CallOptions).ExportFinancialTransactions):len((*c.CallOptions).ExportFinancialTransactions)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchTransactionsClient.ExportFinancialTransactions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportFinancialTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchTransactionsGRPCClient) ExportMetadataTransactions(ctx context.Context, req *issuerswitchpb.ExportMetadataTransactionsRequest, opts ...gax.CallOption) (*ExportMetadataTransactionsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportMetadataTransactions[0:len((*c.CallOptions).ExportMetadataTransactions):len((*c.CallOptions).ExportMetadataTransactions)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchTransactionsClient.ExportMetadataTransactions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportMetadataTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchTransactionsGRPCClient) ExportMandateTransactions(ctx context.Context, req *issuerswitchpb.ExportMandateTransactionsRequest, opts ...gax.CallOption) (*ExportMandateTransactionsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportMandateTransactions[0:len((*c.CallOptions).ExportMandateTransactions):len((*c.CallOptions).ExportMandateTransactions)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchTransactionsClient.ExportMandateTransactions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportMandateTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchTransactionsGRPCClient) ExportComplaintTransactions(ctx context.Context, req *issuerswitchpb.ExportComplaintTransactionsRequest, opts ...gax.CallOption) (*ExportComplaintTransactionsOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ExportComplaintTransactions[0:len((*c.CallOptions).ExportComplaintTransactions):len((*c.CallOptions).ExportComplaintTransactions)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchTransactionsClient.ExportComplaintTransactions(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ExportComplaintTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *issuerSwitchTransactionsGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchTransactionsGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// ExportComplaintTransactionsOperation returns a new ExportComplaintTransactionsOperation from a given name.
// The name must be that of a previously created ExportComplaintTransactionsOperation, possibly from a different process.
func (c *issuerSwitchTransactionsGRPCClient) ExportComplaintTransactionsOperation(name string) *ExportComplaintTransactionsOperation {
	return &ExportComplaintTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportFinancialTransactionsOperation returns a new ExportFinancialTransactionsOperation from a given name.
// The name must be that of a previously created ExportFinancialTransactionsOperation, possibly from a different process.
func (c *issuerSwitchTransactionsGRPCClient) ExportFinancialTransactionsOperation(name string) *ExportFinancialTransactionsOperation {
	return &ExportFinancialTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportMandateTransactionsOperation returns a new ExportMandateTransactionsOperation from a given name.
// The name must be that of a previously created ExportMandateTransactionsOperation, possibly from a different process.
func (c *issuerSwitchTransactionsGRPCClient) ExportMandateTransactionsOperation(name string) *ExportMandateTransactionsOperation {
	return &ExportMandateTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ExportMetadataTransactionsOperation returns a new ExportMetadataTransactionsOperation from a given name.
// The name must be that of a previously created ExportMetadataTransactionsOperation, possibly from a different process.
func (c *issuerSwitchTransactionsGRPCClient) ExportMetadataTransactionsOperation(name string) *ExportMetadataTransactionsOperation {
	return &ExportMetadataTransactionsOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}
