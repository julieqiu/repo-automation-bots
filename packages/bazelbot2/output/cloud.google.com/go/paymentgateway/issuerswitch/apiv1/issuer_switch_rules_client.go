// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package issuerswitch

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	issuerswitchpb "cloud.google.com/go/paymentgateway/issuerswitch/apiv1/issuerswitchpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/proto"
)

var newIssuerSwitchRulesClientHook clientHook

// IssuerSwitchRulesCallOptions contains the retry settings for each method of IssuerSwitchRulesClient.
type IssuerSwitchRulesCallOptions struct {
	ListRules                     []gax.CallOption
	ListRuleMetadata              []gax.CallOption
	ListRuleMetadataValues        []gax.CallOption
	BatchCreateRuleMetadataValues []gax.CallOption
	BatchDeleteRuleMetadataValues []gax.CallOption
	GetOperation                  []gax.CallOption
	ListOperations                []gax.CallOption
}

func defaultIssuerSwitchRulesGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("issuerswitch.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("issuerswitch.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("issuerswitch.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://issuerswitch.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIssuerSwitchRulesCallOptions() *IssuerSwitchRulesCallOptions {
	return &IssuerSwitchRulesCallOptions{
		ListRules: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListRuleMetadata: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ListRuleMetadataValues: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		BatchCreateRuleMetadataValues: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		BatchDeleteRuleMetadataValues: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

// internalIssuerSwitchRulesClient is an interface that defines the methods available from Issuer switch API.
type internalIssuerSwitchRulesClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListRules(context.Context, *issuerswitchpb.ListRulesRequest, ...gax.CallOption) *RuleIterator
	ListRuleMetadata(context.Context, *issuerswitchpb.ListRuleMetadataRequest, ...gax.CallOption) *RuleMetadataIterator
	ListRuleMetadataValues(context.Context, *issuerswitchpb.ListRuleMetadataValuesRequest, ...gax.CallOption) *RuleMetadataValueIterator
	BatchCreateRuleMetadataValues(context.Context, *issuerswitchpb.BatchCreateRuleMetadataValuesRequest, ...gax.CallOption) (*issuerswitchpb.BatchCreateRuleMetadataValuesResponse, error)
	BatchDeleteRuleMetadataValues(context.Context, *issuerswitchpb.BatchDeleteRuleMetadataValuesRequest, ...gax.CallOption) error
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// IssuerSwitchRulesClient is a client for interacting with Issuer switch API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Manages rules used by the issuer switchâ€™s rules engine.
type IssuerSwitchRulesClient struct {
	// The internal transport-dependent client.
	internalClient internalIssuerSwitchRulesClient

	// The call options for this service.
	CallOptions *IssuerSwitchRulesCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IssuerSwitchRulesClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IssuerSwitchRulesClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *IssuerSwitchRulesClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListRules list all rules that are applied on transactions by the issuer switch. Rules
// can be filtered on API type and transaction type.
func (c *IssuerSwitchRulesClient) ListRules(ctx context.Context, req *issuerswitchpb.ListRulesRequest, opts ...gax.CallOption) *RuleIterator {
	return c.internalClient.ListRules(ctx, req, opts...)
}

// ListRuleMetadata list all rule metadata for a given rule identifier.
func (c *IssuerSwitchRulesClient) ListRuleMetadata(ctx context.Context, req *issuerswitchpb.ListRuleMetadataRequest, opts ...gax.CallOption) *RuleMetadataIterator {
	return c.internalClient.ListRuleMetadata(ctx, req, opts...)
}

// ListRuleMetadataValues list all metadata values for a rule metadata identifier.
func (c *IssuerSwitchRulesClient) ListRuleMetadataValues(ctx context.Context, req *issuerswitchpb.ListRuleMetadataValuesRequest, opts ...gax.CallOption) *RuleMetadataValueIterator {
	return c.internalClient.ListRuleMetadataValues(ctx, req, opts...)
}

// BatchCreateRuleMetadataValues create (add) multiple values to the list of values under the specified rule
// metadata resource.
func (c *IssuerSwitchRulesClient) BatchCreateRuleMetadataValues(ctx context.Context, req *issuerswitchpb.BatchCreateRuleMetadataValuesRequest, opts ...gax.CallOption) (*issuerswitchpb.BatchCreateRuleMetadataValuesResponse, error) {
	return c.internalClient.BatchCreateRuleMetadataValues(ctx, req, opts...)
}

// BatchDeleteRuleMetadataValues delete (remove) multiple values from the list of values under the specified
// rules metadata resource.
func (c *IssuerSwitchRulesClient) BatchDeleteRuleMetadataValues(ctx context.Context, req *issuerswitchpb.BatchDeleteRuleMetadataValuesRequest, opts ...gax.CallOption) error {
	return c.internalClient.BatchDeleteRuleMetadataValues(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchRulesClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchRulesClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// issuerSwitchRulesGRPCClient is a client for interacting with Issuer switch API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type issuerSwitchRulesGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing IssuerSwitchRulesClient
	CallOptions **IssuerSwitchRulesCallOptions

	// The gRPC API client.
	issuerSwitchRulesClient issuerswitchpb.IssuerSwitchRulesClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewIssuerSwitchRulesClient creates a new issuer switch rules client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Manages rules used by the issuer switchâ€™s rules engine.
func NewIssuerSwitchRulesClient(ctx context.Context, opts ...option.ClientOption) (*IssuerSwitchRulesClient, error) {
	clientOpts := defaultIssuerSwitchRulesGRPCClientOptions()
	if newIssuerSwitchRulesClientHook != nil {
		hookOpts, err := newIssuerSwitchRulesClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IssuerSwitchRulesClient{CallOptions: defaultIssuerSwitchRulesCallOptions()}

	c := &issuerSwitchRulesGRPCClient{
		connPool:                connPool,
		issuerSwitchRulesClient: issuerswitchpb.NewIssuerSwitchRulesClient(connPool),
		CallOptions:             &client.CallOptions,
		operationsClient:        longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *issuerSwitchRulesGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *issuerSwitchRulesGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *issuerSwitchRulesGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *issuerSwitchRulesGRPCClient) ListRules(ctx context.Context, req *issuerswitchpb.ListRulesRequest, opts ...gax.CallOption) *RuleIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRules[0:len((*c.CallOptions).ListRules):len((*c.CallOptions).ListRules)], opts...)
	it := &RuleIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListRulesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.Rule, string, error) {
		resp := &issuerswitchpb.ListRulesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchRulesClient.ListRules(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRules(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchRulesGRPCClient) ListRuleMetadata(ctx context.Context, req *issuerswitchpb.ListRuleMetadataRequest, opts ...gax.CallOption) *RuleMetadataIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRuleMetadata[0:len((*c.CallOptions).ListRuleMetadata):len((*c.CallOptions).ListRuleMetadata)], opts...)
	it := &RuleMetadataIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListRuleMetadataRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.RuleMetadata, string, error) {
		resp := &issuerswitchpb.ListRuleMetadataResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchRulesClient.ListRuleMetadata(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRuleMetadata(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchRulesGRPCClient) ListRuleMetadataValues(ctx context.Context, req *issuerswitchpb.ListRuleMetadataValuesRequest, opts ...gax.CallOption) *RuleMetadataValueIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRuleMetadataValues[0:len((*c.CallOptions).ListRuleMetadataValues):len((*c.CallOptions).ListRuleMetadataValues)], opts...)
	it := &RuleMetadataValueIterator{}
	req = proto.Clone(req).(*issuerswitchpb.ListRuleMetadataValuesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*issuerswitchpb.RuleMetadataValue, string, error) {
		resp := &issuerswitchpb.ListRuleMetadataValuesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.issuerSwitchRulesClient.ListRuleMetadataValues(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRuleMetadataValues(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *issuerSwitchRulesGRPCClient) BatchCreateRuleMetadataValues(ctx context.Context, req *issuerswitchpb.BatchCreateRuleMetadataValuesRequest, opts ...gax.CallOption) (*issuerswitchpb.BatchCreateRuleMetadataValuesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).BatchCreateRuleMetadataValues[0:len((*c.CallOptions).BatchCreateRuleMetadataValues):len((*c.CallOptions).BatchCreateRuleMetadataValues)], opts...)
	var resp *issuerswitchpb.BatchCreateRuleMetadataValuesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchRulesClient.BatchCreateRuleMetadataValues(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchRulesGRPCClient) BatchDeleteRuleMetadataValues(ctx context.Context, req *issuerswitchpb.BatchDeleteRuleMetadataValuesRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).BatchDeleteRuleMetadataValues[0:len((*c.CallOptions).BatchDeleteRuleMetadataValues):len((*c.CallOptions).BatchDeleteRuleMetadataValues)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.issuerSwitchRulesClient.BatchDeleteRuleMetadataValues(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *issuerSwitchRulesGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchRulesGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
