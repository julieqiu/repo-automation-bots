// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package issuerswitch

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	issuerswitchpb "cloud.google.com/go/paymentgateway/issuerswitch/apiv1/issuerswitchpb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/protobuf/proto"
)

var newIssuerSwitchParticipantsClientHook clientHook

// IssuerSwitchParticipantsCallOptions contains the retry settings for each method of IssuerSwitchParticipantsClient.
type IssuerSwitchParticipantsCallOptions struct {
	FetchParticipant        []gax.CallOption
	UpdateIssuerParticipant []gax.CallOption
	ActivateParticipant     []gax.CallOption
	DeactivateParticipant   []gax.CallOption
	MobileNumberChanged     []gax.CallOption
	GetOperation            []gax.CallOption
	ListOperations          []gax.CallOption
}

func defaultIssuerSwitchParticipantsGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("issuerswitch.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("issuerswitch.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("issuerswitch.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://issuerswitch.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultIssuerSwitchParticipantsCallOptions() *IssuerSwitchParticipantsCallOptions {
	return &IssuerSwitchParticipantsCallOptions{
		FetchParticipant: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		UpdateIssuerParticipant: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		ActivateParticipant: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		DeactivateParticipant: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		MobileNumberChanged: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
			gax.WithRetry(func() gax.Retryer {
				return gax.OnCodes([]codes.Code{
					codes.Unavailable,
				}, gax.Backoff{
					Initial:    1000 * time.Millisecond,
					Max:        10000 * time.Millisecond,
					Multiplier: 1.30,
				})
			}),
		},
		GetOperation:   []gax.CallOption{},
		ListOperations: []gax.CallOption{},
	}
}

// internalIssuerSwitchParticipantsClient is an interface that defines the methods available from Issuer switch API.
type internalIssuerSwitchParticipantsClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	FetchParticipant(context.Context, *issuerswitchpb.FetchParticipantRequest, ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error)
	UpdateIssuerParticipant(context.Context, *issuerswitchpb.UpdateIssuerParticipantRequest, ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error)
	ActivateParticipant(context.Context, *issuerswitchpb.ParticipantStateChangeRequest, ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error)
	DeactivateParticipant(context.Context, *issuerswitchpb.ParticipantStateChangeRequest, ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error)
	MobileNumberChanged(context.Context, *issuerswitchpb.ParticipantStateChangeRequest, ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error)
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// IssuerSwitchParticipantsClient is a client for interacting with Issuer switch API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A service that allows for the management of participants in the issuer
// switch.
type IssuerSwitchParticipantsClient struct {
	// The internal transport-dependent client.
	internalClient internalIssuerSwitchParticipantsClient

	// The call options for this service.
	CallOptions *IssuerSwitchParticipantsCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *IssuerSwitchParticipantsClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *IssuerSwitchParticipantsClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *IssuerSwitchParticipantsClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// FetchParticipant fetch the issuer switch participant. This method can be used to retrieve
// all details of a participant in the issuer switch.
//
// In UPI, the participant is identified by their account’s IFSC and their
// account number.
func (c *IssuerSwitchParticipantsClient) FetchParticipant(ctx context.Context, req *issuerswitchpb.FetchParticipantRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error) {
	return c.internalClient.FetchParticipant(ctx, req, opts...)
}

// UpdateIssuerParticipant update the issuer switch participant. Currently, this API only allows for
// the
// metadata
// field to be updated.
//
// The number of key-value pairs in the metadata field, the length of each
// key and the length of each value should be within the thresholds
// defined for them in the issuer switch configuration. Any violation of these
// thresholds will cause this API to return an error. The default values for
// these thresholds are:
//
//	Maximum number of key-value pairs - 5
//
//	Maximum length of a key - 100
//
//	Maximum length of a value - 500
//
// Note that this method replaces any existing metadata field value in
// the participant with the new value. Specifically, it does not do a merge.
// If key-value pairs are to be added/removed from the metadata, then
// callers must follow the following steps:
//
// Invoke the
// FetchParticipant
// API to get the current value of the metadata field.
//
// Update the metadata map to add/remove key-value pairs from it.
//
// Update the metadata in the issuer switch using this method.
func (c *IssuerSwitchParticipantsClient) UpdateIssuerParticipant(ctx context.Context, req *issuerswitchpb.UpdateIssuerParticipantRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error) {
	return c.internalClient.UpdateIssuerParticipant(ctx, req, opts...)
}

// ActivateParticipant activate the issuer switch participant for UPI transactions. This API
// sets the state of the participant to
// [ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE (at http://google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE)].
// A participant in the ACTIVE state can perform all UPI operations
// normally.
//
// The behavior of this API varies based on the current state of the
// participant.
//
//	Current state is
//	[ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE (at http://google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE)]
//	: This API will make no change to the participant’s state and returns a
//	successful response.
//
//	Current state is
//	INACTIVE
//	: If an MPIN has already been provisioned for the participant, then
//	this API will change the state of the participant to ACTIVE. Else,
//	this API will return an error.
//
//	Current state is
//	MOBILE_NUMBER_CHANGED
//	: The state cannot be changed to ACTIVE. This API will return an
//	error.
//
//	Current state is
//	NEW_REGISTRATION_INITIATED
//	: The state cannot be changed to ACTIVE. This API will return an
//	error.
//
//	Current state is
//	RE_REGISTRATION_INITIATED
//	: The state cannot be changed to ACTIVE. This API will return an
//	error.
func (c *IssuerSwitchParticipantsClient) ActivateParticipant(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	return c.internalClient.ActivateParticipant(ctx, req, opts...)
}

// DeactivateParticipant deactivate the issuer switch participant for UPI transactions. This API
// sets the state of the participant to
// INACTIVE.
// An INACTIVE participant cannot perform any UPI operation which involves
// MPIN verification.
//
// The behavior of this API varies based on the current state of the
// participant.
//
//	Current state is
//	[ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE (at http://google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE)]
//	: The state will change to INACTIVE. The user will be forced to
//	re-register with UPI and reset their MPIN  to perform any UPI
//	operations.
//
//	Current state is
//	INACTIVE
//	: This API will make no change to the participant’s state and returns a
//	successful response.
//
//	Current state is
//	MOBILE_NUMBER_CHANGED
//	: The state cannot be changed to INACTIVE. This API will return an
//	error.
//
//	Current state is
//	NEW_REGISTRATION_INITIATED
//	: The state cannot be changed to INACTIVE. This API will return an
//	error.
//
//	Current state is
//	RE_REGISTRATION_INITIATED
//	: The state cannot be changed to INACTIVE. This API will return an
//	error.
func (c *IssuerSwitchParticipantsClient) DeactivateParticipant(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	return c.internalClient.DeactivateParticipant(ctx, req, opts...)
}

// MobileNumberChanged mark the state of the issuer switch participant as mobile number changed
// to prevent UPI transactions by the user. This API sets the state of the
// participant to
// MOBILE_NUMBER_CHANGED.
//
// Any UPI operation for a participant in the MOBILE_NUMBER_CHANGED state
// will cause the issuer switch to return a B1 error to the UPI payments
// orchestrator which would force the user to re-register with UPI.
//
// The behavior of this API varies based on the current state of the
// participant.
//
//	Current state is
//	[ACTIVE][google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE (at http://google.cloud.paymentgateway.issuerswitch.v1.IssuerParticipant.State.ACTIVE)]
//	: The state will change to MOBILE_NUMBER_CHANGED. Any operation
//	involving MPIN verification of the participant will return a B1 error
//	to the UPI payments orchestrator. The user will be forced to
//	re-register with their changed mobile number.
//
//	Current state is
//	INACTIVE
//	: The state will change to MOBILE_NUMBER_CHANGED. Any operation
//	involving MPIN verification of the participant will return a B1 error
//	to the UPI payments orchestrator. The user will be forced to
//	re-register with their changed mobile number.
//
//	Current state is
//	MOBILE_NUMBER_CHANGED
//	: This API will make no change to the participant’s state and returns a
//	successful response.
//
//	Current state is
//	NEW_REGISTRATION_INITIATED
//	: The state cannot be changed to MOBILE_NUMBER_CHANGED. This API will
//	return an error.
//
//	Current state is
//	RE_REGISTRATION_INITIATED
//	: The state will change to MOBILE_NUMBER_CHANGED. Any operation
//	involving MPIN verification of the participant will return a B1 error
//	to the UPI payments orchestrator. The user will be forced to
//	re-register with their changed mobile number.
func (c *IssuerSwitchParticipantsClient) MobileNumberChanged(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	return c.internalClient.MobileNumberChanged(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchParticipantsClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *IssuerSwitchParticipantsClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// issuerSwitchParticipantsGRPCClient is a client for interacting with Issuer switch API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type issuerSwitchParticipantsGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing IssuerSwitchParticipantsClient
	CallOptions **IssuerSwitchParticipantsCallOptions

	// The gRPC API client.
	issuerSwitchParticipantsClient issuerswitchpb.IssuerSwitchParticipantsClient

	operationsClient longrunningpb.OperationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewIssuerSwitchParticipantsClient creates a new issuer switch participants client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A service that allows for the management of participants in the issuer
// switch.
func NewIssuerSwitchParticipantsClient(ctx context.Context, opts ...option.ClientOption) (*IssuerSwitchParticipantsClient, error) {
	clientOpts := defaultIssuerSwitchParticipantsGRPCClientOptions()
	if newIssuerSwitchParticipantsClientHook != nil {
		hookOpts, err := newIssuerSwitchParticipantsClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := IssuerSwitchParticipantsClient{CallOptions: defaultIssuerSwitchParticipantsCallOptions()}

	c := &issuerSwitchParticipantsGRPCClient{
		connPool:                       connPool,
		issuerSwitchParticipantsClient: issuerswitchpb.NewIssuerSwitchParticipantsClient(connPool),
		CallOptions:                    &client.CallOptions,
		operationsClient:               longrunningpb.NewOperationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *issuerSwitchParticipantsGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *issuerSwitchParticipantsGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *issuerSwitchParticipantsGRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *issuerSwitchParticipantsGRPCClient) FetchParticipant(ctx context.Context, req *issuerswitchpb.FetchParticipantRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).FetchParticipant[0:len((*c.CallOptions).FetchParticipant):len((*c.CallOptions).FetchParticipant)], opts...)
	var resp *issuerswitchpb.IssuerParticipant
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchParticipantsClient.FetchParticipant(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) UpdateIssuerParticipant(ctx context.Context, req *issuerswitchpb.UpdateIssuerParticipantRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipant, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateIssuerParticipant[0:len((*c.CallOptions).UpdateIssuerParticipant):len((*c.CallOptions).UpdateIssuerParticipant)], opts...)
	var resp *issuerswitchpb.IssuerParticipant
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchParticipantsClient.UpdateIssuerParticipant(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) ActivateParticipant(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ActivateParticipant[0:len((*c.CallOptions).ActivateParticipant):len((*c.CallOptions).ActivateParticipant)], opts...)
	var resp *issuerswitchpb.IssuerParticipants
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchParticipantsClient.ActivateParticipant(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) DeactivateParticipant(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeactivateParticipant[0:len((*c.CallOptions).DeactivateParticipant):len((*c.CallOptions).DeactivateParticipant)], opts...)
	var resp *issuerswitchpb.IssuerParticipants
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchParticipantsClient.DeactivateParticipant(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) MobileNumberChanged(ctx context.Context, req *issuerswitchpb.ParticipantStateChangeRequest, opts ...gax.CallOption) (*issuerswitchpb.IssuerParticipants, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).MobileNumberChanged[0:len((*c.CallOptions).MobileNumberChanged):len((*c.CallOptions).MobileNumberChanged)], opts...)
	var resp *issuerswitchpb.IssuerParticipants
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.issuerSwitchParticipantsClient.MobileNumberChanged(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *issuerSwitchParticipantsGRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}
