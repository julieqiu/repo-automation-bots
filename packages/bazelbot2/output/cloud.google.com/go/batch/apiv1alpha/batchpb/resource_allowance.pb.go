// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/batch/v1alpha/resource_allowance.proto

package batchpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	interval "google.golang.org/genproto/googleapis/type/interval"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A `CalendarPeriod` represents the abstract concept of a time period that
// has a canonical start. All calendar times begin at 12 AM US and Canadian
// Pacific Time (UTC-8).
type CalendarPeriod int32

const (
	// Unspecified.
	CalendarPeriod_CALENDAR_PERIOD_UNSPECIFIED CalendarPeriod = 0
	// The month starts on the first date of the month and resets at the beginning
	// of each month.
	CalendarPeriod_MONTH CalendarPeriod = 1
	// The quarter starts on dates January 1, April 1, July 1, and October 1 of
	// each year and resets at the beginning of the next quarter.
	CalendarPeriod_QUARTER CalendarPeriod = 2
	// The year starts on January 1 and resets at the beginning of the next year.
	CalendarPeriod_YEAR CalendarPeriod = 3
	// The week period starts and resets every Monday.
	CalendarPeriod_WEEK CalendarPeriod = 4
	// The day starts at 12:00am.
	CalendarPeriod_DAY CalendarPeriod = 5
)

// Enum value maps for CalendarPeriod.
var (
	CalendarPeriod_name = map[int32]string{
		0: "CALENDAR_PERIOD_UNSPECIFIED",
		1: "MONTH",
		2: "QUARTER",
		3: "YEAR",
		4: "WEEK",
		5: "DAY",
	}
	CalendarPeriod_value = map[string]int32{
		"CALENDAR_PERIOD_UNSPECIFIED": 0,
		"MONTH":                       1,
		"QUARTER":                     2,
		"YEAR":                        3,
		"WEEK":                        4,
		"DAY":                         5,
	}
)

func (x CalendarPeriod) Enum() *CalendarPeriod {
	p := new(CalendarPeriod)
	*p = x
	return p
}

func (x CalendarPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalendarPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes[0].Descriptor()
}

func (CalendarPeriod) Type() protoreflect.EnumType {
	return &file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes[0]
}

func (x CalendarPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CalendarPeriod.Descriptor instead.
func (CalendarPeriod) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{0}
}

// ResourceAllowance valid state.
type ResourceAllowanceState int32

const (
	// Unspecified.
	ResourceAllowanceState_RESOURCE_ALLOWANCE_STATE_UNSPECIFIED ResourceAllowanceState = 0
	// ResourceAllowance is active and in use.
	ResourceAllowanceState_RESOURCE_ALLOWANCE_ACTIVE ResourceAllowanceState = 1
	// ResourceAllowance limit is reached.
	ResourceAllowanceState_RESOURCE_ALLOWANCE_DEPLETED ResourceAllowanceState = 2
)

// Enum value maps for ResourceAllowanceState.
var (
	ResourceAllowanceState_name = map[int32]string{
		0: "RESOURCE_ALLOWANCE_STATE_UNSPECIFIED",
		1: "RESOURCE_ALLOWANCE_ACTIVE",
		2: "RESOURCE_ALLOWANCE_DEPLETED",
	}
	ResourceAllowanceState_value = map[string]int32{
		"RESOURCE_ALLOWANCE_STATE_UNSPECIFIED": 0,
		"RESOURCE_ALLOWANCE_ACTIVE":            1,
		"RESOURCE_ALLOWANCE_DEPLETED":          2,
	}
)

func (x ResourceAllowanceState) Enum() *ResourceAllowanceState {
	p := new(ResourceAllowanceState)
	*p = x
	return p
}

func (x ResourceAllowanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceAllowanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes[1].Descriptor()
}

func (ResourceAllowanceState) Type() protoreflect.EnumType {
	return &file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes[1]
}

func (x ResourceAllowanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceAllowanceState.Descriptor instead.
func (ResourceAllowanceState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{1}
}

// The Resource Allowance description for Cloud Batch.
// Only one Resource Allowance is supported now under a specific location and
// project.
type ResourceAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ResourceAllowance detail.
	//
	// Types that are assignable to ResourceAllowance:
	//
	//	*ResourceAllowance_UsageResourceAllowance
	ResourceAllowance isResourceAllowance_ResourceAllowance `protobuf_oneof:"resource_allowance"`
	// Identifier. ResourceAllowance name.
	// For example:
	// "projects/123456/locations/us-central1/resourceAllowances/resource-allowance-1".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. A system generated unique ID (in UUID4 format) for the
	// ResourceAllowance.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Output only. Time when the ResourceAllowance was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Optional. Labels are attributes that can be set and used by both the
	// user and by Batch. Labels must meet the following constraints:
	//
	// * Keys and values can contain only lowercase letters, numeric characters,
	// underscores, and dashes.
	// * All characters must use UTF-8 encoding, and international characters are
	// allowed.
	// * Keys must start with a lowercase letter or international character.
	// * Each resource is limited to a maximum of 64 labels.
	//
	// Both keys and values are additionally constrained to be <= 128 bytes.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Notification configurations.
	Notifications []*Notification `protobuf:"bytes,6,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (x *ResourceAllowance) Reset() {
	*x = ResourceAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllowance) ProtoMessage() {}

func (x *ResourceAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllowance.ProtoReflect.Descriptor instead.
func (*ResourceAllowance) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{0}
}

func (m *ResourceAllowance) GetResourceAllowance() isResourceAllowance_ResourceAllowance {
	if m != nil {
		return m.ResourceAllowance
	}
	return nil
}

func (x *ResourceAllowance) GetUsageResourceAllowance() *UsageResourceAllowance {
	if x, ok := x.GetResourceAllowance().(*ResourceAllowance_UsageResourceAllowance); ok {
		return x.UsageResourceAllowance
	}
	return nil
}

func (x *ResourceAllowance) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceAllowance) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ResourceAllowance) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ResourceAllowance) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceAllowance) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type isResourceAllowance_ResourceAllowance interface {
	isResourceAllowance_ResourceAllowance()
}

type ResourceAllowance_UsageResourceAllowance struct {
	// The detail of usage resource allowance.
	UsageResourceAllowance *UsageResourceAllowance `protobuf:"bytes,4,opt,name=usage_resource_allowance,json=usageResourceAllowance,proto3,oneof"`
}

func (*ResourceAllowance_UsageResourceAllowance) isResourceAllowance_ResourceAllowance() {}

// UsageResourceAllowance describes the detail of usage resource allowance.
type UsageResourceAllowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Spec of a usage ResourceAllowance.
	Spec *UsageResourceAllowanceSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	// Output only. Status of a usage ResourceAllowance.
	Status *UsageResourceAllowanceStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UsageResourceAllowance) Reset() {
	*x = UsageResourceAllowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowance) ProtoMessage() {}

func (x *UsageResourceAllowance) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowance.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowance) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *UsageResourceAllowance) GetSpec() *UsageResourceAllowanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *UsageResourceAllowance) GetStatus() *UsageResourceAllowanceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Spec of a usage ResourceAllowance.
type UsageResourceAllowanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Spec type is unique for each usage ResourceAllowance.
	// Batch now only supports type as "cpu-core-hours" for CPU usage consumption
	// tracking.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Required. Threshold of a UsageResourceAllowance limiting how many resources
	// can be consumed for each type.
	Limit *UsageResourceAllowanceSpec_Limit `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *UsageResourceAllowanceSpec) Reset() {
	*x = UsageResourceAllowanceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceSpec) ProtoMessage() {}

func (x *UsageResourceAllowanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceSpec.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceSpec) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{2}
}

func (x *UsageResourceAllowanceSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UsageResourceAllowanceSpec) GetLimit() *UsageResourceAllowanceSpec_Limit {
	if x != nil {
		return x.Limit
	}
	return nil
}

// Status of a usage ResourceAllowance.
type UsageResourceAllowanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. ResourceAllowance state.
	State ResourceAllowanceState `protobuf:"varint,1,opt,name=state,proto3,enum=google.cloud.batch.v1alpha.ResourceAllowanceState" json:"state,omitempty"`
	// Output only. ResourceAllowance consumption status for usage resources.
	LimitStatus *UsageResourceAllowanceStatus_LimitStatus `protobuf:"bytes,2,opt,name=limit_status,json=limitStatus,proto3" json:"limit_status,omitempty"`
	// Output only. The report of ResourceAllowance consumptions in a time period.
	Report *UsageResourceAllowanceStatus_ConsumptionReport `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *UsageResourceAllowanceStatus) Reset() {
	*x = UsageResourceAllowanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceStatus) ProtoMessage() {}

func (x *UsageResourceAllowanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceStatus.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{3}
}

func (x *UsageResourceAllowanceStatus) GetState() ResourceAllowanceState {
	if x != nil {
		return x.State
	}
	return ResourceAllowanceState_RESOURCE_ALLOWANCE_STATE_UNSPECIFIED
}

func (x *UsageResourceAllowanceStatus) GetLimitStatus() *UsageResourceAllowanceStatus_LimitStatus {
	if x != nil {
		return x.LimitStatus
	}
	return nil
}

func (x *UsageResourceAllowanceStatus) GetReport() *UsageResourceAllowanceStatus_ConsumptionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// UsageResourceAllowance limitation.
type UsageResourceAllowanceSpec_Limit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Duration:
	//
	//	*UsageResourceAllowanceSpec_Limit_CalendarPeriod
	Duration isUsageResourceAllowanceSpec_Limit_Duration `protobuf_oneof:"duration"`
	// Required. Limit value of a UsageResourceAllowance within its one
	// duration.
	//
	// Limit cannot be a negative value. Default is 0.
	// For example, you can set `limit` as 10000.0 with duration of the current
	// month by setting `calendar_period` field as monthly. That means in your
	// current month, 10000.0 is the core hour limitation that your resources
	// are allowed to consume.
	Limit *float64 `protobuf:"fixed64,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *UsageResourceAllowanceSpec_Limit) Reset() {
	*x = UsageResourceAllowanceSpec_Limit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceSpec_Limit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceSpec_Limit) ProtoMessage() {}

func (x *UsageResourceAllowanceSpec_Limit) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceSpec_Limit.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceSpec_Limit) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{2, 0}
}

func (m *UsageResourceAllowanceSpec_Limit) GetDuration() isUsageResourceAllowanceSpec_Limit_Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (x *UsageResourceAllowanceSpec_Limit) GetCalendarPeriod() CalendarPeriod {
	if x, ok := x.GetDuration().(*UsageResourceAllowanceSpec_Limit_CalendarPeriod); ok {
		return x.CalendarPeriod
	}
	return CalendarPeriod_CALENDAR_PERIOD_UNSPECIFIED
}

func (x *UsageResourceAllowanceSpec_Limit) GetLimit() float64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type isUsageResourceAllowanceSpec_Limit_Duration interface {
	isUsageResourceAllowanceSpec_Limit_Duration()
}

type UsageResourceAllowanceSpec_Limit_CalendarPeriod struct {
	// Optional. A CalendarPeriod represents the abstract concept of a time
	// period that has a canonical start.
	CalendarPeriod CalendarPeriod `protobuf:"varint,1,opt,name=calendar_period,json=calendarPeriod,proto3,enum=google.cloud.batch.v1alpha.CalendarPeriod,oneof"`
}

func (*UsageResourceAllowanceSpec_Limit_CalendarPeriod) isUsageResourceAllowanceSpec_Limit_Duration() {
}

// UsageResourceAllowanceStatus detail about usage consumption.
type UsageResourceAllowanceStatus_LimitStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The consumption interval.
	ConsumptionInterval *interval.Interval `protobuf:"bytes,1,opt,name=consumption_interval,json=consumptionInterval,proto3" json:"consumption_interval,omitempty"`
	// Output only. Limit value of a UsageResourceAllowance within its one
	// duration.
	Limit *float64 `protobuf:"fixed64,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// Output only. Accumulated consumption during `consumption_interval`.
	Consumed *float64 `protobuf:"fixed64,3,opt,name=consumed,proto3,oneof" json:"consumed,omitempty"`
}

func (x *UsageResourceAllowanceStatus_LimitStatus) Reset() {
	*x = UsageResourceAllowanceStatus_LimitStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceStatus_LimitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceStatus_LimitStatus) ProtoMessage() {}

func (x *UsageResourceAllowanceStatus_LimitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceStatus_LimitStatus.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceStatus_LimitStatus) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{3, 0}
}

func (x *UsageResourceAllowanceStatus_LimitStatus) GetConsumptionInterval() *interval.Interval {
	if x != nil {
		return x.ConsumptionInterval
	}
	return nil
}

func (x *UsageResourceAllowanceStatus_LimitStatus) GetLimit() float64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *UsageResourceAllowanceStatus_LimitStatus) GetConsumed() float64 {
	if x != nil && x.Consumed != nil {
		return *x.Consumed
	}
	return 0
}

type UsageResourceAllowanceStatus_PeriodConsumption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The consumption interval.
	ConsumptionInterval *interval.Interval `protobuf:"bytes,1,opt,name=consumption_interval,json=consumptionInterval,proto3" json:"consumption_interval,omitempty"`
	// Output only. Accumulated consumption during `consumption_interval`.
	Consumed *float64 `protobuf:"fixed64,2,opt,name=consumed,proto3,oneof" json:"consumed,omitempty"`
}

func (x *UsageResourceAllowanceStatus_PeriodConsumption) Reset() {
	*x = UsageResourceAllowanceStatus_PeriodConsumption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceStatus_PeriodConsumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceStatus_PeriodConsumption) ProtoMessage() {}

func (x *UsageResourceAllowanceStatus_PeriodConsumption) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceStatus_PeriodConsumption.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceStatus_PeriodConsumption) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{3, 1}
}

func (x *UsageResourceAllowanceStatus_PeriodConsumption) GetConsumptionInterval() *interval.Interval {
	if x != nil {
		return x.ConsumptionInterval
	}
	return nil
}

func (x *UsageResourceAllowanceStatus_PeriodConsumption) GetConsumed() float64 {
	if x != nil && x.Consumed != nil {
		return *x.Consumed
	}
	return 0
}

// ConsumptionReport is the report of ResourceAllowance consumptions in a time
// period.
type UsageResourceAllowanceStatus_ConsumptionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. ResourceAllowance consumptions in the latest calendar
	// period. Key is the calendar period in string format. Batch currently
	// supports HOUR, DAY, MONTH and YEAR.
	LatestPeriodConsumptions map[string]*UsageResourceAllowanceStatus_PeriodConsumption `protobuf:"bytes,1,rep,name=latest_period_consumptions,json=latestPeriodConsumptions,proto3" json:"latest_period_consumptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UsageResourceAllowanceStatus_ConsumptionReport) Reset() {
	*x = UsageResourceAllowanceStatus_ConsumptionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageResourceAllowanceStatus_ConsumptionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageResourceAllowanceStatus_ConsumptionReport) ProtoMessage() {}

func (x *UsageResourceAllowanceStatus_ConsumptionReport) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageResourceAllowanceStatus_ConsumptionReport.ProtoReflect.Descriptor instead.
func (*UsageResourceAllowanceStatus_ConsumptionReport) Descriptor() ([]byte, []int) {
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP(), []int{3, 2}
}

func (x *UsageResourceAllowanceStatus_ConsumptionReport) GetLatestPeriodConsumptions() map[string]*UsageResourceAllowanceStatus_PeriodConsumption {
	if x != nil {
		return x.LatestPeriodConsumptions
	}
	return nil
}

var File_google_cloud_batch_v1alpha_resource_allowance_proto protoreflect.FileDescriptor

var file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x05, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x18,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x16, 0x75, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x08, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x53,
	0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0xa4,
	0x01, 0xea, 0x41, 0xa0, 0x01, 0x0a, 0x26, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2a, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x32, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x16,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa,
	0x02, 0x0a, 0x1a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x99, 0x01, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xf6, 0x07, 0x0a, 0x1c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0xb9, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x1e, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a, 0x95,
	0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a, 0xdb, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xab, 0x01, 0x0a,
	0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x68, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x97, 0x01, 0x0a, 0x1d, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x60,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0x66, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x4c, 0x45, 0x4e, 0x44,
	0x41, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x45,
	0x4b, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x05, 0x2a, 0x82, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x42, 0xd0, 0x01, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x42, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x70, 0x62, 0x3b, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x47, 0x43, 0x42, 0xaa, 0x02, 0x1a, 0x47, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x56, 0x31, 0x41, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x1a, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x5c, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x5c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xea, 0x02, 0x1d, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescOnce sync.Once
	file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescData = file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDesc
)

func file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescGZIP() []byte {
	file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescOnce.Do(func() {
		file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescData)
	})
	return file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDescData
}

var file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_google_cloud_batch_v1alpha_resource_allowance_proto_goTypes = []any{
	(CalendarPeriod)(0),                                    // 0: google.cloud.batch.v1alpha.CalendarPeriod
	(ResourceAllowanceState)(0),                            // 1: google.cloud.batch.v1alpha.ResourceAllowanceState
	(*ResourceAllowance)(nil),                              // 2: google.cloud.batch.v1alpha.ResourceAllowance
	(*UsageResourceAllowance)(nil),                         // 3: google.cloud.batch.v1alpha.UsageResourceAllowance
	(*UsageResourceAllowanceSpec)(nil),                     // 4: google.cloud.batch.v1alpha.UsageResourceAllowanceSpec
	(*UsageResourceAllowanceStatus)(nil),                   // 5: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus
	nil,                                                    // 6: google.cloud.batch.v1alpha.ResourceAllowance.LabelsEntry
	(*UsageResourceAllowanceSpec_Limit)(nil),               // 7: google.cloud.batch.v1alpha.UsageResourceAllowanceSpec.Limit
	(*UsageResourceAllowanceStatus_LimitStatus)(nil),       // 8: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.LimitStatus
	(*UsageResourceAllowanceStatus_PeriodConsumption)(nil), // 9: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.PeriodConsumption
	(*UsageResourceAllowanceStatus_ConsumptionReport)(nil), // 10: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport
	nil,                           // 11: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport.LatestPeriodConsumptionsEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(*Notification)(nil),          // 13: google.cloud.batch.v1alpha.Notification
	(*interval.Interval)(nil),     // 14: google.type.Interval
}
var file_google_cloud_batch_v1alpha_resource_allowance_proto_depIdxs = []int32{
	3,  // 0: google.cloud.batch.v1alpha.ResourceAllowance.usage_resource_allowance:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowance
	12, // 1: google.cloud.batch.v1alpha.ResourceAllowance.create_time:type_name -> google.protobuf.Timestamp
	6,  // 2: google.cloud.batch.v1alpha.ResourceAllowance.labels:type_name -> google.cloud.batch.v1alpha.ResourceAllowance.LabelsEntry
	13, // 3: google.cloud.batch.v1alpha.ResourceAllowance.notifications:type_name -> google.cloud.batch.v1alpha.Notification
	4,  // 4: google.cloud.batch.v1alpha.UsageResourceAllowance.spec:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceSpec
	5,  // 5: google.cloud.batch.v1alpha.UsageResourceAllowance.status:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceStatus
	7,  // 6: google.cloud.batch.v1alpha.UsageResourceAllowanceSpec.limit:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceSpec.Limit
	1,  // 7: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.state:type_name -> google.cloud.batch.v1alpha.ResourceAllowanceState
	8,  // 8: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.limit_status:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.LimitStatus
	10, // 9: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.report:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport
	0,  // 10: google.cloud.batch.v1alpha.UsageResourceAllowanceSpec.Limit.calendar_period:type_name -> google.cloud.batch.v1alpha.CalendarPeriod
	14, // 11: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.LimitStatus.consumption_interval:type_name -> google.type.Interval
	14, // 12: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.PeriodConsumption.consumption_interval:type_name -> google.type.Interval
	11, // 13: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport.latest_period_consumptions:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport.LatestPeriodConsumptionsEntry
	9,  // 14: google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.ConsumptionReport.LatestPeriodConsumptionsEntry.value:type_name -> google.cloud.batch.v1alpha.UsageResourceAllowanceStatus.PeriodConsumption
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_google_cloud_batch_v1alpha_resource_allowance_proto_init() }
func file_google_cloud_batch_v1alpha_resource_allowance_proto_init() {
	if File_google_cloud_batch_v1alpha_resource_allowance_proto != nil {
		return
	}
	file_google_cloud_batch_v1alpha_notification_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceSpec_Limit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceStatus_LimitStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceStatus_PeriodConsumption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UsageResourceAllowanceStatus_ConsumptionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[0].OneofWrappers = []any{
		(*ResourceAllowance_UsageResourceAllowance)(nil),
	}
	file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[5].OneofWrappers = []any{
		(*UsageResourceAllowanceSpec_Limit_CalendarPeriod)(nil),
	}
	file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[6].OneofWrappers = []any{}
	file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_batch_v1alpha_resource_allowance_proto_goTypes,
		DependencyIndexes: file_google_cloud_batch_v1alpha_resource_allowance_proto_depIdxs,
		EnumInfos:         file_google_cloud_batch_v1alpha_resource_allowance_proto_enumTypes,
		MessageInfos:      file_google_cloud_batch_v1alpha_resource_allowance_proto_msgTypes,
	}.Build()
	File_google_cloud_batch_v1alpha_resource_allowance_proto = out.File
	file_google_cloud_batch_v1alpha_resource_allowance_proto_rawDesc = nil
	file_google_cloud_batch_v1alpha_resource_allowance_proto_goTypes = nil
	file_google_cloud_batch_v1alpha_resource_allowance_proto_depIdxs = nil
}
