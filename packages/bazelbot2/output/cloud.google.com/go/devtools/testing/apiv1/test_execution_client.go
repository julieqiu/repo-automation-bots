// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package testing

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	testingpb "google.golang.org/genproto/googleapis/devtools/testing/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
)

var newTestExecutionClientHook clientHook

// TestExecutionCallOptions contains the retry settings for each method of TestExecutionClient.
type TestExecutionCallOptions struct {
	CreateTestMatrix []gax.CallOption
	GetTestMatrix    []gax.CallOption
	CancelTestMatrix []gax.CallOption
}

func defaultTestExecutionGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("testing.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("testing.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("testing.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://testing.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultTestExecutionCallOptions() *TestExecutionCallOptions {
	return &TestExecutionCallOptions{
		CreateTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CancelTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

func defaultTestExecutionRESTCallOptions() *TestExecutionCallOptions {
	return &TestExecutionCallOptions{
		CreateTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CancelTestMatrix: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

// internalTestExecutionClient is an interface that defines the methods available from Cloud Testing API.
type internalTestExecutionClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	CreateTestMatrix(context.Context, *testingpb.CreateTestMatrixRequest, ...gax.CallOption) (*testingpb.TestMatrix, error)
	GetTestMatrix(context.Context, *testingpb.GetTestMatrixRequest, ...gax.CallOption) (*testingpb.TestMatrix, error)
	CancelTestMatrix(context.Context, *testingpb.CancelTestMatrixRequest, ...gax.CallOption) (*testingpb.CancelTestMatrixResponse, error)
}

// TestExecutionClient is a client for interacting with Cloud Testing API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// A service for requesting test executions and querying their status.
//
// This service is part of Firebase Test Lab. To learn about how to use the
// product, and how to integrate it with your system,
// visit https://firebase.google.com/docs/test-lab (at https://firebase.google.com/docs/test-lab).
//
// Each test execution will wait for available capacity. It will then be
// invoked as described. The test may be invoked multiple times if an
// infrastructure failure is detected. Results and other files generated by
// the test will be stored in an external storage system.
//
// The TestExecutionService models this behavior using two resource types:
//
//	TestMatrix: a group of one or more TestExecutions, built by taking a
//	product of values over a pre-defined set of axes. In the case of Android
//	Tests, for example, device model and OS version are two axes of the matrix.
//
//	TestExecution: a single execution of one or more test targets on a
//	single device. These are created automatically when a TestMatrix is
//	created.
//
// This service returns any error codes from the canonical error space (i.e.
// google.rpc.Code). The errors which may be returned are specified on each
// method. In addition, any method may return UNAVAILABLE or INTERNAL.
type TestExecutionClient struct {
	// The internal transport-dependent client.
	internalClient internalTestExecutionClient

	// The call options for this service.
	CallOptions *TestExecutionCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *TestExecutionClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *TestExecutionClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *TestExecutionClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// CreateTestMatrix creates and runs a matrix of tests according to the given specifications.
// Unsupported environments will be returned in the state UNSUPPORTED.
// A test matrix is limited to use at most 2000 devices in parallel.
//
// The returned matrix will not yet contain the executions that will be
// created for this matrix. Execution creation happens later on and will
// require a call to GetTestMatrix.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to write to project
//
//	INVALID_ARGUMENT - if the request is malformed or if the matrix tries
//	to use too many simultaneous devices.
func (c *TestExecutionClient) CreateTestMatrix(ctx context.Context, req *testingpb.CreateTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	return c.internalClient.CreateTestMatrix(ctx, req, opts...)
}

// GetTestMatrix checks the status of a test matrix and the executions once they
// are created.
//
// The test matrix will contain the list of test executions to run if and only
// if the resultStorage.toolResultsExecution fields have been populated.
//
// Note: Flaky test executions may be added to the matrix at a later stage.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to read project
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the Test Matrix does not exist
func (c *TestExecutionClient) GetTestMatrix(ctx context.Context, req *testingpb.GetTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	return c.internalClient.GetTestMatrix(ctx, req, opts...)
}

// CancelTestMatrix cancels unfinished test executions in a test matrix.
// This call returns immediately and cancellation proceeds asynchronously.
// If the matrix is already final, this operation will have no effect.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to read project
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the Test Matrix does not exist
func (c *TestExecutionClient) CancelTestMatrix(ctx context.Context, req *testingpb.CancelTestMatrixRequest, opts ...gax.CallOption) (*testingpb.CancelTestMatrixResponse, error) {
	return c.internalClient.CancelTestMatrix(ctx, req, opts...)
}

// testExecutionGRPCClient is a client for interacting with Cloud Testing API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type testExecutionGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing TestExecutionClient
	CallOptions **TestExecutionCallOptions

	// The gRPC API client.
	testExecutionClient testingpb.TestExecutionServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewTestExecutionClient creates a new test execution service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// A service for requesting test executions and querying their status.
//
// This service is part of Firebase Test Lab. To learn about how to use the
// product, and how to integrate it with your system,
// visit https://firebase.google.com/docs/test-lab (at https://firebase.google.com/docs/test-lab).
//
// Each test execution will wait for available capacity. It will then be
// invoked as described. The test may be invoked multiple times if an
// infrastructure failure is detected. Results and other files generated by
// the test will be stored in an external storage system.
//
// The TestExecutionService models this behavior using two resource types:
//
//	TestMatrix: a group of one or more TestExecutions, built by taking a
//	product of values over a pre-defined set of axes. In the case of Android
//	Tests, for example, device model and OS version are two axes of the matrix.
//
//	TestExecution: a single execution of one or more test targets on a
//	single device. These are created automatically when a TestMatrix is
//	created.
//
// This service returns any error codes from the canonical error space (i.e.
// google.rpc.Code). The errors which may be returned are specified on each
// method. In addition, any method may return UNAVAILABLE or INTERNAL.
func NewTestExecutionClient(ctx context.Context, opts ...option.ClientOption) (*TestExecutionClient, error) {
	clientOpts := defaultTestExecutionGRPCClientOptions()
	if newTestExecutionClientHook != nil {
		hookOpts, err := newTestExecutionClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := TestExecutionClient{CallOptions: defaultTestExecutionCallOptions()}

	c := &testExecutionGRPCClient{
		connPool:            connPool,
		testExecutionClient: testingpb.NewTestExecutionServiceClient(connPool),
		CallOptions:         &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *testExecutionGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *testExecutionGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *testExecutionGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type testExecutionRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing TestExecutionClient
	CallOptions **TestExecutionCallOptions
}

// NewTestExecutionRESTClient creates a new test execution service rest client.
//
// A service for requesting test executions and querying their status.
//
// This service is part of Firebase Test Lab. To learn about how to use the
// product, and how to integrate it with your system,
// visit https://firebase.google.com/docs/test-lab (at https://firebase.google.com/docs/test-lab).
//
// Each test execution will wait for available capacity. It will then be
// invoked as described. The test may be invoked multiple times if an
// infrastructure failure is detected. Results and other files generated by
// the test will be stored in an external storage system.
//
// The TestExecutionService models this behavior using two resource types:
//
//	TestMatrix: a group of one or more TestExecutions, built by taking a
//	product of values over a pre-defined set of axes. In the case of Android
//	Tests, for example, device model and OS version are two axes of the matrix.
//
//	TestExecution: a single execution of one or more test targets on a
//	single device. These are created automatically when a TestMatrix is
//	created.
//
// This service returns any error codes from the canonical error space (i.e.
// google.rpc.Code). The errors which may be returned are specified on each
// method. In addition, any method may return UNAVAILABLE or INTERNAL.
func NewTestExecutionRESTClient(ctx context.Context, opts ...option.ClientOption) (*TestExecutionClient, error) {
	clientOpts := append(defaultTestExecutionRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultTestExecutionRESTCallOptions()
	c := &testExecutionRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &TestExecutionClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultTestExecutionRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://testing.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://testing.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://testing.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://testing.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *testExecutionRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *testExecutionRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *testExecutionRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *testExecutionGRPCClient) CreateTestMatrix(ctx context.Context, req *testingpb.CreateTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "project_id", url.QueryEscape(req.GetProjectId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateTestMatrix[0:len((*c.CallOptions).CreateTestMatrix):len((*c.CallOptions).CreateTestMatrix)], opts...)
	var resp *testingpb.TestMatrix
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.testExecutionClient.CreateTestMatrix(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *testExecutionGRPCClient) GetTestMatrix(ctx context.Context, req *testingpb.GetTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "test_matrix_id", url.QueryEscape(req.GetTestMatrixId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetTestMatrix[0:len((*c.CallOptions).GetTestMatrix):len((*c.CallOptions).GetTestMatrix)], opts...)
	var resp *testingpb.TestMatrix
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.testExecutionClient.GetTestMatrix(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *testExecutionGRPCClient) CancelTestMatrix(ctx context.Context, req *testingpb.CancelTestMatrixRequest, opts ...gax.CallOption) (*testingpb.CancelTestMatrixResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "test_matrix_id", url.QueryEscape(req.GetTestMatrixId()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelTestMatrix[0:len((*c.CallOptions).CancelTestMatrix):len((*c.CallOptions).CancelTestMatrix)], opts...)
	var resp *testingpb.CancelTestMatrixResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.testExecutionClient.CancelTestMatrix(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// CreateTestMatrix creates and runs a matrix of tests according to the given specifications.
// Unsupported environments will be returned in the state UNSUPPORTED.
// A test matrix is limited to use at most 2000 devices in parallel.
//
// The returned matrix will not yet contain the executions that will be
// created for this matrix. Execution creation happens later on and will
// require a call to GetTestMatrix.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to write to project
//
//	INVALID_ARGUMENT - if the request is malformed or if the matrix tries
//	to use too many simultaneous devices.
func (c *testExecutionRESTClient) CreateTestMatrix(ctx context.Context, req *testingpb.CreateTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	m := protojson.MarshalOptions{AllowPartial: true, UseEnumNumbers: true}
	body := req.GetTestMatrix()
	jsonReq, err := m.Marshal(body)
	if err != nil {
		return nil, err
	}

	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/projects/%v/testMatrices", req.GetProjectId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetRequestId() != "" {
		params.Add("requestId", fmt.Sprintf("%v", req.GetRequestId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "project_id", url.QueryEscape(req.GetProjectId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CreateTestMatrix[0:len((*c.CallOptions).CreateTestMatrix):len((*c.CallOptions).CreateTestMatrix)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &testingpb.TestMatrix{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), bytes.NewReader(jsonReq))
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// GetTestMatrix checks the status of a test matrix and the executions once they
// are created.
//
// The test matrix will contain the list of test executions to run if and only
// if the resultStorage.toolResultsExecution fields have been populated.
//
// Note: Flaky test executions may be added to the matrix at a later stage.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to read project
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the Test Matrix does not exist
func (c *testExecutionRESTClient) GetTestMatrix(ctx context.Context, req *testingpb.GetTestMatrixRequest, opts ...gax.CallOption) (*testingpb.TestMatrix, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/projects/%v/testMatrices/%v", req.GetProjectId(), req.GetTestMatrixId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "test_matrix_id", url.QueryEscape(req.GetTestMatrixId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetTestMatrix[0:len((*c.CallOptions).GetTestMatrix):len((*c.CallOptions).GetTestMatrix)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &testingpb.TestMatrix{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}

// CancelTestMatrix cancels unfinished test executions in a test matrix.
// This call returns immediately and cancellation proceeds asynchronously.
// If the matrix is already final, this operation will have no effect.
//
// May return any of the following canonical error codes:
//
//	PERMISSION_DENIED - if the user is not authorized to read project
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the Test Matrix does not exist
func (c *testExecutionRESTClient) CancelTestMatrix(ctx context.Context, req *testingpb.CancelTestMatrixRequest, opts ...gax.CallOption) (*testingpb.CancelTestMatrixResponse, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/projects/%v/testMatrices/%v:cancel", req.GetProjectId(), req.GetTestMatrixId())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v&%s=%v", "project_id", url.QueryEscape(req.GetProjectId()), "test_matrix_id", url.QueryEscape(req.GetTestMatrixId()))}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).CancelTestMatrix[0:len((*c.CallOptions).CancelTestMatrix):len((*c.CallOptions).CancelTestMatrix)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &testingpb.CancelTestMatrixResponse{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("POST", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
