// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package testing

import (
	"context"
	"fmt"
	"io"
	"math"
	"net/http"
	"net/url"
	"time"

	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/googleapi"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	httptransport "google.golang.org/api/transport/http"
	testingpb "google.golang.org/genproto/googleapis/devtools/testing/v1"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/encoding/protojson"
)

var newTestEnvironmentDiscoveryClientHook clientHook

// TestEnvironmentDiscoveryCallOptions contains the retry settings for each method of TestEnvironmentDiscoveryClient.
type TestEnvironmentDiscoveryCallOptions struct {
	GetTestEnvironmentCatalog []gax.CallOption
}

func defaultTestEnvironmentDiscoveryGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("testing.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("testing.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("testing.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://testing.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultTestEnvironmentDiscoveryCallOptions() *TestEnvironmentDiscoveryCallOptions {
	return &TestEnvironmentDiscoveryCallOptions{
		GetTestEnvironmentCatalog: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

func defaultTestEnvironmentDiscoveryRESTCallOptions() *TestEnvironmentDiscoveryCallOptions {
	return &TestEnvironmentDiscoveryCallOptions{
		GetTestEnvironmentCatalog: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
	}
}

// internalTestEnvironmentDiscoveryClient is an interface that defines the methods available from Cloud Testing API.
type internalTestEnvironmentDiscoveryClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	GetTestEnvironmentCatalog(context.Context, *testingpb.GetTestEnvironmentCatalogRequest, ...gax.CallOption) (*testingpb.TestEnvironmentCatalog, error)
}

// TestEnvironmentDiscoveryClient is a client for interacting with Cloud Testing API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// Service for discovering environments supported by the TestExecutionService.
//
// Over time the TestService may add or remove devices or configuration options
// (e.g., when new devices and APIs are released).  Clients should check here
// periodically to discover what options are supported.
//
// It defines the following resource model:
//
//	The API a collection of [TestEnvironmentCatalog]
//	[google.devtools.test.v1.TestEnvironmentCatalog] resources, named
//	testEnvironmentCatalog/*
//
//	Each TestEnvironmentCatalog resource describes a set of supported
//	environments.
//
//	An AndroidDeviceCatalog
//	describes supported Android devices. It contains lists of supported
//	AndroidModels and
//	AndroidVersions along with a
//	AndroidRuntimeConfiguration.
//	Each AndroidModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	AndroidRuntimeConfiguration
//
//	An IosDeviceCatalog
//	describes supported iOS devices. It contains lists of supported
//	IosModels and
//	IosVersions along with a
//	IosRuntimeConfiguration.
//	Each IosModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	IosRuntimeConfiguration.
type TestEnvironmentDiscoveryClient struct {
	// The internal transport-dependent client.
	internalClient internalTestEnvironmentDiscoveryClient

	// The call options for this service.
	CallOptions *TestEnvironmentDiscoveryCallOptions
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *TestEnvironmentDiscoveryClient) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *TestEnvironmentDiscoveryClient) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *TestEnvironmentDiscoveryClient) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// GetTestEnvironmentCatalog gets the catalog of supported test environments.
//
// May return any of the following canonical error codes:
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the environment type does not exist
//
//	INTERNAL - if an internal error occurred
func (c *TestEnvironmentDiscoveryClient) GetTestEnvironmentCatalog(ctx context.Context, req *testingpb.GetTestEnvironmentCatalogRequest, opts ...gax.CallOption) (*testingpb.TestEnvironmentCatalog, error) {
	return c.internalClient.GetTestEnvironmentCatalog(ctx, req, opts...)
}

// testEnvironmentDiscoveryGRPCClient is a client for interacting with Cloud Testing API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type testEnvironmentDiscoveryGRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing TestEnvironmentDiscoveryClient
	CallOptions **TestEnvironmentDiscoveryCallOptions

	// The gRPC API client.
	testEnvironmentDiscoveryClient testingpb.TestEnvironmentDiscoveryServiceClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewTestEnvironmentDiscoveryClient creates a new test environment discovery service client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// Service for discovering environments supported by the TestExecutionService.
//
// Over time the TestService may add or remove devices or configuration options
// (e.g., when new devices and APIs are released).  Clients should check here
// periodically to discover what options are supported.
//
// It defines the following resource model:
//
//	The API a collection of [TestEnvironmentCatalog]
//	[google.devtools.test.v1.TestEnvironmentCatalog] resources, named
//	testEnvironmentCatalog/*
//
//	Each TestEnvironmentCatalog resource describes a set of supported
//	environments.
//
//	An AndroidDeviceCatalog
//	describes supported Android devices. It contains lists of supported
//	AndroidModels and
//	AndroidVersions along with a
//	AndroidRuntimeConfiguration.
//	Each AndroidModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	AndroidRuntimeConfiguration
//
//	An IosDeviceCatalog
//	describes supported iOS devices. It contains lists of supported
//	IosModels and
//	IosVersions along with a
//	IosRuntimeConfiguration.
//	Each IosModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	IosRuntimeConfiguration.
func NewTestEnvironmentDiscoveryClient(ctx context.Context, opts ...option.ClientOption) (*TestEnvironmentDiscoveryClient, error) {
	clientOpts := defaultTestEnvironmentDiscoveryGRPCClientOptions()
	if newTestEnvironmentDiscoveryClientHook != nil {
		hookOpts, err := newTestEnvironmentDiscoveryClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := TestEnvironmentDiscoveryClient{CallOptions: defaultTestEnvironmentDiscoveryCallOptions()}

	c := &testEnvironmentDiscoveryGRPCClient{
		connPool:                       connPool,
		testEnvironmentDiscoveryClient: testingpb.NewTestEnvironmentDiscoveryServiceClient(connPool),
		CallOptions:                    &client.CallOptions,
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *testEnvironmentDiscoveryGRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *testEnvironmentDiscoveryGRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *testEnvironmentDiscoveryGRPCClient) Close() error {
	return c.connPool.Close()
}

// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type testEnvironmentDiscoveryRESTClient struct {
	// The http endpoint to connect to.
	endpoint string

	// The http client.
	httpClient *http.Client

	// The x-goog-* headers to be sent with each request.
	xGoogHeaders []string

	// Points back to the CallOptions field of the containing TestEnvironmentDiscoveryClient
	CallOptions **TestEnvironmentDiscoveryCallOptions
}

// NewTestEnvironmentDiscoveryRESTClient creates a new test environment discovery service rest client.
//
// Service for discovering environments supported by the TestExecutionService.
//
// Over time the TestService may add or remove devices or configuration options
// (e.g., when new devices and APIs are released).  Clients should check here
// periodically to discover what options are supported.
//
// It defines the following resource model:
//
//	The API a collection of [TestEnvironmentCatalog]
//	[google.devtools.test.v1.TestEnvironmentCatalog] resources, named
//	testEnvironmentCatalog/*
//
//	Each TestEnvironmentCatalog resource describes a set of supported
//	environments.
//
//	An AndroidDeviceCatalog
//	describes supported Android devices. It contains lists of supported
//	AndroidModels and
//	AndroidVersions along with a
//	AndroidRuntimeConfiguration.
//	Each AndroidModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	AndroidRuntimeConfiguration
//
//	An IosDeviceCatalog
//	describes supported iOS devices. It contains lists of supported
//	IosModels and
//	IosVersions along with a
//	IosRuntimeConfiguration.
//	Each IosModel contains a list of Versions it supports. All
//	models support all locales and orientations described by the
//	IosRuntimeConfiguration.
func NewTestEnvironmentDiscoveryRESTClient(ctx context.Context, opts ...option.ClientOption) (*TestEnvironmentDiscoveryClient, error) {
	clientOpts := append(defaultTestEnvironmentDiscoveryRESTClientOptions(), opts...)
	httpClient, endpoint, err := httptransport.NewClient(ctx, clientOpts...)
	if err != nil {
		return nil, err
	}

	callOpts := defaultTestEnvironmentDiscoveryRESTCallOptions()
	c := &testEnvironmentDiscoveryRESTClient{
		endpoint:    endpoint,
		httpClient:  httpClient,
		CallOptions: &callOpts,
	}
	c.setGoogleClientInfo()

	return &TestEnvironmentDiscoveryClient{internalClient: c, CallOptions: callOpts}, nil
}

func defaultTestEnvironmentDiscoveryRESTClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("https://testing.googleapis.com"),
		internaloption.WithDefaultEndpointTemplate("https://testing.UNIVERSE_DOMAIN"),
		internaloption.WithDefaultMTLSEndpoint("https://testing.mtls.googleapis.com"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://testing.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableNewAuthLibrary(),
	}
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *testEnvironmentDiscoveryRESTClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "rest", "UNKNOWN")
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *testEnvironmentDiscoveryRESTClient) Close() error {
	// Replace httpClient with nil to force cleanup.
	c.httpClient = nil
	return nil
}

// Connection returns a connection to the API service.
//
// Deprecated: This method always returns nil.
func (c *testEnvironmentDiscoveryRESTClient) Connection() *grpc.ClientConn {
	return nil
}
func (c *testEnvironmentDiscoveryGRPCClient) GetTestEnvironmentCatalog(ctx context.Context, req *testingpb.GetTestEnvironmentCatalogRequest, opts ...gax.CallOption) (*testingpb.TestEnvironmentCatalog, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "environment_type", testingpb.GetTestEnvironmentCatalogRequest_EnvironmentType_name[int32(req.GetEnvironmentType())])}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetTestEnvironmentCatalog[0:len((*c.CallOptions).GetTestEnvironmentCatalog):len((*c.CallOptions).GetTestEnvironmentCatalog)], opts...)
	var resp *testingpb.TestEnvironmentCatalog
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.testEnvironmentDiscoveryClient.GetTestEnvironmentCatalog(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// GetTestEnvironmentCatalog gets the catalog of supported test environments.
//
// May return any of the following canonical error codes:
//
//	INVALID_ARGUMENT - if the request is malformed
//
//	NOT_FOUND - if the environment type does not exist
//
//	INTERNAL - if an internal error occurred
func (c *testEnvironmentDiscoveryRESTClient) GetTestEnvironmentCatalog(ctx context.Context, req *testingpb.GetTestEnvironmentCatalogRequest, opts ...gax.CallOption) (*testingpb.TestEnvironmentCatalog, error) {
	baseUrl, err := url.Parse(c.endpoint)
	if err != nil {
		return nil, err
	}
	baseUrl.Path += fmt.Sprintf("/v1/testEnvironmentCatalog/%v", req.GetEnvironmentType())

	params := url.Values{}
	params.Add("$alt", "json;enum-encoding=int")
	if req.GetProjectId() != "" {
		params.Add("projectId", fmt.Sprintf("%v", req.GetProjectId()))
	}

	baseUrl.RawQuery = params.Encode()

	// Build HTTP headers from client and context metadata.
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "environment_type", testingpb.GetTestEnvironmentCatalogRequest_EnvironmentType_name[int32(req.GetEnvironmentType())])}

	hds = append(c.xGoogHeaders, hds...)
	hds = append(hds, "Content-Type", "application/json")
	headers := gax.BuildHeaders(ctx, hds...)
	opts = append((*c.CallOptions).GetTestEnvironmentCatalog[0:len((*c.CallOptions).GetTestEnvironmentCatalog):len((*c.CallOptions).GetTestEnvironmentCatalog)], opts...)
	unm := protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}
	resp := &testingpb.TestEnvironmentCatalog{}
	e := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		if settings.Path != "" {
			baseUrl.Path = settings.Path
		}
		httpReq, err := http.NewRequest("GET", baseUrl.String(), nil)
		if err != nil {
			return err
		}
		httpReq = httpReq.WithContext(ctx)
		httpReq.Header = headers

		httpRsp, err := c.httpClient.Do(httpReq)
		if err != nil {
			return err
		}
		defer httpRsp.Body.Close()

		if err = googleapi.CheckResponse(httpRsp); err != nil {
			return err
		}

		buf, err := io.ReadAll(httpRsp.Body)
		if err != nil {
			return err
		}

		if err := unm.Unmarshal(buf, resp); err != nil {
			return err
		}

		return nil
	}, opts...)
	if e != nil {
		return nil, e
	}
	return resp, nil
}
