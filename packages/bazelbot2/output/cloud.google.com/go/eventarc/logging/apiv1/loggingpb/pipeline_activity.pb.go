// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/eventarc/logging/v1/pipeline_activity.proto

package loggingpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Format of the payload.
type PipelineActivity_PayloadFormat int32

const (
	// Default value. This value is unused.
	PipelineActivity_PAYLOAD_FORMAT_UNSPECIFIED PipelineActivity_PayloadFormat = 0
	// JSON payload format.
	PipelineActivity_JSON PipelineActivity_PayloadFormat = 1
	// Proto payload format.
	PipelineActivity_PROTO PipelineActivity_PayloadFormat = 2
	// Avro payload format.
	PipelineActivity_AVRO PipelineActivity_PayloadFormat = 3
)

// Enum value maps for PipelineActivity_PayloadFormat.
var (
	PipelineActivity_PayloadFormat_name = map[int32]string{
		0: "PAYLOAD_FORMAT_UNSPECIFIED",
		1: "JSON",
		2: "PROTO",
		3: "AVRO",
	}
	PipelineActivity_PayloadFormat_value = map[string]int32{
		"PAYLOAD_FORMAT_UNSPECIFIED": 0,
		"JSON":                       1,
		"PROTO":                      2,
		"AVRO":                       3,
	}
)

func (x PipelineActivity_PayloadFormat) Enum() *PipelineActivity_PayloadFormat {
	p := new(PipelineActivity_PayloadFormat)
	*p = x
	return p
}

func (x PipelineActivity_PayloadFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineActivity_PayloadFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes[0].Descriptor()
}

func (PipelineActivity_PayloadFormat) Type() protoreflect.EnumType {
	return &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes[0]
}

func (x PipelineActivity_PayloadFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineActivity_PayloadFormat.Descriptor instead.
func (PipelineActivity_PayloadFormat) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 0}
}

// Enum to encode the retry decision for the message after the response is
// received.
type PipelineActivity_MessageResponseReceived_RetryStatus int32

const (
	// Default value. This value is unused.
	PipelineActivity_MessageResponseReceived_RETRY_STATUS_UNSPECIFIED PipelineActivity_MessageResponseReceived_RetryStatus = 0
	// The Pipeline will retry dispatching the message to the destination.
	PipelineActivity_MessageResponseReceived_WILL_RETRY PipelineActivity_MessageResponseReceived_RetryStatus = 1
	// The Pipeline will not retry this message anymore.
	PipelineActivity_MessageResponseReceived_RETRY_EXHAUSTED PipelineActivity_MessageResponseReceived_RetryStatus = 2
)

// Enum value maps for PipelineActivity_MessageResponseReceived_RetryStatus.
var (
	PipelineActivity_MessageResponseReceived_RetryStatus_name = map[int32]string{
		0: "RETRY_STATUS_UNSPECIFIED",
		1: "WILL_RETRY",
		2: "RETRY_EXHAUSTED",
	}
	PipelineActivity_MessageResponseReceived_RetryStatus_value = map[string]int32{
		"RETRY_STATUS_UNSPECIFIED": 0,
		"WILL_RETRY":               1,
		"RETRY_EXHAUSTED":          2,
	}
)

func (x PipelineActivity_MessageResponseReceived_RetryStatus) Enum() *PipelineActivity_MessageResponseReceived_RetryStatus {
	p := new(PipelineActivity_MessageResponseReceived_RetryStatus)
	*p = x
	return p
}

func (x PipelineActivity_MessageResponseReceived_RetryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineActivity_MessageResponseReceived_RetryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes[1].Descriptor()
}

func (PipelineActivity_MessageResponseReceived_RetryStatus) Type() protoreflect.EnumType {
	return &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes[1]
}

func (x PipelineActivity_MessageResponseReceived_RetryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineActivity_MessageResponseReceived_RetryStatus.Descriptor instead.
func (PipelineActivity_MessageResponseReceived_RetryStatus) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 4, 0}
}

// Logged during the processing of a message in a pipeline.
type PipelineActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique system generated ID associated with the event passed from the
	// message bus.
	MessageUid string `protobuf:"bytes,1,opt,name=message_uid,json=messageUid,proto3" json:"message_uid,omitempty"`
	// The CloudEvent ID and source from the attributes of the event.
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The point in time when the activity occurred.
	ActivityTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=activity_time,json=activityTime,proto3" json:"activity_time,omitempty"`
	// Oneof for the different logging activities in a pipeline.
	//
	// Types that are assignable to Activity:
	//
	//	*PipelineActivity_MessageReceived_
	//	*PipelineActivity_MessageTransformed_
	//	*PipelineActivity_MessageConverted_
	//	*PipelineActivity_MessageRequestDispatched_
	//	*PipelineActivity_MessageResponseReceived_
	Activity isPipelineActivity_Activity `protobuf_oneof:"activity"`
}

func (x *PipelineActivity) Reset() {
	*x = PipelineActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity) ProtoMessage() {}

func (x *PipelineActivity) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity.ProtoReflect.Descriptor instead.
func (*PipelineActivity) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineActivity) GetMessageUid() string {
	if x != nil {
		return x.MessageUid
	}
	return ""
}

func (x *PipelineActivity) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *PipelineActivity) GetActivityTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivityTime
	}
	return nil
}

func (m *PipelineActivity) GetActivity() isPipelineActivity_Activity {
	if m != nil {
		return m.Activity
	}
	return nil
}

func (x *PipelineActivity) GetMessageReceived() *PipelineActivity_MessageReceived {
	if x, ok := x.GetActivity().(*PipelineActivity_MessageReceived_); ok {
		return x.MessageReceived
	}
	return nil
}

func (x *PipelineActivity) GetMessageTransformed() *PipelineActivity_MessageTransformed {
	if x, ok := x.GetActivity().(*PipelineActivity_MessageTransformed_); ok {
		return x.MessageTransformed
	}
	return nil
}

func (x *PipelineActivity) GetMessageConverted() *PipelineActivity_MessageConverted {
	if x, ok := x.GetActivity().(*PipelineActivity_MessageConverted_); ok {
		return x.MessageConverted
	}
	return nil
}

func (x *PipelineActivity) GetMessageRequestDispatched() *PipelineActivity_MessageRequestDispatched {
	if x, ok := x.GetActivity().(*PipelineActivity_MessageRequestDispatched_); ok {
		return x.MessageRequestDispatched
	}
	return nil
}

func (x *PipelineActivity) GetMessageResponseReceived() *PipelineActivity_MessageResponseReceived {
	if x, ok := x.GetActivity().(*PipelineActivity_MessageResponseReceived_); ok {
		return x.MessageResponseReceived
	}
	return nil
}

type isPipelineActivity_Activity interface {
	isPipelineActivity_Activity()
}

type PipelineActivity_MessageReceived_ struct {
	// Logging when a message is received in this Pipeline (or an error
	// encountered).
	MessageReceived *PipelineActivity_MessageReceived `protobuf:"bytes,4,opt,name=message_received,json=messageReceived,proto3,oneof"`
}

type PipelineActivity_MessageTransformed_ struct {
	// Logging when a message is transformed during mediation (or an error
	// encountered).
	MessageTransformed *PipelineActivity_MessageTransformed `protobuf:"bytes,5,opt,name=message_transformed,json=messageTransformed,proto3,oneof"`
}

type PipelineActivity_MessageConverted_ struct {
	// Logging when a message is converted during mediation (or an error
	// encountered).
	MessageConverted *PipelineActivity_MessageConverted `protobuf:"bytes,6,opt,name=message_converted,json=messageConverted,proto3,oneof"`
}

type PipelineActivity_MessageRequestDispatched_ struct {
	// Logging when a message request is dispatched to a destination (or an
	// error encountered).
	MessageRequestDispatched *PipelineActivity_MessageRequestDispatched `protobuf:"bytes,7,opt,name=message_request_dispatched,json=messageRequestDispatched,proto3,oneof"`
}

type PipelineActivity_MessageResponseReceived_ struct {
	// Logging when a message response (or error) is received from a
	// destination.
	MessageResponseReceived *PipelineActivity_MessageResponseReceived `protobuf:"bytes,8,opt,name=message_response_received,json=messageResponseReceived,proto3,oneof"`
}

func (*PipelineActivity_MessageReceived_) isPipelineActivity_Activity() {}

func (*PipelineActivity_MessageTransformed_) isPipelineActivity_Activity() {}

func (*PipelineActivity_MessageConverted_) isPipelineActivity_Activity() {}

func (*PipelineActivity_MessageRequestDispatched_) isPipelineActivity_Activity() {}

func (*PipelineActivity_MessageResponseReceived_) isPipelineActivity_Activity() {}

// Structured log that is emitted when a message is received in this Pipeline
// (or an error encountered).
type PipelineActivity_MessageReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informational details when a message is received from a source.
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Input payload format of the message.
	InputPayloadFormat PipelineActivity_PayloadFormat `protobuf:"varint,2,opt,name=input_payload_format,json=inputPayloadFormat,proto3,enum=google.cloud.eventarc.logging.v1.PipelineActivity_PayloadFormat" json:"input_payload_format,omitempty"`
	// Error encountered when receiving a message from a Channel, or if the
	// message is malformed.
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PipelineActivity_MessageReceived) Reset() {
	*x = PipelineActivity_MessageReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity_MessageReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity_MessageReceived) ProtoMessage() {}

func (x *PipelineActivity_MessageReceived) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity_MessageReceived.ProtoReflect.Descriptor instead.
func (*PipelineActivity_MessageReceived) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PipelineActivity_MessageReceived) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PipelineActivity_MessageReceived) GetInputPayloadFormat() PipelineActivity_PayloadFormat {
	if x != nil {
		return x.InputPayloadFormat
	}
	return PipelineActivity_PAYLOAD_FORMAT_UNSPECIFIED
}

func (x *PipelineActivity_MessageReceived) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Structured log that is emitted when a message is transformed during
// mediation (or an error encountered) in a Pipeline.
type PipelineActivity_MessageTransformed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informational details when a message is transformed during mediation.
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Error encountered when transforming a message.
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PipelineActivity_MessageTransformed) Reset() {
	*x = PipelineActivity_MessageTransformed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity_MessageTransformed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity_MessageTransformed) ProtoMessage() {}

func (x *PipelineActivity_MessageTransformed) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity_MessageTransformed.ProtoReflect.Descriptor instead.
func (*PipelineActivity_MessageTransformed) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PipelineActivity_MessageTransformed) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PipelineActivity_MessageTransformed) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Structured log that is emitted when a message is converted during
// mediation (or an error encountered) in a Pipeline.
type PipelineActivity_MessageConverted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informational details when a message is converted during mediation.
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// Input payload format of the message.
	InputPayloadFormat PipelineActivity_PayloadFormat `protobuf:"varint,2,opt,name=input_payload_format,json=inputPayloadFormat,proto3,enum=google.cloud.eventarc.logging.v1.PipelineActivity_PayloadFormat" json:"input_payload_format,omitempty"`
	// Output payload format of the message.
	OutputPayloadFormat PipelineActivity_PayloadFormat `protobuf:"varint,3,opt,name=output_payload_format,json=outputPayloadFormat,proto3,enum=google.cloud.eventarc.logging.v1.PipelineActivity_PayloadFormat" json:"output_payload_format,omitempty"`
	// Error encountered when converting a message.
	Error *status.Status `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PipelineActivity_MessageConverted) Reset() {
	*x = PipelineActivity_MessageConverted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity_MessageConverted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity_MessageConverted) ProtoMessage() {}

func (x *PipelineActivity_MessageConverted) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity_MessageConverted.ProtoReflect.Descriptor instead.
func (*PipelineActivity_MessageConverted) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PipelineActivity_MessageConverted) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PipelineActivity_MessageConverted) GetInputPayloadFormat() PipelineActivity_PayloadFormat {
	if x != nil {
		return x.InputPayloadFormat
	}
	return PipelineActivity_PAYLOAD_FORMAT_UNSPECIFIED
}

func (x *PipelineActivity_MessageConverted) GetOutputPayloadFormat() PipelineActivity_PayloadFormat {
	if x != nil {
		return x.OutputPayloadFormat
	}
	return PipelineActivity_PAYLOAD_FORMAT_UNSPECIFIED
}

func (x *PipelineActivity_MessageConverted) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Structured log that is emitted when a message request is dispatched to a
// destination (or an error encountered) in a Pipeline.
type PipelineActivity_MessageRequestDispatched struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informational details when a message is dispatched to a destination.
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// The destination where the event is sent to.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// Error encountered before dispatching a message, e.g., malformed
	// destination.
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PipelineActivity_MessageRequestDispatched) Reset() {
	*x = PipelineActivity_MessageRequestDispatched{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity_MessageRequestDispatched) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity_MessageRequestDispatched) ProtoMessage() {}

func (x *PipelineActivity_MessageRequestDispatched) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity_MessageRequestDispatched.ProtoReflect.Descriptor instead.
func (*PipelineActivity_MessageRequestDispatched) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PipelineActivity_MessageRequestDispatched) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PipelineActivity_MessageRequestDispatched) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *PipelineActivity_MessageRequestDispatched) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

// Structured log that is emitted when a message response (or error) is
// received from a destination for a message request that was dispatched
// earlier in a Pipeline.
type PipelineActivity_MessageResponseReceived struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informational details when a message response was received by the target,
	// or when the request failed.
	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// The retry decision for the message after the response is received.
	RetryStatus PipelineActivity_MessageResponseReceived_RetryStatus `protobuf:"varint,2,opt,name=retry_status,json=retryStatus,proto3,enum=google.cloud.eventarc.logging.v1.PipelineActivity_MessageResponseReceived_RetryStatus" json:"retry_status,omitempty"`
	// The future time when the message request will be retried. Present if and
	// only if the `retry_status` is `WILL_RETRY`.
	RetryTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=retry_time,json=retryTime,proto3" json:"retry_time,omitempty"`
	// The HTTP response code received with the message response.
	HttpResponseCode int32 `protobuf:"varint,4,opt,name=http_response_code,json=httpResponseCode,proto3" json:"http_response_code,omitempty"`
	// Status of the message response received.
	Error *status.Status `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *PipelineActivity_MessageResponseReceived) Reset() {
	*x = PipelineActivity_MessageResponseReceived{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineActivity_MessageResponseReceived) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineActivity_MessageResponseReceived) ProtoMessage() {}

func (x *PipelineActivity_MessageResponseReceived) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineActivity_MessageResponseReceived.ProtoReflect.Descriptor instead.
func (*PipelineActivity_MessageResponseReceived) Descriptor() ([]byte, []int) {
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PipelineActivity_MessageResponseReceived) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *PipelineActivity_MessageResponseReceived) GetRetryStatus() PipelineActivity_MessageResponseReceived_RetryStatus {
	if x != nil {
		return x.RetryStatus
	}
	return PipelineActivity_MessageResponseReceived_RETRY_STATUS_UNSPECIFIED
}

func (x *PipelineActivity_MessageResponseReceived) GetRetryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RetryTime
	}
	return nil
}

func (x *PipelineActivity_MessageResponseReceived) GetHttpResponseCode() int32 {
	if x != nil {
		return x.HttpResponseCode
	}
	return 0
}

func (x *PipelineActivity_MessageResponseReceived) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_google_cloud_eventarc_logging_v1_pipeline_activity_proto protoreflect.FileDescriptor

var file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x10, 0x0a, 0x10, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xe2,
	0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x55, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x78, 0x0a, 0x13, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x72, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x88, 0x01, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72,
	0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x1a, 0xc9, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x72,
	0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x58, 0x0a, 0x12,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xc0, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x72, 0x0a, 0x14, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x74, 0x0a, 0x15, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x13, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x80, 0x01, 0x0a, 0x18, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x93, 0x03, 0x0a,
	0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x79, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63,
	0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x57, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x4e, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x56, 0x52, 0x4f, 0x10,
	0x03, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0xec, 0x01,
	0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0x3b, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0xaa,
	0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x20, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5c, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x5c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x5c, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x5c, 0x56, 0x31, 0xea, 0x02, 0x24, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x3a, 0x3a,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x63, 0x3a,
	0x3a, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescOnce sync.Once
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescData = file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDesc
)

func file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescGZIP() []byte {
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescOnce.Do(func() {
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescData)
	})
	return file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDescData
}

var file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_goTypes = []any{
	(PipelineActivity_PayloadFormat)(0),                       // 0: google.cloud.eventarc.logging.v1.PipelineActivity.PayloadFormat
	(PipelineActivity_MessageResponseReceived_RetryStatus)(0), // 1: google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived.RetryStatus
	(*PipelineActivity)(nil),                                  // 2: google.cloud.eventarc.logging.v1.PipelineActivity
	(*PipelineActivity_MessageReceived)(nil),                  // 3: google.cloud.eventarc.logging.v1.PipelineActivity.MessageReceived
	(*PipelineActivity_MessageTransformed)(nil),               // 4: google.cloud.eventarc.logging.v1.PipelineActivity.MessageTransformed
	(*PipelineActivity_MessageConverted)(nil),                 // 5: google.cloud.eventarc.logging.v1.PipelineActivity.MessageConverted
	(*PipelineActivity_MessageRequestDispatched)(nil),         // 6: google.cloud.eventarc.logging.v1.PipelineActivity.MessageRequestDispatched
	(*PipelineActivity_MessageResponseReceived)(nil),          // 7: google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived
	nil,                           // 8: google.cloud.eventarc.logging.v1.PipelineActivity.AttributesEntry
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*status.Status)(nil),         // 10: google.rpc.Status
}
var file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_depIdxs = []int32{
	8,  // 0: google.cloud.eventarc.logging.v1.PipelineActivity.attributes:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.AttributesEntry
	9,  // 1: google.cloud.eventarc.logging.v1.PipelineActivity.activity_time:type_name -> google.protobuf.Timestamp
	3,  // 2: google.cloud.eventarc.logging.v1.PipelineActivity.message_received:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageReceived
	4,  // 3: google.cloud.eventarc.logging.v1.PipelineActivity.message_transformed:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageTransformed
	5,  // 4: google.cloud.eventarc.logging.v1.PipelineActivity.message_converted:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageConverted
	6,  // 5: google.cloud.eventarc.logging.v1.PipelineActivity.message_request_dispatched:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageRequestDispatched
	7,  // 6: google.cloud.eventarc.logging.v1.PipelineActivity.message_response_received:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived
	0,  // 7: google.cloud.eventarc.logging.v1.PipelineActivity.MessageReceived.input_payload_format:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.PayloadFormat
	10, // 8: google.cloud.eventarc.logging.v1.PipelineActivity.MessageReceived.error:type_name -> google.rpc.Status
	10, // 9: google.cloud.eventarc.logging.v1.PipelineActivity.MessageTransformed.error:type_name -> google.rpc.Status
	0,  // 10: google.cloud.eventarc.logging.v1.PipelineActivity.MessageConverted.input_payload_format:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.PayloadFormat
	0,  // 11: google.cloud.eventarc.logging.v1.PipelineActivity.MessageConverted.output_payload_format:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.PayloadFormat
	10, // 12: google.cloud.eventarc.logging.v1.PipelineActivity.MessageConverted.error:type_name -> google.rpc.Status
	10, // 13: google.cloud.eventarc.logging.v1.PipelineActivity.MessageRequestDispatched.error:type_name -> google.rpc.Status
	1,  // 14: google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived.retry_status:type_name -> google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived.RetryStatus
	9,  // 15: google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived.retry_time:type_name -> google.protobuf.Timestamp
	10, // 16: google.cloud.eventarc.logging.v1.PipelineActivity.MessageResponseReceived.error:type_name -> google.rpc.Status
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_init() }
func file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_init() {
	if File_google_cloud_eventarc_logging_v1_pipeline_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity_MessageReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity_MessageTransformed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity_MessageConverted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity_MessageRequestDispatched); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PipelineActivity_MessageResponseReceived); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes[0].OneofWrappers = []any{
		(*PipelineActivity_MessageReceived_)(nil),
		(*PipelineActivity_MessageTransformed_)(nil),
		(*PipelineActivity_MessageConverted_)(nil),
		(*PipelineActivity_MessageRequestDispatched_)(nil),
		(*PipelineActivity_MessageResponseReceived_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_goTypes,
		DependencyIndexes: file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_depIdxs,
		EnumInfos:         file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_enumTypes,
		MessageInfos:      file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_msgTypes,
	}.Build()
	File_google_cloud_eventarc_logging_v1_pipeline_activity_proto = out.File
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_rawDesc = nil
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_goTypes = nil
	file_google_cloud_eventarc_logging_v1_pipeline_activity_proto_depIdxs = nil
}
