// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/abuseevent/logging/v1/abuse_event.proto

package loggingpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicates the type of abuse detected on the monitored resource.
type AbuseEvent_DetectionType int32

const (
	// Default/unspecified abuse detection type.
	AbuseEvent_DETECTION_TYPE_UNSPECIFIED AbuseEvent_DetectionType = 0
	// The monitored resource is used to mine cryptocurrencies.
	AbuseEvent_CRYPTO_MINING AbuseEvent_DetectionType = 1
	// The monitored resource's credentials have accidentally been leaked on the
	// internet.
	AbuseEvent_LEAKED_CREDENTIALS AbuseEvent_DetectionType = 2
	// The monitored resource is used for phishing attacks.
	AbuseEvent_PHISHING AbuseEvent_DetectionType = 3
	// The monitored resource is associated with content that is infected or
	// infects users with malicious software.
	AbuseEvent_MALWARE AbuseEvent_DetectionType = 4
	// No abuse is detected on the monitored resource, but its abuse state may
	// have been updated.
	AbuseEvent_NO_ABUSE AbuseEvent_DetectionType = 5
)

// Enum value maps for AbuseEvent_DetectionType.
var (
	AbuseEvent_DetectionType_name = map[int32]string{
		0: "DETECTION_TYPE_UNSPECIFIED",
		1: "CRYPTO_MINING",
		2: "LEAKED_CREDENTIALS",
		3: "PHISHING",
		4: "MALWARE",
		5: "NO_ABUSE",
	}
	AbuseEvent_DetectionType_value = map[string]int32{
		"DETECTION_TYPE_UNSPECIFIED": 0,
		"CRYPTO_MINING":              1,
		"LEAKED_CREDENTIALS":         2,
		"PHISHING":                   3,
		"MALWARE":                    4,
		"NO_ABUSE":                   5,
	}
)

func (x AbuseEvent_DetectionType) Enum() *AbuseEvent_DetectionType {
	p := new(AbuseEvent_DetectionType)
	*p = x
	return p
}

func (x AbuseEvent_DetectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbuseEvent_DetectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes[0].Descriptor()
}

func (AbuseEvent_DetectionType) Type() protoreflect.EnumType {
	return &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes[0]
}

func (x AbuseEvent_DetectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbuseEvent_DetectionType.Descriptor instead.
func (AbuseEvent_DetectionType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{0, 0}
}

// Indicates any action taken on the monitored resource due to abuse
// detection.
type AbuseEvent_ActionType int32

const (
	// The monitored resource state is unspecified.
	AbuseEvent_ACTION_TYPE_UNSPECIFIED AbuseEvent_ActionType = 0
	// The owner of the monitored resource needs to be notified about a finding.
	AbuseEvent_NOTIFY AbuseEvent_ActionType = 1
	// The associated cloud project has been suspended.
	AbuseEvent_PROJECT_SUSPENSION AbuseEvent_ActionType = 2
	// The monitored resource has been reinstated.
	AbuseEvent_REINSTATE AbuseEvent_ActionType = 3
	// The owner of the monitored resource needs to be warned about abusive
	// behavior. This notification could lead to future enforcements if remedial
	// actions are not taken. This action should not be confused with NOTIFY.
	AbuseEvent_WARN AbuseEvent_ActionType = 4
	// The resource (eg: VM) has been suspended.
	AbuseEvent_RESOURCE_SUSPENSION AbuseEvent_ActionType = 5
)

// Enum value maps for AbuseEvent_ActionType.
var (
	AbuseEvent_ActionType_name = map[int32]string{
		0: "ACTION_TYPE_UNSPECIFIED",
		1: "NOTIFY",
		2: "PROJECT_SUSPENSION",
		3: "REINSTATE",
		4: "WARN",
		5: "RESOURCE_SUSPENSION",
	}
	AbuseEvent_ActionType_value = map[string]int32{
		"ACTION_TYPE_UNSPECIFIED": 0,
		"NOTIFY":                  1,
		"PROJECT_SUSPENSION":      2,
		"REINSTATE":               3,
		"WARN":                    4,
		"RESOURCE_SUSPENSION":     5,
	}
)

func (x AbuseEvent_ActionType) Enum() *AbuseEvent_ActionType {
	p := new(AbuseEvent_ActionType)
	*p = x
	return p
}

func (x AbuseEvent_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbuseEvent_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes[1].Descriptor()
}

func (AbuseEvent_ActionType) Type() protoreflect.EnumType {
	return &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes[1]
}

func (x AbuseEvent_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbuseEvent_ActionType.Descriptor instead.
func (AbuseEvent_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{0, 1}
}

// Logged event discussing an abuse finding on the monitored resource.
type AbuseEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED Correlates to the abuse finding causing the notification.
	DetectionType AbuseEvent_DetectionType `protobuf:"varint,1,opt,name=detection_type,json=detectionType,proto3,enum=google.cloud.abuseevent.logging.v1.AbuseEvent_DetectionType" json:"detection_type,omitempty"`
	// REQUIRED Explains the meaning of the detection_type.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// REQUIRED Correlates to the action taken on the monitored resource.
	Action AbuseEvent_ActionType `protobuf:"varint,3,opt,name=action,proto3,enum=google.cloud.abuseevent.logging.v1.AbuseEvent_ActionType" json:"action,omitempty"`
	// REQUIRED Contains addiional metadata about the detected abuse event.
	//
	// Types that are assignable to EventType:
	//
	//	*AbuseEvent_CryptoMiningEvent
	//	*AbuseEvent_LeakedCredentialEvent
	//	*AbuseEvent_HarmfulContentEvent
	//	*AbuseEvent_ReinstatementEvent
	//	*AbuseEvent_DecisionEscalationEvent
	EventType isAbuseEvent_EventType `protobuf_oneof:"event_type"`
	// Contains the umbrella link for remediation after an abuse notification.
	RemediationLink string `protobuf:"bytes,7,opt,name=remediation_link,json=remediationLink,proto3" json:"remediation_link,omitempty"`
}

func (x *AbuseEvent) Reset() {
	*x = AbuseEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbuseEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbuseEvent) ProtoMessage() {}

func (x *AbuseEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbuseEvent.ProtoReflect.Descriptor instead.
func (*AbuseEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{0}
}

func (x *AbuseEvent) GetDetectionType() AbuseEvent_DetectionType {
	if x != nil {
		return x.DetectionType
	}
	return AbuseEvent_DETECTION_TYPE_UNSPECIFIED
}

func (x *AbuseEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AbuseEvent) GetAction() AbuseEvent_ActionType {
	if x != nil {
		return x.Action
	}
	return AbuseEvent_ACTION_TYPE_UNSPECIFIED
}

func (m *AbuseEvent) GetEventType() isAbuseEvent_EventType {
	if m != nil {
		return m.EventType
	}
	return nil
}

func (x *AbuseEvent) GetCryptoMiningEvent() *CryptoMiningEvent {
	if x, ok := x.GetEventType().(*AbuseEvent_CryptoMiningEvent); ok {
		return x.CryptoMiningEvent
	}
	return nil
}

func (x *AbuseEvent) GetLeakedCredentialEvent() *LeakedCredentialEvent {
	if x, ok := x.GetEventType().(*AbuseEvent_LeakedCredentialEvent); ok {
		return x.LeakedCredentialEvent
	}
	return nil
}

func (x *AbuseEvent) GetHarmfulContentEvent() *HarmfulContentEvent {
	if x, ok := x.GetEventType().(*AbuseEvent_HarmfulContentEvent); ok {
		return x.HarmfulContentEvent
	}
	return nil
}

func (x *AbuseEvent) GetReinstatementEvent() *ReinstatementEvent {
	if x, ok := x.GetEventType().(*AbuseEvent_ReinstatementEvent); ok {
		return x.ReinstatementEvent
	}
	return nil
}

func (x *AbuseEvent) GetDecisionEscalationEvent() *DecisionEscalationEvent {
	if x, ok := x.GetEventType().(*AbuseEvent_DecisionEscalationEvent); ok {
		return x.DecisionEscalationEvent
	}
	return nil
}

func (x *AbuseEvent) GetRemediationLink() string {
	if x != nil {
		return x.RemediationLink
	}
	return ""
}

type isAbuseEvent_EventType interface {
	isAbuseEvent_EventType()
}

type AbuseEvent_CryptoMiningEvent struct {
	// Information about a cryptocurrency mining event observed on the monitored
	// resource.
	CryptoMiningEvent *CryptoMiningEvent `protobuf:"bytes,4,opt,name=crypto_mining_event,json=cryptoMiningEvent,proto3,oneof"`
}

type AbuseEvent_LeakedCredentialEvent struct {
	// Information about the leaked client credentials observed on the monitored
	// resource.
	LeakedCredentialEvent *LeakedCredentialEvent `protobuf:"bytes,5,opt,name=leaked_credential_event,json=leakedCredentialEvent,proto3,oneof"`
}

type AbuseEvent_HarmfulContentEvent struct {
	// Information about the phishing/malware URI(s) associated with the
	// monitored resource.
	HarmfulContentEvent *HarmfulContentEvent `protobuf:"bytes,6,opt,name=harmful_content_event,json=harmfulContentEvent,proto3,oneof"`
}

type AbuseEvent_ReinstatementEvent struct {
	// Information about the reinstatement issued on the monitored resource.
	ReinstatementEvent *ReinstatementEvent `protobuf:"bytes,8,opt,name=reinstatement_event,json=reinstatementEvent,proto3,oneof"`
}

type AbuseEvent_DecisionEscalationEvent struct {
	// Information about the escalation of enforcement action on the monitored
	// resource.
	DecisionEscalationEvent *DecisionEscalationEvent `protobuf:"bytes,9,opt,name=decision_escalation_event,json=decisionEscalationEvent,proto3,oneof"`
}

func (*AbuseEvent_CryptoMiningEvent) isAbuseEvent_EventType() {}

func (*AbuseEvent_LeakedCredentialEvent) isAbuseEvent_EventType() {}

func (*AbuseEvent_HarmfulContentEvent) isAbuseEvent_EventType() {}

func (*AbuseEvent_ReinstatementEvent) isAbuseEvent_EventType() {}

func (*AbuseEvent_DecisionEscalationEvent) isAbuseEvent_EventType() {}

// Information about a cryptocurrency mining event observed on the monitored
// resource.
type CryptoMiningEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VM and zone in which cryptocurrency mining occurred.
	// Format: projects/{project}/zones/{zone}/instances/{instance}
	VmResource []string `protobuf:"bytes,1,rep,name=vm_resource,json=vmResource,proto3" json:"vm_resource,omitempty"`
	// Detected start time of the cryptocurrency mining.
	DetectedMiningStartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=detected_mining_start_time,json=detectedMiningStartTime,proto3" json:"detected_mining_start_time,omitempty"`
	// Detected end time of the cryptocurrency mining.
	DetectedMiningEndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=detected_mining_end_time,json=detectedMiningEndTime,proto3" json:"detected_mining_end_time,omitempty"`
	// The IP address(es) of the VM associated with the cryptocurrency mining.
	// This field may be empty if this information is not available.
	VmIp []string `protobuf:"bytes,4,rep,name=vm_ip,json=vmIp,proto3" json:"vm_ip,omitempty"`
}

func (x *CryptoMiningEvent) Reset() {
	*x = CryptoMiningEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoMiningEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoMiningEvent) ProtoMessage() {}

func (x *CryptoMiningEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoMiningEvent.ProtoReflect.Descriptor instead.
func (*CryptoMiningEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{1}
}

func (x *CryptoMiningEvent) GetVmResource() []string {
	if x != nil {
		return x.VmResource
	}
	return nil
}

func (x *CryptoMiningEvent) GetDetectedMiningStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedMiningStartTime
	}
	return nil
}

func (x *CryptoMiningEvent) GetDetectedMiningEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DetectedMiningEndTime
	}
	return nil
}

func (x *CryptoMiningEvent) GetVmIp() []string {
	if x != nil {
		return x.VmIp
	}
	return nil
}

// Information about the leaked client credentials observed on the monitored
// resource.
type LeakedCredentialEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the type of credential leaked.
	//
	// Types that are assignable to CredentialType:
	//
	//	*LeakedCredentialEvent_ServiceAccountCredential
	//	*LeakedCredentialEvent_ApiKeyCredential
	CredentialType isLeakedCredentialEvent_CredentialType `protobuf_oneof:"credential_type"`
	// URI where the client credentials were found.
	DetectedUri string `protobuf:"bytes,3,opt,name=detected_uri,json=detectedUri,proto3" json:"detected_uri,omitempty"`
}

func (x *LeakedCredentialEvent) Reset() {
	*x = LeakedCredentialEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeakedCredentialEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeakedCredentialEvent) ProtoMessage() {}

func (x *LeakedCredentialEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeakedCredentialEvent.ProtoReflect.Descriptor instead.
func (*LeakedCredentialEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{2}
}

func (m *LeakedCredentialEvent) GetCredentialType() isLeakedCredentialEvent_CredentialType {
	if m != nil {
		return m.CredentialType
	}
	return nil
}

func (x *LeakedCredentialEvent) GetServiceAccountCredential() *ServiceAccountCredential {
	if x, ok := x.GetCredentialType().(*LeakedCredentialEvent_ServiceAccountCredential); ok {
		return x.ServiceAccountCredential
	}
	return nil
}

func (x *LeakedCredentialEvent) GetApiKeyCredential() *ApiKeyCredential {
	if x, ok := x.GetCredentialType().(*LeakedCredentialEvent_ApiKeyCredential); ok {
		return x.ApiKeyCredential
	}
	return nil
}

func (x *LeakedCredentialEvent) GetDetectedUri() string {
	if x != nil {
		return x.DetectedUri
	}
	return ""
}

type isLeakedCredentialEvent_CredentialType interface {
	isLeakedCredentialEvent_CredentialType()
}

type LeakedCredentialEvent_ServiceAccountCredential struct {
	// Information about leaked service accounts.
	ServiceAccountCredential *ServiceAccountCredential `protobuf:"bytes,1,opt,name=service_account_credential,json=serviceAccountCredential,proto3,oneof"`
}

type LeakedCredentialEvent_ApiKeyCredential struct {
	// Information about leaked API keys.
	ApiKeyCredential *ApiKeyCredential `protobuf:"bytes,2,opt,name=api_key_credential,json=apiKeyCredential,proto3,oneof"`
}

func (*LeakedCredentialEvent_ServiceAccountCredential) isLeakedCredentialEvent_CredentialType() {}

func (*LeakedCredentialEvent_ApiKeyCredential) isLeakedCredentialEvent_CredentialType() {}

// Information about leaked service accounts.
type ServiceAccountCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service account whose credentials were leaked.
	ServiceAccount string `protobuf:"bytes,1,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Private Key ID for any leaked keys.
	KeyId string `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *ServiceAccountCredential) Reset() {
	*x = ServiceAccountCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceAccountCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAccountCredential) ProtoMessage() {}

func (x *ServiceAccountCredential) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAccountCredential.ProtoReflect.Descriptor instead.
func (*ServiceAccountCredential) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceAccountCredential) GetServiceAccount() string {
	if x != nil {
		return x.ServiceAccount
	}
	return ""
}

func (x *ServiceAccountCredential) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

// Information about leaked API keys.
type ApiKeyCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// API key that was leaked.
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *ApiKeyCredential) Reset() {
	*x = ApiKeyCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKeyCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyCredential) ProtoMessage() {}

func (x *ApiKeyCredential) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyCredential.ProtoReflect.Descriptor instead.
func (*ApiKeyCredential) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{4}
}

func (x *ApiKeyCredential) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// Information about the phishing/malware URIs associated with the monitored
// resource.
type HarmfulContentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URIs associated with the phishing/malware finding.
	Uri []string `protobuf:"bytes,1,rep,name=uri,proto3" json:"uri,omitempty"`
}

func (x *HarmfulContentEvent) Reset() {
	*x = HarmfulContentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarmfulContentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarmfulContentEvent) ProtoMessage() {}

func (x *HarmfulContentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarmfulContentEvent.ProtoReflect.Descriptor instead.
func (*HarmfulContentEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{5}
}

func (x *HarmfulContentEvent) GetUri() []string {
	if x != nil {
		return x.Uri
	}
	return nil
}

// Information about the reinstatement issued on the monitored resource.
type ReinstatementEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReinstatementEvent) Reset() {
	*x = ReinstatementEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReinstatementEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReinstatementEvent) ProtoMessage() {}

func (x *ReinstatementEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReinstatementEvent.ProtoReflect.Descriptor instead.
func (*ReinstatementEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{6}
}

// Information about the escalation of enforcement action on the monitored
// resource. Eg: Used for repeat offenders.
type DecisionEscalationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DecisionEscalationEvent) Reset() {
	*x = DecisionEscalationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecisionEscalationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecisionEscalationEvent) ProtoMessage() {}

func (x *DecisionEscalationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecisionEscalationEvent.ProtoReflect.Descriptor instead.
func (*DecisionEscalationEvent) Descriptor() ([]byte, []int) {
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP(), []int{7}
}

var File_google_cloud_abuseevent_logging_v1_abuse_event_proto protoreflect.FileDescriptor

var file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDesc = []byte{
	0x0a, 0x34, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x61,
	0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x62, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x08, 0x0a, 0x0a, 0x41, 0x62, 0x75,
	0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x0e, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61,
	0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x75, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x13, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x73, 0x0a, 0x17, 0x6c, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15,
	0x6c, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x6d, 0x0a, 0x15, 0x68, 0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x72, 0x6d, 0x66, 0x75,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x68, 0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x79, 0x0a, 0x19, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x17, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x54, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45,
	0x41, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x49, 0x53, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x4c, 0x57, 0x41, 0x52, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x4f, 0x5f, 0x41, 0x42, 0x55, 0x53, 0x45, 0x10, 0x05, 0x22, 0x7f, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x55,
	0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52,
	0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0x0c, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x1a, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x17, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08,
	0xe2, 0x8c, 0xcf, 0xd7, 0x08, 0x02, 0x08, 0x04, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x70, 0x22, 0xb1,
	0x02, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x6b, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7c, 0x0a, 0x1a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73,
	0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x18, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x64, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x10, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x55, 0x72, 0x69, 0x42,
	0x11, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x5a, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x2b,
	0x0a, 0x10, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x27, 0x0a, 0x13, 0x48,
	0x61, 0x72, 0x6d, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0xa5, 0x01, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x62, 0x75, 0x73, 0x65,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x0f, 0x41, 0x62, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x40, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x62, 0x75, 0x73, 0x65, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x3b, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x70, 0x62, 0xf8, 0x01, 0x01, 0xaa, 0x02, 0x22, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x41, 0x62, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescOnce sync.Once
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescData = file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDesc
)

func file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescGZIP() []byte {
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescOnce.Do(func() {
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescData)
	})
	return file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDescData
}

var file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_google_cloud_abuseevent_logging_v1_abuse_event_proto_goTypes = []any{
	(AbuseEvent_DetectionType)(0),    // 0: google.cloud.abuseevent.logging.v1.AbuseEvent.DetectionType
	(AbuseEvent_ActionType)(0),       // 1: google.cloud.abuseevent.logging.v1.AbuseEvent.ActionType
	(*AbuseEvent)(nil),               // 2: google.cloud.abuseevent.logging.v1.AbuseEvent
	(*CryptoMiningEvent)(nil),        // 3: google.cloud.abuseevent.logging.v1.CryptoMiningEvent
	(*LeakedCredentialEvent)(nil),    // 4: google.cloud.abuseevent.logging.v1.LeakedCredentialEvent
	(*ServiceAccountCredential)(nil), // 5: google.cloud.abuseevent.logging.v1.ServiceAccountCredential
	(*ApiKeyCredential)(nil),         // 6: google.cloud.abuseevent.logging.v1.ApiKeyCredential
	(*HarmfulContentEvent)(nil),      // 7: google.cloud.abuseevent.logging.v1.HarmfulContentEvent
	(*ReinstatementEvent)(nil),       // 8: google.cloud.abuseevent.logging.v1.ReinstatementEvent
	(*DecisionEscalationEvent)(nil),  // 9: google.cloud.abuseevent.logging.v1.DecisionEscalationEvent
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
}
var file_google_cloud_abuseevent_logging_v1_abuse_event_proto_depIdxs = []int32{
	0,  // 0: google.cloud.abuseevent.logging.v1.AbuseEvent.detection_type:type_name -> google.cloud.abuseevent.logging.v1.AbuseEvent.DetectionType
	1,  // 1: google.cloud.abuseevent.logging.v1.AbuseEvent.action:type_name -> google.cloud.abuseevent.logging.v1.AbuseEvent.ActionType
	3,  // 2: google.cloud.abuseevent.logging.v1.AbuseEvent.crypto_mining_event:type_name -> google.cloud.abuseevent.logging.v1.CryptoMiningEvent
	4,  // 3: google.cloud.abuseevent.logging.v1.AbuseEvent.leaked_credential_event:type_name -> google.cloud.abuseevent.logging.v1.LeakedCredentialEvent
	7,  // 4: google.cloud.abuseevent.logging.v1.AbuseEvent.harmful_content_event:type_name -> google.cloud.abuseevent.logging.v1.HarmfulContentEvent
	8,  // 5: google.cloud.abuseevent.logging.v1.AbuseEvent.reinstatement_event:type_name -> google.cloud.abuseevent.logging.v1.ReinstatementEvent
	9,  // 6: google.cloud.abuseevent.logging.v1.AbuseEvent.decision_escalation_event:type_name -> google.cloud.abuseevent.logging.v1.DecisionEscalationEvent
	10, // 7: google.cloud.abuseevent.logging.v1.CryptoMiningEvent.detected_mining_start_time:type_name -> google.protobuf.Timestamp
	10, // 8: google.cloud.abuseevent.logging.v1.CryptoMiningEvent.detected_mining_end_time:type_name -> google.protobuf.Timestamp
	5,  // 9: google.cloud.abuseevent.logging.v1.LeakedCredentialEvent.service_account_credential:type_name -> google.cloud.abuseevent.logging.v1.ServiceAccountCredential
	6,  // 10: google.cloud.abuseevent.logging.v1.LeakedCredentialEvent.api_key_credential:type_name -> google.cloud.abuseevent.logging.v1.ApiKeyCredential
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_google_cloud_abuseevent_logging_v1_abuse_event_proto_init() }
func file_google_cloud_abuseevent_logging_v1_abuse_event_proto_init() {
	if File_google_cloud_abuseevent_logging_v1_abuse_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AbuseEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CryptoMiningEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LeakedCredentialEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ServiceAccountCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ApiKeyCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*HarmfulContentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ReinstatementEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DecisionEscalationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[0].OneofWrappers = []any{
		(*AbuseEvent_CryptoMiningEvent)(nil),
		(*AbuseEvent_LeakedCredentialEvent)(nil),
		(*AbuseEvent_HarmfulContentEvent)(nil),
		(*AbuseEvent_ReinstatementEvent)(nil),
		(*AbuseEvent_DecisionEscalationEvent)(nil),
	}
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes[2].OneofWrappers = []any{
		(*LeakedCredentialEvent_ServiceAccountCredential)(nil),
		(*LeakedCredentialEvent_ApiKeyCredential)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_abuseevent_logging_v1_abuse_event_proto_goTypes,
		DependencyIndexes: file_google_cloud_abuseevent_logging_v1_abuse_event_proto_depIdxs,
		EnumInfos:         file_google_cloud_abuseevent_logging_v1_abuse_event_proto_enumTypes,
		MessageInfos:      file_google_cloud_abuseevent_logging_v1_abuse_event_proto_msgTypes,
	}.Build()
	File_google_cloud_abuseevent_logging_v1_abuse_event_proto = out.File
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_rawDesc = nil
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_goTypes = nil
	file_google_cloud_abuseevent_logging_v1_abuse_event_proto_depIdxs = nil
}
