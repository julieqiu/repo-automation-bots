// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go_gapic. DO NOT EDIT.

package tpu

import (
	"context"
	"fmt"
	"math"
	"net/url"
	"time"

	"cloud.google.com/go/longrunning"
	lroauto "cloud.google.com/go/longrunning/autogen"
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	tpupb "cloud.google.com/go/tpu/apiv2alpha1/tpupb"
	gax "github.com/googleapis/gax-go/v2"
	"google.golang.org/api/iterator"
	"google.golang.org/api/option"
	"google.golang.org/api/option/internaloption"
	gtransport "google.golang.org/api/transport/grpc"
	locationpb "google.golang.org/genproto/googleapis/cloud/location"
	"google.golang.org/grpc"
	"google.golang.org/protobuf/proto"
)

var newClientHook clientHook

// CallOptions contains the retry settings for each method of Client.
type CallOptions struct {
	ListNodes                []gax.CallOption
	GetNode                  []gax.CallOption
	CreateNode               []gax.CallOption
	DeleteNode               []gax.CallOption
	StopNode                 []gax.CallOption
	StartNode                []gax.CallOption
	UpdateNode               []gax.CallOption
	ListQueuedResources      []gax.CallOption
	GetQueuedResource        []gax.CallOption
	CreateQueuedResource     []gax.CallOption
	DeleteQueuedResource     []gax.CallOption
	ResetQueuedResource      []gax.CallOption
	GenerateServiceIdentity  []gax.CallOption
	ListAcceleratorTypes     []gax.CallOption
	GetAcceleratorType       []gax.CallOption
	ListRuntimeVersions      []gax.CallOption
	GetRuntimeVersion        []gax.CallOption
	GetGuestAttributes       []gax.CallOption
	SimulateMaintenanceEvent []gax.CallOption
	GetLocation              []gax.CallOption
	ListLocations            []gax.CallOption
	CancelOperation          []gax.CallOption
	DeleteOperation          []gax.CallOption
	GetOperation             []gax.CallOption
	ListOperations           []gax.CallOption
}

func defaultGRPCClientOptions() []option.ClientOption {
	return []option.ClientOption{
		internaloption.WithDefaultEndpoint("tpu.googleapis.com:443"),
		internaloption.WithDefaultEndpointTemplate("tpu.UNIVERSE_DOMAIN:443"),
		internaloption.WithDefaultMTLSEndpoint("tpu.mtls.googleapis.com:443"),
		internaloption.WithDefaultUniverseDomain("googleapis.com"),
		internaloption.WithDefaultAudience("https://tpu.googleapis.com/"),
		internaloption.WithDefaultScopes(DefaultAuthScopes()...),
		internaloption.EnableJwtWithScope(),
		internaloption.EnableNewAuthLibrary(),
		option.WithGRPCDialOption(grpc.WithDefaultCallOptions(
			grpc.MaxCallRecvMsgSize(math.MaxInt32))),
	}
}

func defaultCallOptions() *CallOptions {
	return &CallOptions{
		ListNodes: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		StopNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		StartNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		UpdateNode: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListQueuedResources: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetQueuedResource: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		CreateQueuedResource: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		DeleteQueuedResource: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ResetQueuedResource: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GenerateServiceIdentity: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListAcceleratorTypes: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetAcceleratorType: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		ListRuntimeVersions: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetRuntimeVersion: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetGuestAttributes: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		SimulateMaintenanceEvent: []gax.CallOption{
			gax.WithTimeout(60000 * time.Millisecond),
		},
		GetLocation:     []gax.CallOption{},
		ListLocations:   []gax.CallOption{},
		CancelOperation: []gax.CallOption{},
		DeleteOperation: []gax.CallOption{},
		GetOperation:    []gax.CallOption{},
		ListOperations:  []gax.CallOption{},
	}
}

// internalClient is an interface that defines the methods available from Cloud TPU API.
type internalClient interface {
	Close() error
	setGoogleClientInfo(...string)
	Connection() *grpc.ClientConn
	ListNodes(context.Context, *tpupb.ListNodesRequest, ...gax.CallOption) *NodeIterator
	GetNode(context.Context, *tpupb.GetNodeRequest, ...gax.CallOption) (*tpupb.Node, error)
	CreateNode(context.Context, *tpupb.CreateNodeRequest, ...gax.CallOption) (*CreateNodeOperation, error)
	CreateNodeOperation(name string) *CreateNodeOperation
	DeleteNode(context.Context, *tpupb.DeleteNodeRequest, ...gax.CallOption) (*DeleteNodeOperation, error)
	DeleteNodeOperation(name string) *DeleteNodeOperation
	StopNode(context.Context, *tpupb.StopNodeRequest, ...gax.CallOption) (*StopNodeOperation, error)
	StopNodeOperation(name string) *StopNodeOperation
	StartNode(context.Context, *tpupb.StartNodeRequest, ...gax.CallOption) (*StartNodeOperation, error)
	StartNodeOperation(name string) *StartNodeOperation
	UpdateNode(context.Context, *tpupb.UpdateNodeRequest, ...gax.CallOption) (*UpdateNodeOperation, error)
	UpdateNodeOperation(name string) *UpdateNodeOperation
	ListQueuedResources(context.Context, *tpupb.ListQueuedResourcesRequest, ...gax.CallOption) *QueuedResourceIterator
	GetQueuedResource(context.Context, *tpupb.GetQueuedResourceRequest, ...gax.CallOption) (*tpupb.QueuedResource, error)
	CreateQueuedResource(context.Context, *tpupb.CreateQueuedResourceRequest, ...gax.CallOption) (*CreateQueuedResourceOperation, error)
	CreateQueuedResourceOperation(name string) *CreateQueuedResourceOperation
	DeleteQueuedResource(context.Context, *tpupb.DeleteQueuedResourceRequest, ...gax.CallOption) (*DeleteQueuedResourceOperation, error)
	DeleteQueuedResourceOperation(name string) *DeleteQueuedResourceOperation
	ResetQueuedResource(context.Context, *tpupb.ResetQueuedResourceRequest, ...gax.CallOption) (*ResetQueuedResourceOperation, error)
	ResetQueuedResourceOperation(name string) *ResetQueuedResourceOperation
	GenerateServiceIdentity(context.Context, *tpupb.GenerateServiceIdentityRequest, ...gax.CallOption) (*tpupb.GenerateServiceIdentityResponse, error)
	ListAcceleratorTypes(context.Context, *tpupb.ListAcceleratorTypesRequest, ...gax.CallOption) *AcceleratorTypeIterator
	GetAcceleratorType(context.Context, *tpupb.GetAcceleratorTypeRequest, ...gax.CallOption) (*tpupb.AcceleratorType, error)
	ListRuntimeVersions(context.Context, *tpupb.ListRuntimeVersionsRequest, ...gax.CallOption) *RuntimeVersionIterator
	GetRuntimeVersion(context.Context, *tpupb.GetRuntimeVersionRequest, ...gax.CallOption) (*tpupb.RuntimeVersion, error)
	GetGuestAttributes(context.Context, *tpupb.GetGuestAttributesRequest, ...gax.CallOption) (*tpupb.GetGuestAttributesResponse, error)
	SimulateMaintenanceEvent(context.Context, *tpupb.SimulateMaintenanceEventRequest, ...gax.CallOption) (*SimulateMaintenanceEventOperation, error)
	SimulateMaintenanceEventOperation(name string) *SimulateMaintenanceEventOperation
	GetLocation(context.Context, *locationpb.GetLocationRequest, ...gax.CallOption) (*locationpb.Location, error)
	ListLocations(context.Context, *locationpb.ListLocationsRequest, ...gax.CallOption) *LocationIterator
	CancelOperation(context.Context, *longrunningpb.CancelOperationRequest, ...gax.CallOption) error
	DeleteOperation(context.Context, *longrunningpb.DeleteOperationRequest, ...gax.CallOption) error
	GetOperation(context.Context, *longrunningpb.GetOperationRequest, ...gax.CallOption) (*longrunningpb.Operation, error)
	ListOperations(context.Context, *longrunningpb.ListOperationsRequest, ...gax.CallOption) *OperationIterator
}

// Client is a client for interacting with Cloud TPU API.
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
//
// # Manages TPU nodes and other resources
//
// TPU API v2alpha1
type Client struct {
	// The internal transport-dependent client.
	internalClient internalClient

	// The call options for this service.
	CallOptions *CallOptions

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient *lroauto.OperationsClient
}

// Wrapper methods routed to the internal client.

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *Client) Close() error {
	return c.internalClient.Close()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *Client) setGoogleClientInfo(keyval ...string) {
	c.internalClient.setGoogleClientInfo(keyval...)
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *Client) Connection() *grpc.ClientConn {
	return c.internalClient.Connection()
}

// ListNodes lists nodes.
func (c *Client) ListNodes(ctx context.Context, req *tpupb.ListNodesRequest, opts ...gax.CallOption) *NodeIterator {
	return c.internalClient.ListNodes(ctx, req, opts...)
}

// GetNode gets the details of a node.
func (c *Client) GetNode(ctx context.Context, req *tpupb.GetNodeRequest, opts ...gax.CallOption) (*tpupb.Node, error) {
	return c.internalClient.GetNode(ctx, req, opts...)
}

// CreateNode creates a node.
func (c *Client) CreateNode(ctx context.Context, req *tpupb.CreateNodeRequest, opts ...gax.CallOption) (*CreateNodeOperation, error) {
	return c.internalClient.CreateNode(ctx, req, opts...)
}

// CreateNodeOperation returns a new CreateNodeOperation from a given name.
// The name must be that of a previously created CreateNodeOperation, possibly from a different process.
func (c *Client) CreateNodeOperation(name string) *CreateNodeOperation {
	return c.internalClient.CreateNodeOperation(name)
}

// DeleteNode deletes a node.
func (c *Client) DeleteNode(ctx context.Context, req *tpupb.DeleteNodeRequest, opts ...gax.CallOption) (*DeleteNodeOperation, error) {
	return c.internalClient.DeleteNode(ctx, req, opts...)
}

// DeleteNodeOperation returns a new DeleteNodeOperation from a given name.
// The name must be that of a previously created DeleteNodeOperation, possibly from a different process.
func (c *Client) DeleteNodeOperation(name string) *DeleteNodeOperation {
	return c.internalClient.DeleteNodeOperation(name)
}

// StopNode stops a node. This operation is only available with single TPU nodes.
func (c *Client) StopNode(ctx context.Context, req *tpupb.StopNodeRequest, opts ...gax.CallOption) (*StopNodeOperation, error) {
	return c.internalClient.StopNode(ctx, req, opts...)
}

// StopNodeOperation returns a new StopNodeOperation from a given name.
// The name must be that of a previously created StopNodeOperation, possibly from a different process.
func (c *Client) StopNodeOperation(name string) *StopNodeOperation {
	return c.internalClient.StopNodeOperation(name)
}

// StartNode starts a node.
func (c *Client) StartNode(ctx context.Context, req *tpupb.StartNodeRequest, opts ...gax.CallOption) (*StartNodeOperation, error) {
	return c.internalClient.StartNode(ctx, req, opts...)
}

// StartNodeOperation returns a new StartNodeOperation from a given name.
// The name must be that of a previously created StartNodeOperation, possibly from a different process.
func (c *Client) StartNodeOperation(name string) *StartNodeOperation {
	return c.internalClient.StartNodeOperation(name)
}

// UpdateNode updates the configurations of a node.
func (c *Client) UpdateNode(ctx context.Context, req *tpupb.UpdateNodeRequest, opts ...gax.CallOption) (*UpdateNodeOperation, error) {
	return c.internalClient.UpdateNode(ctx, req, opts...)
}

// UpdateNodeOperation returns a new UpdateNodeOperation from a given name.
// The name must be that of a previously created UpdateNodeOperation, possibly from a different process.
func (c *Client) UpdateNodeOperation(name string) *UpdateNodeOperation {
	return c.internalClient.UpdateNodeOperation(name)
}

// ListQueuedResources lists queued resources.
func (c *Client) ListQueuedResources(ctx context.Context, req *tpupb.ListQueuedResourcesRequest, opts ...gax.CallOption) *QueuedResourceIterator {
	return c.internalClient.ListQueuedResources(ctx, req, opts...)
}

// GetQueuedResource gets details of a queued resource.
func (c *Client) GetQueuedResource(ctx context.Context, req *tpupb.GetQueuedResourceRequest, opts ...gax.CallOption) (*tpupb.QueuedResource, error) {
	return c.internalClient.GetQueuedResource(ctx, req, opts...)
}

// CreateQueuedResource creates a QueuedResource TPU instance.
func (c *Client) CreateQueuedResource(ctx context.Context, req *tpupb.CreateQueuedResourceRequest, opts ...gax.CallOption) (*CreateQueuedResourceOperation, error) {
	return c.internalClient.CreateQueuedResource(ctx, req, opts...)
}

// CreateQueuedResourceOperation returns a new CreateQueuedResourceOperation from a given name.
// The name must be that of a previously created CreateQueuedResourceOperation, possibly from a different process.
func (c *Client) CreateQueuedResourceOperation(name string) *CreateQueuedResourceOperation {
	return c.internalClient.CreateQueuedResourceOperation(name)
}

// DeleteQueuedResource deletes a QueuedResource TPU instance.
func (c *Client) DeleteQueuedResource(ctx context.Context, req *tpupb.DeleteQueuedResourceRequest, opts ...gax.CallOption) (*DeleteQueuedResourceOperation, error) {
	return c.internalClient.DeleteQueuedResource(ctx, req, opts...)
}

// DeleteQueuedResourceOperation returns a new DeleteQueuedResourceOperation from a given name.
// The name must be that of a previously created DeleteQueuedResourceOperation, possibly from a different process.
func (c *Client) DeleteQueuedResourceOperation(name string) *DeleteQueuedResourceOperation {
	return c.internalClient.DeleteQueuedResourceOperation(name)
}

// ResetQueuedResource resets a QueuedResource TPU instance
func (c *Client) ResetQueuedResource(ctx context.Context, req *tpupb.ResetQueuedResourceRequest, opts ...gax.CallOption) (*ResetQueuedResourceOperation, error) {
	return c.internalClient.ResetQueuedResource(ctx, req, opts...)
}

// ResetQueuedResourceOperation returns a new ResetQueuedResourceOperation from a given name.
// The name must be that of a previously created ResetQueuedResourceOperation, possibly from a different process.
func (c *Client) ResetQueuedResourceOperation(name string) *ResetQueuedResourceOperation {
	return c.internalClient.ResetQueuedResourceOperation(name)
}

// GenerateServiceIdentity generates the Cloud TPU service identity for the project.
func (c *Client) GenerateServiceIdentity(ctx context.Context, req *tpupb.GenerateServiceIdentityRequest, opts ...gax.CallOption) (*tpupb.GenerateServiceIdentityResponse, error) {
	return c.internalClient.GenerateServiceIdentity(ctx, req, opts...)
}

// ListAcceleratorTypes lists accelerator types supported by this API.
func (c *Client) ListAcceleratorTypes(ctx context.Context, req *tpupb.ListAcceleratorTypesRequest, opts ...gax.CallOption) *AcceleratorTypeIterator {
	return c.internalClient.ListAcceleratorTypes(ctx, req, opts...)
}

// GetAcceleratorType gets AcceleratorType.
func (c *Client) GetAcceleratorType(ctx context.Context, req *tpupb.GetAcceleratorTypeRequest, opts ...gax.CallOption) (*tpupb.AcceleratorType, error) {
	return c.internalClient.GetAcceleratorType(ctx, req, opts...)
}

// ListRuntimeVersions lists runtime versions supported by this API.
func (c *Client) ListRuntimeVersions(ctx context.Context, req *tpupb.ListRuntimeVersionsRequest, opts ...gax.CallOption) *RuntimeVersionIterator {
	return c.internalClient.ListRuntimeVersions(ctx, req, opts...)
}

// GetRuntimeVersion gets a runtime version.
func (c *Client) GetRuntimeVersion(ctx context.Context, req *tpupb.GetRuntimeVersionRequest, opts ...gax.CallOption) (*tpupb.RuntimeVersion, error) {
	return c.internalClient.GetRuntimeVersion(ctx, req, opts...)
}

// GetGuestAttributes retrieves the guest attributes for the node.
func (c *Client) GetGuestAttributes(ctx context.Context, req *tpupb.GetGuestAttributesRequest, opts ...gax.CallOption) (*tpupb.GetGuestAttributesResponse, error) {
	return c.internalClient.GetGuestAttributes(ctx, req, opts...)
}

// SimulateMaintenanceEvent simulates a maintenance event.
func (c *Client) SimulateMaintenanceEvent(ctx context.Context, req *tpupb.SimulateMaintenanceEventRequest, opts ...gax.CallOption) (*SimulateMaintenanceEventOperation, error) {
	return c.internalClient.SimulateMaintenanceEvent(ctx, req, opts...)
}

// SimulateMaintenanceEventOperation returns a new SimulateMaintenanceEventOperation from a given name.
// The name must be that of a previously created SimulateMaintenanceEventOperation, possibly from a different process.
func (c *Client) SimulateMaintenanceEventOperation(name string) *SimulateMaintenanceEventOperation {
	return c.internalClient.SimulateMaintenanceEventOperation(name)
}

// GetLocation gets information about a location.
func (c *Client) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	return c.internalClient.GetLocation(ctx, req, opts...)
}

// ListLocations lists information about the supported locations for this service.
func (c *Client) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	return c.internalClient.ListLocations(ctx, req, opts...)
}

// CancelOperation is a utility method from google.longrunning.Operations.
func (c *Client) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.CancelOperation(ctx, req, opts...)
}

// DeleteOperation is a utility method from google.longrunning.Operations.
func (c *Client) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	return c.internalClient.DeleteOperation(ctx, req, opts...)
}

// GetOperation is a utility method from google.longrunning.Operations.
func (c *Client) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	return c.internalClient.GetOperation(ctx, req, opts...)
}

// ListOperations is a utility method from google.longrunning.Operations.
func (c *Client) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	return c.internalClient.ListOperations(ctx, req, opts...)
}

// gRPCClient is a client for interacting with Cloud TPU API over gRPC transport.
//
// Methods, except Close, may be called concurrently. However, fields must not be modified concurrently with method calls.
type gRPCClient struct {
	// Connection pool of gRPC connections to the service.
	connPool gtransport.ConnPool

	// Points back to the CallOptions field of the containing Client
	CallOptions **CallOptions

	// The gRPC API client.
	client tpupb.TpuClient

	// LROClient is used internally to handle long-running operations.
	// It is exposed so that its CallOptions can be modified if required.
	// Users should not Close this client.
	LROClient **lroauto.OperationsClient

	operationsClient longrunningpb.OperationsClient

	locationsClient locationpb.LocationsClient

	// The x-goog-* metadata to be sent with each request.
	xGoogHeaders []string
}

// NewClient creates a new tpu client based on gRPC.
// The returned client must be Closed when it is done being used to clean up its underlying connections.
//
// # Manages TPU nodes and other resources
//
// TPU API v2alpha1
func NewClient(ctx context.Context, opts ...option.ClientOption) (*Client, error) {
	clientOpts := defaultGRPCClientOptions()
	if newClientHook != nil {
		hookOpts, err := newClientHook(ctx, clientHookParams{})
		if err != nil {
			return nil, err
		}
		clientOpts = append(clientOpts, hookOpts...)
	}

	connPool, err := gtransport.DialPool(ctx, append(clientOpts, opts...)...)
	if err != nil {
		return nil, err
	}
	client := Client{CallOptions: defaultCallOptions()}

	c := &gRPCClient{
		connPool:         connPool,
		client:           tpupb.NewTpuClient(connPool),
		CallOptions:      &client.CallOptions,
		operationsClient: longrunningpb.NewOperationsClient(connPool),
		locationsClient:  locationpb.NewLocationsClient(connPool),
	}
	c.setGoogleClientInfo()

	client.internalClient = c

	client.LROClient, err = lroauto.NewOperationsClient(ctx, gtransport.WithConnPool(connPool))
	if err != nil {
		// This error "should not happen", since we are just reusing old connection pool
		// and never actually need to dial.
		// If this does happen, we could leak connp. However, we cannot close conn:
		// If the user invoked the constructor with option.WithGRPCConn,
		// we would close a connection that's still in use.
		// TODO: investigate error conditions.
		return nil, err
	}
	c.LROClient = &client.LROClient
	return &client, nil
}

// Connection returns a connection to the API service.
//
// Deprecated: Connections are now pooled so this method does not always
// return the same resource.
func (c *gRPCClient) Connection() *grpc.ClientConn {
	return c.connPool.Conn()
}

// setGoogleClientInfo sets the name and version of the application in
// the `x-goog-api-client` header passed on each request. Intended for
// use by Google-written clients.
func (c *gRPCClient) setGoogleClientInfo(keyval ...string) {
	kv := append([]string{"gl-go", gax.GoVersion}, keyval...)
	kv = append(kv, "gapic", getVersionClient(), "gax", gax.Version, "grpc", grpc.Version)
	c.xGoogHeaders = []string{
		"x-goog-api-client", gax.XGoogHeader(kv...),
	}
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (c *gRPCClient) Close() error {
	return c.connPool.Close()
}

func (c *gRPCClient) ListNodes(ctx context.Context, req *tpupb.ListNodesRequest, opts ...gax.CallOption) *NodeIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListNodes[0:len((*c.CallOptions).ListNodes):len((*c.CallOptions).ListNodes)], opts...)
	it := &NodeIterator{}
	req = proto.Clone(req).(*tpupb.ListNodesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*tpupb.Node, string, error) {
		resp := &tpupb.ListNodesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListNodes(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetNodes(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetNode(ctx context.Context, req *tpupb.GetNodeRequest, opts ...gax.CallOption) (*tpupb.Node, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetNode[0:len((*c.CallOptions).GetNode):len((*c.CallOptions).GetNode)], opts...)
	var resp *tpupb.Node
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CreateNode(ctx context.Context, req *tpupb.CreateNodeRequest, opts ...gax.CallOption) (*CreateNodeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateNode[0:len((*c.CallOptions).CreateNode):len((*c.CallOptions).CreateNode)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) DeleteNode(ctx context.Context, req *tpupb.DeleteNodeRequest, opts ...gax.CallOption) (*DeleteNodeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteNode[0:len((*c.CallOptions).DeleteNode):len((*c.CallOptions).DeleteNode)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.DeleteNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) StopNode(ctx context.Context, req *tpupb.StopNodeRequest, opts ...gax.CallOption) (*StopNodeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).StopNode[0:len((*c.CallOptions).StopNode):len((*c.CallOptions).StopNode)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.StopNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &StopNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) StartNode(ctx context.Context, req *tpupb.StartNodeRequest, opts ...gax.CallOption) (*StartNodeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).StartNode[0:len((*c.CallOptions).StartNode):len((*c.CallOptions).StartNode)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.StartNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &StartNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) UpdateNode(ctx context.Context, req *tpupb.UpdateNodeRequest, opts ...gax.CallOption) (*UpdateNodeOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "node.name", url.QueryEscape(req.GetNode().GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).UpdateNode[0:len((*c.CallOptions).UpdateNode):len((*c.CallOptions).UpdateNode)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.UpdateNode(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &UpdateNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ListQueuedResources(ctx context.Context, req *tpupb.ListQueuedResourcesRequest, opts ...gax.CallOption) *QueuedResourceIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListQueuedResources[0:len((*c.CallOptions).ListQueuedResources):len((*c.CallOptions).ListQueuedResources)], opts...)
	it := &QueuedResourceIterator{}
	req = proto.Clone(req).(*tpupb.ListQueuedResourcesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*tpupb.QueuedResource, string, error) {
		resp := &tpupb.ListQueuedResourcesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListQueuedResources(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetQueuedResources(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetQueuedResource(ctx context.Context, req *tpupb.GetQueuedResourceRequest, opts ...gax.CallOption) (*tpupb.QueuedResource, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetQueuedResource[0:len((*c.CallOptions).GetQueuedResource):len((*c.CallOptions).GetQueuedResource)], opts...)
	var resp *tpupb.QueuedResource
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetQueuedResource(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) CreateQueuedResource(ctx context.Context, req *tpupb.CreateQueuedResourceRequest, opts ...gax.CallOption) (*CreateQueuedResourceOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CreateQueuedResource[0:len((*c.CallOptions).CreateQueuedResource):len((*c.CallOptions).CreateQueuedResource)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.CreateQueuedResource(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &CreateQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) DeleteQueuedResource(ctx context.Context, req *tpupb.DeleteQueuedResourceRequest, opts ...gax.CallOption) (*DeleteQueuedResourceOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteQueuedResource[0:len((*c.CallOptions).DeleteQueuedResource):len((*c.CallOptions).DeleteQueuedResource)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.DeleteQueuedResource(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &DeleteQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) ResetQueuedResource(ctx context.Context, req *tpupb.ResetQueuedResourceRequest, opts ...gax.CallOption) (*ResetQueuedResourceOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ResetQueuedResource[0:len((*c.CallOptions).ResetQueuedResource):len((*c.CallOptions).ResetQueuedResource)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.ResetQueuedResource(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &ResetQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) GenerateServiceIdentity(ctx context.Context, req *tpupb.GenerateServiceIdentityRequest, opts ...gax.CallOption) (*tpupb.GenerateServiceIdentityResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GenerateServiceIdentity[0:len((*c.CallOptions).GenerateServiceIdentity):len((*c.CallOptions).GenerateServiceIdentity)], opts...)
	var resp *tpupb.GenerateServiceIdentityResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GenerateServiceIdentity(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListAcceleratorTypes(ctx context.Context, req *tpupb.ListAcceleratorTypesRequest, opts ...gax.CallOption) *AcceleratorTypeIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListAcceleratorTypes[0:len((*c.CallOptions).ListAcceleratorTypes):len((*c.CallOptions).ListAcceleratorTypes)], opts...)
	it := &AcceleratorTypeIterator{}
	req = proto.Clone(req).(*tpupb.ListAcceleratorTypesRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*tpupb.AcceleratorType, string, error) {
		resp := &tpupb.ListAcceleratorTypesResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListAcceleratorTypes(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetAcceleratorTypes(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetAcceleratorType(ctx context.Context, req *tpupb.GetAcceleratorTypeRequest, opts ...gax.CallOption) (*tpupb.AcceleratorType, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetAcceleratorType[0:len((*c.CallOptions).GetAcceleratorType):len((*c.CallOptions).GetAcceleratorType)], opts...)
	var resp *tpupb.AcceleratorType
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetAcceleratorType(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListRuntimeVersions(ctx context.Context, req *tpupb.ListRuntimeVersionsRequest, opts ...gax.CallOption) *RuntimeVersionIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "parent", url.QueryEscape(req.GetParent()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListRuntimeVersions[0:len((*c.CallOptions).ListRuntimeVersions):len((*c.CallOptions).ListRuntimeVersions)], opts...)
	it := &RuntimeVersionIterator{}
	req = proto.Clone(req).(*tpupb.ListRuntimeVersionsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*tpupb.RuntimeVersion, string, error) {
		resp := &tpupb.ListRuntimeVersionsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.client.ListRuntimeVersions(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetRuntimeVersions(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) GetRuntimeVersion(ctx context.Context, req *tpupb.GetRuntimeVersionRequest, opts ...gax.CallOption) (*tpupb.RuntimeVersion, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetRuntimeVersion[0:len((*c.CallOptions).GetRuntimeVersion):len((*c.CallOptions).GetRuntimeVersion)], opts...)
	var resp *tpupb.RuntimeVersion
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetRuntimeVersion(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) GetGuestAttributes(ctx context.Context, req *tpupb.GetGuestAttributesRequest, opts ...gax.CallOption) (*tpupb.GetGuestAttributesResponse, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetGuestAttributes[0:len((*c.CallOptions).GetGuestAttributes):len((*c.CallOptions).GetGuestAttributes)], opts...)
	var resp *tpupb.GetGuestAttributesResponse
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.GetGuestAttributes(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) SimulateMaintenanceEvent(ctx context.Context, req *tpupb.SimulateMaintenanceEventRequest, opts ...gax.CallOption) (*SimulateMaintenanceEventOperation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).SimulateMaintenanceEvent[0:len((*c.CallOptions).SimulateMaintenanceEvent):len((*c.CallOptions).SimulateMaintenanceEvent)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.client.SimulateMaintenanceEvent(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return &SimulateMaintenanceEventOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, resp),
	}, nil
}

func (c *gRPCClient) GetLocation(ctx context.Context, req *locationpb.GetLocationRequest, opts ...gax.CallOption) (*locationpb.Location, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetLocation[0:len((*c.CallOptions).GetLocation):len((*c.CallOptions).GetLocation)], opts...)
	var resp *locationpb.Location
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.locationsClient.GetLocation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListLocations(ctx context.Context, req *locationpb.ListLocationsRequest, opts ...gax.CallOption) *LocationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListLocations[0:len((*c.CallOptions).ListLocations):len((*c.CallOptions).ListLocations)], opts...)
	it := &LocationIterator{}
	req = proto.Clone(req).(*locationpb.ListLocationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*locationpb.Location, string, error) {
		resp := &locationpb.ListLocationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.locationsClient.ListLocations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetLocations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

func (c *gRPCClient) CancelOperation(ctx context.Context, req *longrunningpb.CancelOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).CancelOperation[0:len((*c.CallOptions).CancelOperation):len((*c.CallOptions).CancelOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.operationsClient.CancelOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) DeleteOperation(ctx context.Context, req *longrunningpb.DeleteOperationRequest, opts ...gax.CallOption) error {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).DeleteOperation[0:len((*c.CallOptions).DeleteOperation):len((*c.CallOptions).DeleteOperation)], opts...)
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		_, err = c.operationsClient.DeleteOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	return err
}

func (c *gRPCClient) GetOperation(ctx context.Context, req *longrunningpb.GetOperationRequest, opts ...gax.CallOption) (*longrunningpb.Operation, error) {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).GetOperation[0:len((*c.CallOptions).GetOperation):len((*c.CallOptions).GetOperation)], opts...)
	var resp *longrunningpb.Operation
	err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
		var err error
		resp, err = c.operationsClient.GetOperation(ctx, req, settings.GRPC...)
		return err
	}, opts...)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (c *gRPCClient) ListOperations(ctx context.Context, req *longrunningpb.ListOperationsRequest, opts ...gax.CallOption) *OperationIterator {
	hds := []string{"x-goog-request-params", fmt.Sprintf("%s=%v", "name", url.QueryEscape(req.GetName()))}

	hds = append(c.xGoogHeaders, hds...)
	ctx = gax.InsertMetadataIntoOutgoingContext(ctx, hds...)
	opts = append((*c.CallOptions).ListOperations[0:len((*c.CallOptions).ListOperations):len((*c.CallOptions).ListOperations)], opts...)
	it := &OperationIterator{}
	req = proto.Clone(req).(*longrunningpb.ListOperationsRequest)
	it.InternalFetch = func(pageSize int, pageToken string) ([]*longrunningpb.Operation, string, error) {
		resp := &longrunningpb.ListOperationsResponse{}
		if pageToken != "" {
			req.PageToken = pageToken
		}
		if pageSize > math.MaxInt32 {
			req.PageSize = math.MaxInt32
		} else if pageSize != 0 {
			req.PageSize = int32(pageSize)
		}
		err := gax.Invoke(ctx, func(ctx context.Context, settings gax.CallSettings) error {
			var err error
			resp, err = c.operationsClient.ListOperations(ctx, req, settings.GRPC...)
			return err
		}, opts...)
		if err != nil {
			return nil, "", err
		}

		it.Response = resp
		return resp.GetOperations(), resp.GetNextPageToken(), nil
	}
	fetch := func(pageSize int, pageToken string) (string, error) {
		items, nextPageToken, err := it.InternalFetch(pageSize, pageToken)
		if err != nil {
			return "", err
		}
		it.items = append(it.items, items...)
		return nextPageToken, nil
	}

	it.pageInfo, it.nextFunc = iterator.NewPageInfo(fetch, it.bufLen, it.takeBuf)
	it.pageInfo.MaxSize = int(req.GetPageSize())
	it.pageInfo.Token = req.GetPageToken()

	return it
}

// CreateNodeOperation returns a new CreateNodeOperation from a given name.
// The name must be that of a previously created CreateNodeOperation, possibly from a different process.
func (c *gRPCClient) CreateNodeOperation(name string) *CreateNodeOperation {
	return &CreateNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// CreateQueuedResourceOperation returns a new CreateQueuedResourceOperation from a given name.
// The name must be that of a previously created CreateQueuedResourceOperation, possibly from a different process.
func (c *gRPCClient) CreateQueuedResourceOperation(name string) *CreateQueuedResourceOperation {
	return &CreateQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// DeleteNodeOperation returns a new DeleteNodeOperation from a given name.
// The name must be that of a previously created DeleteNodeOperation, possibly from a different process.
func (c *gRPCClient) DeleteNodeOperation(name string) *DeleteNodeOperation {
	return &DeleteNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// DeleteQueuedResourceOperation returns a new DeleteQueuedResourceOperation from a given name.
// The name must be that of a previously created DeleteQueuedResourceOperation, possibly from a different process.
func (c *gRPCClient) DeleteQueuedResourceOperation(name string) *DeleteQueuedResourceOperation {
	return &DeleteQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// ResetQueuedResourceOperation returns a new ResetQueuedResourceOperation from a given name.
// The name must be that of a previously created ResetQueuedResourceOperation, possibly from a different process.
func (c *gRPCClient) ResetQueuedResourceOperation(name string) *ResetQueuedResourceOperation {
	return &ResetQueuedResourceOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// SimulateMaintenanceEventOperation returns a new SimulateMaintenanceEventOperation from a given name.
// The name must be that of a previously created SimulateMaintenanceEventOperation, possibly from a different process.
func (c *gRPCClient) SimulateMaintenanceEventOperation(name string) *SimulateMaintenanceEventOperation {
	return &SimulateMaintenanceEventOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// StartNodeOperation returns a new StartNodeOperation from a given name.
// The name must be that of a previously created StartNodeOperation, possibly from a different process.
func (c *gRPCClient) StartNodeOperation(name string) *StartNodeOperation {
	return &StartNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// StopNodeOperation returns a new StopNodeOperation from a given name.
// The name must be that of a previously created StopNodeOperation, possibly from a different process.
func (c *gRPCClient) StopNodeOperation(name string) *StopNodeOperation {
	return &StopNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}

// UpdateNodeOperation returns a new UpdateNodeOperation from a given name.
// The name must be that of a previously created UpdateNodeOperation, possibly from a different process.
func (c *gRPCClient) UpdateNodeOperation(name string) *UpdateNodeOperation {
	return &UpdateNodeOperation{
		lro: longrunning.InternalNewOperation(*c.LROClient, &longrunningpb.Operation{Name: name}),
	}
}
