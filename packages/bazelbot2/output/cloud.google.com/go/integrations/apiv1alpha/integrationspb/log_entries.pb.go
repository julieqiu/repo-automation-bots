// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.3
// source: google/cloud/integrations/v1alpha/log_entries.proto

package integrationspb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies whether this execution info corresponds to actual integration or
// test case.
type ExecutionType int32

const (
	// Unspecified value.
	ExecutionType_EXECUTION_TYPE_UNSPECIFIED ExecutionType = 0
	// Execution corresponds to run of an integration version.
	ExecutionType_INTEGRATION_VERSION ExecutionType = 1
	// Execution corresponds to run of a functional test case.
	ExecutionType_TEST_CASE ExecutionType = 2
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "EXECUTION_TYPE_UNSPECIFIED",
		1: "INTEGRATION_VERSION",
		2: "TEST_CASE",
	}
	ExecutionType_value = map[string]int32{
		"EXECUTION_TYPE_UNSPECIFIED": 0,
		"INTEGRATION_VERSION":        1,
		"TEST_CASE":                  2,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[0].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[0]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{0}
}

// ExecutionMethod Enum
type ExecutionInfo_ExecutionMethod int32

const (
	// Default value.
	ExecutionInfo_EXECUTION_METHOD_UNSPECIFIED ExecutionInfo_ExecutionMethod = 0
	// Sync post.
	ExecutionInfo_POST ExecutionInfo_ExecutionMethod = 1
	// Async post with schedule time.
	ExecutionInfo_SCHEDULE ExecutionInfo_ExecutionMethod = 2
	// Async post.
	ExecutionInfo_POST_TO_QUEUE ExecutionInfo_ExecutionMethod = 3
)

// Enum value maps for ExecutionInfo_ExecutionMethod.
var (
	ExecutionInfo_ExecutionMethod_name = map[int32]string{
		0: "EXECUTION_METHOD_UNSPECIFIED",
		1: "POST",
		2: "SCHEDULE",
		3: "POST_TO_QUEUE",
	}
	ExecutionInfo_ExecutionMethod_value = map[string]int32{
		"EXECUTION_METHOD_UNSPECIFIED": 0,
		"POST":                         1,
		"SCHEDULE":                     2,
		"POST_TO_QUEUE":                3,
	}
)

func (x ExecutionInfo_ExecutionMethod) Enum() *ExecutionInfo_ExecutionMethod {
	p := new(ExecutionInfo_ExecutionMethod)
	*p = x
	return p
}

func (x ExecutionInfo_ExecutionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionInfo_ExecutionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[1].Descriptor()
}

func (ExecutionInfo_ExecutionMethod) Type() protoreflect.EnumType {
	return &file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[1]
}

func (x ExecutionInfo_ExecutionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionInfo_ExecutionMethod.Descriptor instead.
func (ExecutionInfo_ExecutionMethod) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{0, 0}
}

// Enum ExecutionState.
type IntegrationExecutionDetails_IntegrationExecutionState int32

const (
	// Default value.
	IntegrationExecutionDetails_INTEGRATION_EXECUTION_STATE_UNSPECIFIED IntegrationExecutionDetails_IntegrationExecutionState = 0
	// Integration is received and waiting for the execution. This happens when
	// firing the Integration via "postToQueue" or "schedule".
	IntegrationExecutionDetails_ON_HOLD IntegrationExecutionDetails_IntegrationExecutionState = 1
	// Integration is under processing.
	IntegrationExecutionDetails_IN_PROCESS IntegrationExecutionDetails_IntegrationExecutionState = 2
	// Integration execution successfully finished. There's no more change after
	// this state.
	IntegrationExecutionDetails_SUCCEEDED IntegrationExecutionDetails_IntegrationExecutionState = 3
	// Integration execution failed. There's no more change after this state.
	IntegrationExecutionDetails_FAILED IntegrationExecutionDetails_IntegrationExecutionState = 4
	// Integration execution canceled by user. There's no more change after this
	// state.
	IntegrationExecutionDetails_CANCELLED IntegrationExecutionDetails_IntegrationExecutionState = 5
	// Integration execution failed and waiting for retry.
	IntegrationExecutionDetails_RETRY_ON_HOLD IntegrationExecutionDetails_IntegrationExecutionState = 6
	// Integration execution suspended and waiting for manual intervention.
	IntegrationExecutionDetails_SUSPENDED IntegrationExecutionDetails_IntegrationExecutionState = 7
)

// Enum value maps for IntegrationExecutionDetails_IntegrationExecutionState.
var (
	IntegrationExecutionDetails_IntegrationExecutionState_name = map[int32]string{
		0: "INTEGRATION_EXECUTION_STATE_UNSPECIFIED",
		1: "ON_HOLD",
		2: "IN_PROCESS",
		3: "SUCCEEDED",
		4: "FAILED",
		5: "CANCELLED",
		6: "RETRY_ON_HOLD",
		7: "SUSPENDED",
	}
	IntegrationExecutionDetails_IntegrationExecutionState_value = map[string]int32{
		"INTEGRATION_EXECUTION_STATE_UNSPECIFIED": 0,
		"ON_HOLD":       1,
		"IN_PROCESS":    2,
		"SUCCEEDED":     3,
		"FAILED":        4,
		"CANCELLED":     5,
		"RETRY_ON_HOLD": 6,
		"SUSPENDED":     7,
	}
)

func (x IntegrationExecutionDetails_IntegrationExecutionState) Enum() *IntegrationExecutionDetails_IntegrationExecutionState {
	p := new(IntegrationExecutionDetails_IntegrationExecutionState)
	*p = x
	return p
}

func (x IntegrationExecutionDetails_IntegrationExecutionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntegrationExecutionDetails_IntegrationExecutionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[2].Descriptor()
}

func (IntegrationExecutionDetails_IntegrationExecutionState) Type() protoreflect.EnumType {
	return &file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[2]
}

func (x IntegrationExecutionDetails_IntegrationExecutionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntegrationExecutionDetails_IntegrationExecutionState.Descriptor instead.
func (IntegrationExecutionDetails_IntegrationExecutionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{1, 0}
}

// Enum TaskExecutionState.
type TaskExecutionDetails_TaskExecutionState int32

const (
	// Default value.
	TaskExecutionDetails_TASK_EXECUTION_STATE_UNSPECIFIED TaskExecutionDetails_TaskExecutionState = 0
	// Task is waiting for its precondition tasks to finish to start the
	// execution.
	TaskExecutionDetails_PENDING_EXECUTION TaskExecutionDetails_TaskExecutionState = 1
	// Task is under processing.
	TaskExecutionDetails_IN_PROCESS TaskExecutionDetails_TaskExecutionState = 2
	// Task execution successfully finished. There's no more change after
	// this state.
	TaskExecutionDetails_SUCCEED TaskExecutionDetails_TaskExecutionState = 3
	// Task execution failed. There's no more change after this state.
	TaskExecutionDetails_FAILED TaskExecutionDetails_TaskExecutionState = 4
	// Task execution failed and cause the whole integration execution to fail
	// immediately. There's no more change after this state.
	TaskExecutionDetails_FATAL TaskExecutionDetails_TaskExecutionState = 5
	// Task execution failed and waiting for retry.
	TaskExecutionDetails_RETRY_ON_HOLD TaskExecutionDetails_TaskExecutionState = 6
	// Task execution skipped. This happens when its precondition wasn't met,
	// or the integration execution been canceled before reach to the task.
	// There's no more changes after this state.
	TaskExecutionDetails_SKIPPED TaskExecutionDetails_TaskExecutionState = 7
	// Task execution canceled when in progress. This happens when integration
	// execution been canceled or any other task fall in fatal state.
	TaskExecutionDetails_CANCELLED TaskExecutionDetails_TaskExecutionState = 8
	// Task is waiting for its dependency tasks' rollback to finish to start
	// its rollback.
	TaskExecutionDetails_PENDING_ROLLBACK TaskExecutionDetails_TaskExecutionState = 9
	// Task is rolling back.
	TaskExecutionDetails_ROLLBACK_IN_PROCESS TaskExecutionDetails_TaskExecutionState = 10
	// Task is rolled back. This is the state we will set regardless of
	// rollback succeeding or failing.
	TaskExecutionDetails_ROLLEDBACK TaskExecutionDetails_TaskExecutionState = 11
	// Task is a SuspensionTask which has executed once, creating a pending
	// suspension.
	TaskExecutionDetails_SUSPENDED TaskExecutionDetails_TaskExecutionState = 12
)

// Enum value maps for TaskExecutionDetails_TaskExecutionState.
var (
	TaskExecutionDetails_TaskExecutionState_name = map[int32]string{
		0:  "TASK_EXECUTION_STATE_UNSPECIFIED",
		1:  "PENDING_EXECUTION",
		2:  "IN_PROCESS",
		3:  "SUCCEED",
		4:  "FAILED",
		5:  "FATAL",
		6:  "RETRY_ON_HOLD",
		7:  "SKIPPED",
		8:  "CANCELLED",
		9:  "PENDING_ROLLBACK",
		10: "ROLLBACK_IN_PROCESS",
		11: "ROLLEDBACK",
		12: "SUSPENDED",
	}
	TaskExecutionDetails_TaskExecutionState_value = map[string]int32{
		"TASK_EXECUTION_STATE_UNSPECIFIED": 0,
		"PENDING_EXECUTION":                1,
		"IN_PROCESS":                       2,
		"SUCCEED":                          3,
		"FAILED":                           4,
		"FATAL":                            5,
		"RETRY_ON_HOLD":                    6,
		"SKIPPED":                          7,
		"CANCELLED":                        8,
		"PENDING_ROLLBACK":                 9,
		"ROLLBACK_IN_PROCESS":              10,
		"ROLLEDBACK":                       11,
		"SUSPENDED":                        12,
	}
)

func (x TaskExecutionDetails_TaskExecutionState) Enum() *TaskExecutionDetails_TaskExecutionState {
	p := new(TaskExecutionDetails_TaskExecutionState)
	*p = x
	return p
}

func (x TaskExecutionDetails_TaskExecutionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskExecutionDetails_TaskExecutionState) Descriptor() protoreflect.EnumDescriptor {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[3].Descriptor()
}

func (TaskExecutionDetails_TaskExecutionState) Type() protoreflect.EnumType {
	return &file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes[3]
}

func (x TaskExecutionDetails_TaskExecutionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskExecutionDetails_TaskExecutionState.Descriptor instead.
func (TaskExecutionDetails_TaskExecutionState) EnumDescriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{3, 0}
}

// Log entry to log execution info for the monitored resource
// `integrations.googleapis.com/IntegrationVersion`.
type ExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the integration.
	Integration string `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	// The customer's project number.
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The trigger id of the integration trigger config. If both trigger_id
	// and client_id is present, the integration is executed from the start tasks
	// provided by the matching trigger config otherwise it is executed from the
	// default start tasks.
	TriggerId string `protobuf:"bytes,5,opt,name=trigger_id,json=triggerId,proto3" json:"trigger_id,omitempty"`
	// Execution parameters come in as part of the request.
	RequestParams map[string]*EventParameter `protobuf:"bytes,6,rep,name=request_params,json=requestParams,proto3" json:"request_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Execution parameters come out as part of the response.
	ResponseParams map[string]*EventParameter `protobuf:"bytes,7,rep,name=response_params,json=responseParams,proto3" json:"response_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Errors, warnings, and informationals associated with the workflow/task.
	// The order in which the errors were added by the workflow/task is
	// maintained.
	Errors []*ErrorDetail `protobuf:"bytes,10,rep,name=errors,proto3" json:"errors,omitempty"`
	// The configuration details for a task.
	TaskConfigs []*TaskConfig `protobuf:"bytes,13,rep,name=task_configs,json=taskConfigs,proto3" json:"task_configs,omitempty"`
	// Pointer to the active version it is executing.
	IntegrationVersionNumber string `protobuf:"bytes,14,opt,name=integration_version_number,json=integrationVersionNumber,proto3" json:"integration_version_number,omitempty"`
	// Auto-generated primary key.
	ExecutionId string `protobuf:"bytes,15,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	// Output only. State of the integration version
	IntegrationVersionState IntegrationState `protobuf:"varint,16,opt,name=integration_version_state,json=integrationVersionState,proto3,enum=google.cloud.integrations.v1alpha.IntegrationState" json:"integration_version_state,omitempty"`
	// Database persistence policy for execution info
	EnableDatabasePersistence bool `protobuf:"varint,17,opt,name=enable_database_persistence,json=enableDatabasePersistence,proto3" json:"enable_database_persistence,omitempty"`
	// Cloud Logging details for execution info
	CloudLoggingDetails *CloudLoggingDetails `protobuf:"bytes,18,opt,name=cloud_logging_details,json=cloudLoggingDetails,proto3" json:"cloud_logging_details,omitempty"`
	// The details about this integration execution.
	IntegrationExecutionDetails *IntegrationExecutionDetails `protobuf:"bytes,19,opt,name=integration_execution_details,json=integrationExecutionDetails,proto3" json:"integration_execution_details,omitempty"`
	// Specifies whether this execution info corresponds to actual integration or
	// test case.
	ExecutionType ExecutionType `protobuf:"varint,20,opt,name=execution_type,json=executionType,proto3,enum=google.cloud.integrations.v1alpha.ExecutionType" json:"execution_type,omitempty"`
	// The ways user posts this event.
	ExecutionMethod ExecutionInfo_ExecutionMethod `protobuf:"varint,21,opt,name=execution_method,json=executionMethod,proto3,enum=google.cloud.integrations.v1alpha.ExecutionInfo_ExecutionMethod" json:"execution_method,omitempty"`
	// An increasing sequence that is set when a new snapshot (Integration
	// Version) is created.
	IntegrationSnapshotNumber int64 `protobuf:"varint,22,opt,name=integration_snapshot_number,json=integrationSnapshotNumber,proto3" json:"integration_snapshot_number,omitempty"`
	// Replay info for the execution
	ReplayInfo *ExecutionInfo_ReplayInfo `protobuf:"bytes,23,opt,name=replay_info,json=replayInfo,proto3" json:"replay_info,omitempty"`
}

func (x *ExecutionInfo) Reset() {
	*x = ExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInfo) ProtoMessage() {}

func (x *ExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInfo.ProtoReflect.Descriptor instead.
func (*ExecutionInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutionInfo) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

func (x *ExecutionInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ExecutionInfo) GetTriggerId() string {
	if x != nil {
		return x.TriggerId
	}
	return ""
}

func (x *ExecutionInfo) GetRequestParams() map[string]*EventParameter {
	if x != nil {
		return x.RequestParams
	}
	return nil
}

func (x *ExecutionInfo) GetResponseParams() map[string]*EventParameter {
	if x != nil {
		return x.ResponseParams
	}
	return nil
}

func (x *ExecutionInfo) GetErrors() []*ErrorDetail {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ExecutionInfo) GetTaskConfigs() []*TaskConfig {
	if x != nil {
		return x.TaskConfigs
	}
	return nil
}

func (x *ExecutionInfo) GetIntegrationVersionNumber() string {
	if x != nil {
		return x.IntegrationVersionNumber
	}
	return ""
}

func (x *ExecutionInfo) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *ExecutionInfo) GetIntegrationVersionState() IntegrationState {
	if x != nil {
		return x.IntegrationVersionState
	}
	return IntegrationState_INTEGRATION_STATE_UNSPECIFIED
}

func (x *ExecutionInfo) GetEnableDatabasePersistence() bool {
	if x != nil {
		return x.EnableDatabasePersistence
	}
	return false
}

func (x *ExecutionInfo) GetCloudLoggingDetails() *CloudLoggingDetails {
	if x != nil {
		return x.CloudLoggingDetails
	}
	return nil
}

func (x *ExecutionInfo) GetIntegrationExecutionDetails() *IntegrationExecutionDetails {
	if x != nil {
		return x.IntegrationExecutionDetails
	}
	return nil
}

func (x *ExecutionInfo) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *ExecutionInfo) GetExecutionMethod() ExecutionInfo_ExecutionMethod {
	if x != nil {
		return x.ExecutionMethod
	}
	return ExecutionInfo_EXECUTION_METHOD_UNSPECIFIED
}

func (x *ExecutionInfo) GetIntegrationSnapshotNumber() int64 {
	if x != nil {
		return x.IntegrationSnapshotNumber
	}
	return 0
}

func (x *ExecutionInfo) GetReplayInfo() *ExecutionInfo_ReplayInfo {
	if x != nil {
		return x.ReplayInfo
	}
	return nil
}

// Contains the details of the execution info: this includes the tasks execution
// details plus the integration execution statistics.
type IntegrationExecutionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output only. The execution state of this Integration.
	IntegrationExecutionState IntegrationExecutionDetails_IntegrationExecutionState `protobuf:"varint,1,opt,name=integration_execution_state,json=integrationExecutionState,proto3,enum=google.cloud.integrations.v1alpha.IntegrationExecutionDetails_IntegrationExecutionState" json:"integration_execution_state,omitempty"`
	// Execution snapshot.
	IntegrationExecutionSnapshot []*IntegrationExecutionSnapshot `protobuf:"bytes,2,rep,name=integration_execution_snapshot,json=integrationExecutionSnapshot,proto3" json:"integration_execution_snapshot,omitempty"`
	// Status for the current execution attempt.
	ExecutionAttemptStats []*AttemptStats `protobuf:"bytes,3,rep,name=execution_attempt_stats,json=executionAttemptStats,proto3" json:"execution_attempt_stats,omitempty"`
	// Next scheduled execution time in case the execution status was
	// RETRY_ON_HOLD.
	NextExecutionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=next_execution_time,json=nextExecutionTime,proto3" json:"next_execution_time,omitempty"`
	// Indicates the number of times the execution has restarted from the
	// beginning.
	ExecutionRetriesCount int32 `protobuf:"varint,5,opt,name=execution_retries_count,json=executionRetriesCount,proto3" json:"execution_retries_count,omitempty"`
	// If the execution is manually canceled, this field will contain the reason
	// for cancellation.
	CancelReason string `protobuf:"bytes,6,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
}

func (x *IntegrationExecutionDetails) Reset() {
	*x = IntegrationExecutionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationExecutionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationExecutionDetails) ProtoMessage() {}

func (x *IntegrationExecutionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationExecutionDetails.ProtoReflect.Descriptor instead.
func (*IntegrationExecutionDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{1}
}

func (x *IntegrationExecutionDetails) GetIntegrationExecutionState() IntegrationExecutionDetails_IntegrationExecutionState {
	if x != nil {
		return x.IntegrationExecutionState
	}
	return IntegrationExecutionDetails_INTEGRATION_EXECUTION_STATE_UNSPECIFIED
}

func (x *IntegrationExecutionDetails) GetIntegrationExecutionSnapshot() []*IntegrationExecutionSnapshot {
	if x != nil {
		return x.IntegrationExecutionSnapshot
	}
	return nil
}

func (x *IntegrationExecutionDetails) GetExecutionAttemptStats() []*AttemptStats {
	if x != nil {
		return x.ExecutionAttemptStats
	}
	return nil
}

func (x *IntegrationExecutionDetails) GetNextExecutionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextExecutionTime
	}
	return nil
}

func (x *IntegrationExecutionDetails) GetExecutionRetriesCount() int32 {
	if x != nil {
		return x.ExecutionRetriesCount
	}
	return 0
}

func (x *IntegrationExecutionDetails) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

// Contains the snapshot of the integration execution for a given checkpoint.
type IntegrationExecutionSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates "right after which checkpoint task's execution" this snapshot
	// is taken.
	CheckpointTaskNumber string `protobuf:"bytes,1,opt,name=checkpoint_task_number,json=checkpointTaskNumber,proto3" json:"checkpoint_task_number,omitempty"`
	// Indicates when this snapshot is taken.
	SnapshotTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=snapshot_time,json=snapshotTime,proto3" json:"snapshot_time,omitempty"`
	// Snapshot metadata.
	IntegrationExecutionSnapshotMetadata *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata `protobuf:"bytes,3,opt,name=integration_execution_snapshot_metadata,json=integrationExecutionSnapshotMetadata,proto3" json:"integration_execution_snapshot_metadata,omitempty"`
	// All of the task execution details at the given point of time.
	TaskExecutionDetails []*TaskExecutionDetails `protobuf:"bytes,4,rep,name=task_execution_details,json=taskExecutionDetails,proto3" json:"task_execution_details,omitempty"`
	// All of the computed conditions that been calculated.
	ConditionResults []*ConditionResult `protobuf:"bytes,5,rep,name=condition_results,json=conditionResults,proto3" json:"condition_results,omitempty"`
	// The parameters in Event object.
	ExecutionParams map[string]*EventParameter `protobuf:"bytes,6,rep,name=execution_params,json=executionParams,proto3" json:"execution_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IntegrationExecutionSnapshot) Reset() {
	*x = IntegrationExecutionSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationExecutionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationExecutionSnapshot) ProtoMessage() {}

func (x *IntegrationExecutionSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationExecutionSnapshot.ProtoReflect.Descriptor instead.
func (*IntegrationExecutionSnapshot) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{2}
}

func (x *IntegrationExecutionSnapshot) GetCheckpointTaskNumber() string {
	if x != nil {
		return x.CheckpointTaskNumber
	}
	return ""
}

func (x *IntegrationExecutionSnapshot) GetSnapshotTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SnapshotTime
	}
	return nil
}

func (x *IntegrationExecutionSnapshot) GetIntegrationExecutionSnapshotMetadata() *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata {
	if x != nil {
		return x.IntegrationExecutionSnapshotMetadata
	}
	return nil
}

func (x *IntegrationExecutionSnapshot) GetTaskExecutionDetails() []*TaskExecutionDetails {
	if x != nil {
		return x.TaskExecutionDetails
	}
	return nil
}

func (x *IntegrationExecutionSnapshot) GetConditionResults() []*ConditionResult {
	if x != nil {
		return x.ConditionResults
	}
	return nil
}

func (x *IntegrationExecutionSnapshot) GetExecutionParams() map[string]*EventParameter {
	if x != nil {
		return x.ExecutionParams
	}
	return nil
}

// Contains the details of the execution of this task.
type TaskExecutionDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pointer to the task config it used for execution.
	TaskNumber string `protobuf:"bytes,1,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// The execution state of this task.
	TaskExecutionState TaskExecutionDetails_TaskExecutionState `protobuf:"varint,2,opt,name=task_execution_state,json=taskExecutionState,proto3,enum=google.cloud.integrations.v1alpha.TaskExecutionDetails_TaskExecutionState" json:"task_execution_state,omitempty"`
	// Status for the current task execution attempt.
	TaskAttemptStats []*AttemptStats `protobuf:"bytes,3,rep,name=task_attempt_stats,json=taskAttemptStats,proto3" json:"task_attempt_stats,omitempty"`
}

func (x *TaskExecutionDetails) Reset() {
	*x = TaskExecutionDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskExecutionDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecutionDetails) ProtoMessage() {}

func (x *TaskExecutionDetails) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecutionDetails.ProtoReflect.Descriptor instead.
func (*TaskExecutionDetails) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{3}
}

func (x *TaskExecutionDetails) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *TaskExecutionDetails) GetTaskExecutionState() TaskExecutionDetails_TaskExecutionState {
	if x != nil {
		return x.TaskExecutionState
	}
	return TaskExecutionDetails_TASK_EXECUTION_STATE_UNSPECIFIED
}

func (x *TaskExecutionDetails) GetTaskAttemptStats() []*AttemptStats {
	if x != nil {
		return x.TaskAttemptStats
	}
	return nil
}

// Status for the execution attempt.
type AttemptStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The start time of the integration execution for current attempt. This could
	// be in the future if it's been scheduled.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the integration execution for current attempt.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *AttemptStats) Reset() {
	*x = AttemptStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttemptStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttemptStats) ProtoMessage() {}

func (x *AttemptStats) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttemptStats.ProtoReflect.Descriptor instead.
func (*AttemptStats) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{4}
}

func (x *AttemptStats) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AttemptStats) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// An error, warning, or information message associated with an integration.
type ErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full text of the error message, including any parameters that were
	// thrown along with the exception.
	ErrorMessage string `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The task try-number, in which, the error occurred.  If zero, the error
	// happened at the integration level.
	TaskNumber int32 `protobuf:"varint,2,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
}

func (x *ErrorDetail) Reset() {
	*x = ErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorDetail) ProtoMessage() {}

func (x *ErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorDetail.ProtoReflect.Descriptor instead.
func (*ErrorDetail) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{5}
}

func (x *ErrorDetail) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ErrorDetail) GetTaskNumber() int32 {
	if x != nil {
		return x.TaskNumber
	}
	return 0
}

// Contains the combined condition calculation results.
type ConditionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the current task number.
	CurrentTaskNumber string `protobuf:"bytes,1,opt,name=current_task_number,json=currentTaskNumber,proto3" json:"current_task_number,omitempty"`
	// the next task number.
	NextTaskNumber string `protobuf:"bytes,2,opt,name=next_task_number,json=nextTaskNumber,proto3" json:"next_task_number,omitempty"`
	// the result comes out after evaluate the combined condition. True if there's
	// no combined condition specified.
	Result bool `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ConditionResult) Reset() {
	*x = ConditionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionResult) ProtoMessage() {}

func (x *ConditionResult) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionResult.ProtoReflect.Descriptor instead.
func (*ConditionResult) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{6}
}

func (x *ConditionResult) GetCurrentTaskNumber() string {
	if x != nil {
		return x.CurrentTaskNumber
	}
	return ""
}

func (x *ConditionResult) GetNextTaskNumber() string {
	if x != nil {
		return x.NextTaskNumber
	}
	return ""
}

func (x *ConditionResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// Contains the details of the execution info: this includes the replay reason
// and replay tree connecting executions in a parent-child relationship
type ExecutionInfo_ReplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If this execution is a replay of another execution, then this field
	// contains the original execution id.
	OriginalExecutionInfoId string `protobuf:"bytes,1,opt,name=original_execution_info_id,json=originalExecutionInfoId,proto3" json:"original_execution_info_id,omitempty"`
	// If this execution has been replayed, then this field contains the
	// execution ids of the replayed executions.
	ReplayedExecutionInfoIds []string `protobuf:"bytes,2,rep,name=replayed_execution_info_ids,json=replayedExecutionInfoIds,proto3" json:"replayed_execution_info_ids,omitempty"`
	// reason for replay
	ReplayReason string `protobuf:"bytes,3,opt,name=replay_reason,json=replayReason,proto3" json:"replay_reason,omitempty"`
}

func (x *ExecutionInfo_ReplayInfo) Reset() {
	*x = ExecutionInfo_ReplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionInfo_ReplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionInfo_ReplayInfo) ProtoMessage() {}

func (x *ExecutionInfo_ReplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionInfo_ReplayInfo.ProtoReflect.Descriptor instead.
func (*ExecutionInfo_ReplayInfo) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ExecutionInfo_ReplayInfo) GetOriginalExecutionInfoId() string {
	if x != nil {
		return x.OriginalExecutionInfoId
	}
	return ""
}

func (x *ExecutionInfo_ReplayInfo) GetReplayedExecutionInfoIds() []string {
	if x != nil {
		return x.ReplayedExecutionInfoIds
	}
	return nil
}

func (x *ExecutionInfo_ReplayInfo) GetReplayReason() string {
	if x != nil {
		return x.ReplayReason
	}
	return ""
}

// Metadata for the integration/task retry.
type IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task number associated with this snapshot. Could be empty.
	TaskNumber string `protobuf:"bytes,1,opt,name=task_number,json=taskNumber,proto3" json:"task_number,omitempty"`
	// the task name associated with this snapshot. Could be empty.
	Task string `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	// the integration execution attempt number this snapshot belongs to.
	IntegrationExecutionAttemptNum int32 `protobuf:"varint,3,opt,name=integration_execution_attempt_num,json=integrationExecutionAttemptNum,proto3" json:"integration_execution_attempt_num,omitempty"`
	// the task attempt number this snapshot belongs to. Could be empty.
	TaskAttemptNum int32 `protobuf:"varint,4,opt,name=task_attempt_num,json=taskAttemptNum,proto3" json:"task_attempt_num,omitempty"`
	// the task label associated with this snapshot. Could be empty.
	TaskLabel string `protobuf:"bytes,5,opt,name=task_label,json=taskLabel,proto3" json:"task_label,omitempty"`
	// Ancestor task number for the task(it will only be non-empty if the task
	// is under 'private workflow')
	AncestorTaskNumbers []string `protobuf:"bytes,6,rep,name=ancestor_task_numbers,json=ancestorTaskNumbers,proto3" json:"ancestor_task_numbers,omitempty"`
	// Ancestor iteration number for the task(it will only be non-empty if the
	// task is under 'private workflow')
	AncestorIterationNumbers []string `protobuf:"bytes,7,rep,name=ancestor_iteration_numbers,json=ancestorIterationNumbers,proto3" json:"ancestor_iteration_numbers,omitempty"`
	// The direct integration which the event execution snapshots belongs to
	Integration string `protobuf:"bytes,8,opt,name=integration,proto3" json:"integration,omitempty"`
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) Reset() {
	*x = IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) ProtoMessage() {}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata.ProtoReflect.Descriptor instead.
func (*IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) Descriptor() ([]byte, []int) {
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP(), []int{2, 0}
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetTaskNumber() string {
	if x != nil {
		return x.TaskNumber
	}
	return ""
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetIntegrationExecutionAttemptNum() int32 {
	if x != nil {
		return x.IntegrationExecutionAttemptNum
	}
	return 0
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetTaskAttemptNum() int32 {
	if x != nil {
		return x.TaskAttemptNum
	}
	return 0
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetTaskLabel() string {
	if x != nil {
		return x.TaskLabel
	}
	return ""
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetAncestorTaskNumbers() []string {
	if x != nil {
		return x.AncestorTaskNumbers
	}
	return nil
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetAncestorIterationNumbers() []string {
	if x != nil {
		return x.AncestorIterationNumbers
	}
	return nil
}

func (x *IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata) GetIntegration() string {
	if x != nil {
		return x.Integration
	}
	return ""
}

var File_google_cloud_integrations_v1alpha_log_entries_proto protoreflect.FileDescriptor

var file_google_cloud_integrations_v1alpha_log_entries_proto_rawDesc = []byte{
	0x0a, 0x33, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x39, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcb, 0x0e, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x6d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x46, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x74, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x6a, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x1d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x57, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xad, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x1a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x5e, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x03,
	0x22, 0x8b, 0x06, 0x0a, 0x1b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x9d, 0x01, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x58, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x85, 0x01, 0x0a, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x67, 0x0a, 0x17, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x15, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4a, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x22, 0xa1,
	0x09, 0x0a, 0x1c, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0xbb, 0x01, 0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x24,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x6d, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x14, 0x74,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x83, 0x03, 0x0a, 0x24, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x12, 0x49, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x18, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a, 0x14, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x99, 0x04, 0x0a, 0x14, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x14,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x74, 0x61, 0x73, 0x6b, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x12, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x0c, 0x22, 0x80,
	0x01, 0x0a, 0x0c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x53, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x57, 0x0a, 0x0d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43,
	0x41, 0x53, 0x45, 0x10, 0x02, 0x42, 0xa9, 0x01, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42,
	0x0f, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x49, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x62, 0x3b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0x62, 0xaa, 0x02, 0x21,
	0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x31, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescOnce sync.Once
	file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescData = file_google_cloud_integrations_v1alpha_log_entries_proto_rawDesc
)

func file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescGZIP() []byte {
	file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescOnce.Do(func() {
		file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescData = protoimpl.X.CompressGZIP(file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescData)
	})
	return file_google_cloud_integrations_v1alpha_log_entries_proto_rawDescData
}

var file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_google_cloud_integrations_v1alpha_log_entries_proto_goTypes = []any{
	(ExecutionType)(0),                                         // 0: google.cloud.integrations.v1alpha.ExecutionType
	(ExecutionInfo_ExecutionMethod)(0),                         // 1: google.cloud.integrations.v1alpha.ExecutionInfo.ExecutionMethod
	(IntegrationExecutionDetails_IntegrationExecutionState)(0), // 2: google.cloud.integrations.v1alpha.IntegrationExecutionDetails.IntegrationExecutionState
	(TaskExecutionDetails_TaskExecutionState)(0),               // 3: google.cloud.integrations.v1alpha.TaskExecutionDetails.TaskExecutionState
	(*ExecutionInfo)(nil),                                      // 4: google.cloud.integrations.v1alpha.ExecutionInfo
	(*IntegrationExecutionDetails)(nil),                        // 5: google.cloud.integrations.v1alpha.IntegrationExecutionDetails
	(*IntegrationExecutionSnapshot)(nil),                       // 6: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot
	(*TaskExecutionDetails)(nil),                               // 7: google.cloud.integrations.v1alpha.TaskExecutionDetails
	(*AttemptStats)(nil),                                       // 8: google.cloud.integrations.v1alpha.AttemptStats
	(*ErrorDetail)(nil),                                        // 9: google.cloud.integrations.v1alpha.ErrorDetail
	(*ConditionResult)(nil),                                    // 10: google.cloud.integrations.v1alpha.ConditionResult
	(*ExecutionInfo_ReplayInfo)(nil),                           // 11: google.cloud.integrations.v1alpha.ExecutionInfo.ReplayInfo
	nil,                                                        // 12: google.cloud.integrations.v1alpha.ExecutionInfo.RequestParamsEntry
	nil,                                                        // 13: google.cloud.integrations.v1alpha.ExecutionInfo.ResponseParamsEntry
	(*IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata)(nil), // 14: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.IntegrationExecutionSnapshotMetadata
	nil,                           // 15: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.ExecutionParamsEntry
	(*TaskConfig)(nil),            // 16: google.cloud.integrations.v1alpha.TaskConfig
	(IntegrationState)(0),         // 17: google.cloud.integrations.v1alpha.IntegrationState
	(*CloudLoggingDetails)(nil),   // 18: google.cloud.integrations.v1alpha.CloudLoggingDetails
	(*timestamppb.Timestamp)(nil), // 19: google.protobuf.Timestamp
	(*EventParameter)(nil),        // 20: google.cloud.integrations.v1alpha.EventParameter
}
var file_google_cloud_integrations_v1alpha_log_entries_proto_depIdxs = []int32{
	12, // 0: google.cloud.integrations.v1alpha.ExecutionInfo.request_params:type_name -> google.cloud.integrations.v1alpha.ExecutionInfo.RequestParamsEntry
	13, // 1: google.cloud.integrations.v1alpha.ExecutionInfo.response_params:type_name -> google.cloud.integrations.v1alpha.ExecutionInfo.ResponseParamsEntry
	9,  // 2: google.cloud.integrations.v1alpha.ExecutionInfo.errors:type_name -> google.cloud.integrations.v1alpha.ErrorDetail
	16, // 3: google.cloud.integrations.v1alpha.ExecutionInfo.task_configs:type_name -> google.cloud.integrations.v1alpha.TaskConfig
	17, // 4: google.cloud.integrations.v1alpha.ExecutionInfo.integration_version_state:type_name -> google.cloud.integrations.v1alpha.IntegrationState
	18, // 5: google.cloud.integrations.v1alpha.ExecutionInfo.cloud_logging_details:type_name -> google.cloud.integrations.v1alpha.CloudLoggingDetails
	5,  // 6: google.cloud.integrations.v1alpha.ExecutionInfo.integration_execution_details:type_name -> google.cloud.integrations.v1alpha.IntegrationExecutionDetails
	0,  // 7: google.cloud.integrations.v1alpha.ExecutionInfo.execution_type:type_name -> google.cloud.integrations.v1alpha.ExecutionType
	1,  // 8: google.cloud.integrations.v1alpha.ExecutionInfo.execution_method:type_name -> google.cloud.integrations.v1alpha.ExecutionInfo.ExecutionMethod
	11, // 9: google.cloud.integrations.v1alpha.ExecutionInfo.replay_info:type_name -> google.cloud.integrations.v1alpha.ExecutionInfo.ReplayInfo
	2,  // 10: google.cloud.integrations.v1alpha.IntegrationExecutionDetails.integration_execution_state:type_name -> google.cloud.integrations.v1alpha.IntegrationExecutionDetails.IntegrationExecutionState
	6,  // 11: google.cloud.integrations.v1alpha.IntegrationExecutionDetails.integration_execution_snapshot:type_name -> google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot
	8,  // 12: google.cloud.integrations.v1alpha.IntegrationExecutionDetails.execution_attempt_stats:type_name -> google.cloud.integrations.v1alpha.AttemptStats
	19, // 13: google.cloud.integrations.v1alpha.IntegrationExecutionDetails.next_execution_time:type_name -> google.protobuf.Timestamp
	19, // 14: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.snapshot_time:type_name -> google.protobuf.Timestamp
	14, // 15: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.integration_execution_snapshot_metadata:type_name -> google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.IntegrationExecutionSnapshotMetadata
	7,  // 16: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.task_execution_details:type_name -> google.cloud.integrations.v1alpha.TaskExecutionDetails
	10, // 17: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.condition_results:type_name -> google.cloud.integrations.v1alpha.ConditionResult
	15, // 18: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.execution_params:type_name -> google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.ExecutionParamsEntry
	3,  // 19: google.cloud.integrations.v1alpha.TaskExecutionDetails.task_execution_state:type_name -> google.cloud.integrations.v1alpha.TaskExecutionDetails.TaskExecutionState
	8,  // 20: google.cloud.integrations.v1alpha.TaskExecutionDetails.task_attempt_stats:type_name -> google.cloud.integrations.v1alpha.AttemptStats
	19, // 21: google.cloud.integrations.v1alpha.AttemptStats.start_time:type_name -> google.protobuf.Timestamp
	19, // 22: google.cloud.integrations.v1alpha.AttemptStats.end_time:type_name -> google.protobuf.Timestamp
	20, // 23: google.cloud.integrations.v1alpha.ExecutionInfo.RequestParamsEntry.value:type_name -> google.cloud.integrations.v1alpha.EventParameter
	20, // 24: google.cloud.integrations.v1alpha.ExecutionInfo.ResponseParamsEntry.value:type_name -> google.cloud.integrations.v1alpha.EventParameter
	20, // 25: google.cloud.integrations.v1alpha.IntegrationExecutionSnapshot.ExecutionParamsEntry.value:type_name -> google.cloud.integrations.v1alpha.EventParameter
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_google_cloud_integrations_v1alpha_log_entries_proto_init() }
func file_google_cloud_integrations_v1alpha_log_entries_proto_init() {
	if File_google_cloud_integrations_v1alpha_log_entries_proto != nil {
		return
	}
	file_google_cloud_integrations_v1alpha_cloud_logging_details_proto_init()
	file_google_cloud_integrations_v1alpha_event_parameter_proto_init()
	file_google_cloud_integrations_v1alpha_integration_state_proto_init()
	file_google_cloud_integrations_v1alpha_task_config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationExecutionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationExecutionSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TaskExecutionDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AttemptStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ConditionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutionInfo_ReplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*IntegrationExecutionSnapshot_IntegrationExecutionSnapshotMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_google_cloud_integrations_v1alpha_log_entries_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_cloud_integrations_v1alpha_log_entries_proto_goTypes,
		DependencyIndexes: file_google_cloud_integrations_v1alpha_log_entries_proto_depIdxs,
		EnumInfos:         file_google_cloud_integrations_v1alpha_log_entries_proto_enumTypes,
		MessageInfos:      file_google_cloud_integrations_v1alpha_log_entries_proto_msgTypes,
	}.Build()
	File_google_cloud_integrations_v1alpha_log_entries_proto = out.File
	file_google_cloud_integrations_v1alpha_log_entries_proto_rawDesc = nil
	file_google_cloud_integrations_v1alpha_log_entries_proto_goTypes = nil
	file_google_cloud_integrations_v1alpha_log_entries_proto_depIdxs = nil
}
